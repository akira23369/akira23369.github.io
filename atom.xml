<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>akiraの博客思密达</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2025-02-28T07:30:17.000Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>akira23369</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>csharp的Lambda表达式</title>
    <link href="http://example.com/2025/02/28/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Csharp/csharp%E7%9A%84Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://example.com/2025/02/28/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Csharp/csharp%E7%9A%84Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2025-02-28T02:38:33.000Z</published>
    <updated>2025-02-28T07:30:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>在C#中，<strong>Lambda表达式</strong>是一种简洁的<a href="/2025/02/27/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Csharp/csharp%E5%A7%94%E6%89%98/#%E5%8C%BF%E5%90%8D%E6%96%B9%E6%B3%95" title="csharp委托">匿名函数</a>，用于创建委托或表达式树类型。</p><h1 id="Lambda表达式的基本形式"><a href="#Lambda表达式的基本形式" class="headerlink" title="Lambda表达式的基本形式"></a><strong>Lambda表达式的基本形式</strong></h1><p>Lambda表达式分为两种形式：</p><p><strong>表达式Lambda</strong><br>仅包含单个表达式，无需大括号，自动返回结果。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(参数列表) =&gt; 表达式</span><br><span class="line"></span><br><span class="line">Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt; square = x =&gt; x * x;</span><br><span class="line">Console.WriteLine(square(<span class="number">5</span>)); <span class="comment">// 输出 25</span></span><br></pre></td></tr></table></figure><p><strong>语句块Lambda</strong><br>包含多行语句，需用大括号包裹，显式使用<code>return</code>（若有返回值）。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(参数列表) =&gt; &#123; </span><br><span class="line">    语句块;</span><br><span class="line">    <span class="keyword">return</span> 结果; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Action&lt;<span class="built_in">string</span>&gt; greet = name =&gt; &#123;</span><br><span class="line">    <span class="built_in">string</span> message = <span class="string">$&quot;Hello, <span class="subst">&#123;name&#125;</span>!&quot;</span>;</span><br><span class="line">    Console.WriteLine(message);</span><br><span class="line">&#125;;</span><br><span class="line">greet(<span class="string">&quot;Alice&quot;</span>); <span class="comment">// 输出 &quot;Hello, Alice!&quot;</span></span><br></pre></td></tr></table></figure><h1 id="Lambda表达式的简写"><a href="#Lambda表达式的简写" class="headerlink" title="Lambda表达式的简写"></a>Lambda表达式的简写</h1><h2 id="简化1：自动类型推断"><a href="#简化1：自动类型推断" class="headerlink" title="简化1：自动类型推断"></a><strong>简化1：自动类型推断</strong></h2><p>当委托类型明确时，参数类型可省略：  <code>(int x) =&gt; ...</code> → <code>x =&gt; ...</code></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt; doubler = (x) =&gt; &#123; </span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">2</span>; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="简化2：单参数可省略括号"><a href="#简化2：单参数可省略括号" class="headerlink" title="简化2：单参数可省略括号"></a><strong>简化2：单参数可省略括号</strong></h2><p>若只有一个参数，<code>()</code>可省略：  <code>(x) =&gt; ...</code> → <code>x =&gt; ...</code></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt; doubler = x =&gt; &#123; </span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">2</span>; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="简化3：单行表达式自动返回"><a href="#简化3：单行表达式自动返回" class="headerlink" title="简化3：单行表达式自动返回"></a><strong>简化3：单行表达式自动返回</strong></h2><p>若主体是单行表达式，可省略<code>&#123;&#125;</code>和<code>return</code>：  <code>x =&gt; &#123; return x*2; &#125;</code> → <code>x =&gt; x*2</code></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt; doubler = x =&gt; x * <span class="number">2</span>;</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a><strong>注意事项</strong></h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多参数必须保留括号：</span></span><br><span class="line">Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>, <span class="built_in">int</span>&gt; <span class="keyword">add</span> = (a, b) =&gt; a + b; <span class="comment">// 正确</span></span><br><span class="line">Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>, <span class="built_in">int</span>&gt; <span class="keyword">add</span> = a, b =&gt; a + b;   <span class="comment">// 错误！</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// 无参数时需空括号:</span></span><br><span class="line">Action printHello = () =&gt; Console.WriteLine(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复杂逻辑仍需代码块：</span></span><br><span class="line">Action log = () =&gt; &#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;Start&quot;</span>);</span><br><span class="line">    <span class="comment">// 多行逻辑</span></span><br><span class="line">    Console.WriteLine(<span class="string">&quot;End&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="Lambda的常见用途"><a href="#Lambda的常见用途" class="headerlink" title="Lambda的常见用途"></a><strong>Lambda的常见用途</strong></h1><p>委托实例化  和 事件处理</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>, <span class="built_in">int</span>&gt; sum = (a, b) =&gt; a + b;</span><br><span class="line">Action&lt;<span class="built_in">string</span>&gt; log = msg =&gt; Console.WriteLine(msg);</span><br><span class="line">button.Click += (sender, e) =&gt; MessageBox.Show(<span class="string">&quot;Clicked!&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>LINQ查询</strong><br>与LINQ方法结合，实现数据筛选、转换等操作：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt; &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> evenNumbers = numbers.Where(n =&gt; n % <span class="number">2</span> == <span class="number">0</span>); <span class="comment">// 筛选偶数</span></span><br><span class="line"><span class="keyword">var</span> squares = numbers.Select(x =&gt; x * x);         <span class="comment">// 计算平方</span></span><br></pre></td></tr></table></figure><p><strong>表达式树（Expression Trees）</strong><br>将Lambda编译为表达式树，供其他框架（如EF Core）解析：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Expression&lt;Func&lt;<span class="built_in">int</span>, <span class="built_in">bool</span>&gt;&gt; expr = x =&gt; x &gt; <span class="number">5</span>;</span><br></pre></td></tr></table></figure><h1 id="闭包与变量捕获"><a href="#闭包与变量捕获" class="headerlink" title="闭包与变量捕获"></a><strong>闭包与变量捕获</strong></h1><p><strong>当匿名函数捕获了外部变量时，C# 编译器会自动生成一个隐藏的类（称为“闭包类”），将捕获的变量“打包”到这个类的实例中。这个实例的生命周期会延长，使得闭包可以在后续继续访问这些变量。</strong></p><p><strong>示例 1：基本闭包</strong></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Func&lt;<span class="built_in">int</span>&gt; <span class="title">CreateCounter</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> () =&gt; ++count; <span class="comment">// 闭包捕获了外部变量 count</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> counter = CreateCounter();</span><br><span class="line">Console.WriteLine(counter()); <span class="comment">// 输出 1</span></span><br><span class="line">Console.WriteLine(counter()); <span class="comment">// 输出 2（说明闭包修改并保留了 count 的状态）</span></span><br></pre></td></tr></table></figure><ul><li><strong>现象</strong>：<code>count</code> 本应在 <code>CreateCounter</code> 方法执行完毕后被销毁，但闭包保留了它的状态。</li><li><strong>原理</strong>：编译器生成一个类，将 <code>count</code> 作为该类的字段存储，闭包通过这个类的实例访问 <code>count</code>。</li></ul><p><strong>示例 2：循环中的闭包陷阱</strong></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> actions = <span class="keyword">new</span> List&lt;Action&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    actions.Add(() =&gt; Console.WriteLine(i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> action <span class="keyword">in</span> actions)</span><br><span class="line">&#123;</span><br><span class="line">    action(); <span class="comment">// 输出 3, 3, 3（而非预期的 0, 1, 2）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>问题原因</strong>：所有闭包共享同一个变量 <code>i</code>（在循环结束后，<code>i</code> 的值为 3）。</li><li><strong>解决方案</strong>：在循环内部创建临时变量，让闭包捕获独立的值：</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> current = i; <span class="comment">// 每次循环新建一个临时变量</span></span><br><span class="line">    actions.Add(() =&gt; Console.WriteLine(current)); <span class="comment">// 输出 0, 1, 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在C#中，&lt;strong&gt;Lambda表达式&lt;/strong&gt;是一种简洁的&lt;a href=&quot;/2025/02/27/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Csharp/csharp%E5%A7%94%E6%89%98/#%E5%8C%BF</summary>
      
    
    
    
    <category term="编程语言" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Csharp" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Csharp/"/>
    
    
    <category term="编程语言" scheme="http://example.com/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Csharp" scheme="http://example.com/tags/Csharp/"/>
    
  </entry>
  
  <entry>
    <title>csharp委托</title>
    <link href="http://example.com/2025/02/27/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Csharp/csharp%E5%A7%94%E6%89%98/"/>
    <id>http://example.com/2025/02/27/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Csharp/csharp%E5%A7%94%E6%89%98/</id>
    <published>2025-02-27T14:37:01.000Z</published>
    <updated>2025-02-28T07:30:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="委托基本概念"><a href="#委托基本概念" class="headerlink" title="委托基本概念"></a>委托基本概念</h1><ul><li><strong>定义</strong>：委托是<strong>类型安全的函数指针</strong>，通过 <code>delegate</code> 关键字声明。（ 委托就是一个用来装函数的类的类型）</li><li><strong>作用</strong>：允许将方法作为参数传递、动态调用多个方法。</li><li><strong>核心特点</strong>：<ul><li>类型安全（编译时检查参数和返回值）。</li><li>支持多播（组合多个方法）。</li><li>可用于异步编程。</li></ul></li></ul><h1 id="委托的声明与使用"><a href="#委托的声明与使用" class="headerlink" title="委托的声明与使用"></a><strong>委托的声明与使用</strong></h1><p>写在哪里？<br>可以申明在namespace和class语句块中<br>更多的写在<strong>namespace</strong>中</p><p> 委托常用在：</p><ol><li>作为类的成员</li><li>作为函数的参数</li></ol><p><strong>声明委托类型</strong>：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义委托类型，指定方法签名</span></span><br><span class="line"><span class="comment">// MathOperation是一个委托类型，只能引用接受两个 int 参数并返回 string 的方法。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="built_in">string</span> <span class="title">MathOperation</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span>;</span><br></pre></td></tr></table></figure><p><strong>实例化委托</strong>：<br>eg1：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 绑定到具体方法</span></span><br><span class="line">MathOperation <span class="keyword">add</span> = (a, b) =&gt; a + b;</span><br><span class="line">MathOperation multiply = (a, b) =&gt; a * b;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用委托</span></span><br><span class="line"><span class="built_in">int</span> result = <span class="keyword">add</span>(<span class="number">3</span>, <span class="number">5</span>); <span class="comment">// 输出 8</span></span><br></pre></td></tr></table></figure><p>eg2：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="built_in">int</span> <span class="title">Fun</span>(<span class="params"><span class="built_in">int</span> a</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">MyFun1</span>(<span class="params"><span class="built_in">int</span> a</span>) ...</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">MyFun2</span>(<span class="params"><span class="built_in">int</span> a</span>) ...</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">Fun f</span> = MyFun1;</span><br><span class="line"><span class="built_in">int</span> tmp = f.Invoke(<span class="number">666</span>);</span><br><span class="line"><span class="built_in">int</span> tmp = f(<span class="number">666</span>);</span><br></pre></td></tr></table></figure><h1 id="多播委托（Multicast-Delegate）"><a href="#多播委托（Multicast-Delegate）" class="headerlink" title="多播委托（Multicast Delegate）"></a><strong>多播委托（Multicast Delegate）</strong></h1><ul><li><strong>功能</strong>：一个委托实例可绑定多个方法，按顺序执行。</li><li><strong>操作符</strong>：<ul><li><code>+=</code> 添加方法。</li><li><code>-=</code> 移除方法。</li></ul></li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MathOperation <span class="keyword">add</span> = (a, b) =&gt; a + b;</span><br><span class="line">MathOperation multiply = (a, b) =&gt; a * b;</span><br><span class="line">MathOperation operations = <span class="keyword">add</span>;</span><br><span class="line">operations += multiply;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用时会依次执行 add 和 multiply</span></span><br><span class="line"><span class="built_in">int</span> finalResult = operations(<span class="number">3</span>, <span class="number">5</span>); <span class="comment">// 返回 multiply 的结果 15（最后一个方法的返回值）</span></span><br></pre></td></tr></table></figure><ul><li><strong>注意</strong>：返回值通常只保留最后一个方法的返回值，中间结果可能被覆盖。<br>以下是一个示例，演示了如何获取多播委托每一个函数的返回值：</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="built_in">int</span> <span class="title">MyDelegate</span>()</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        MyDelegate myDelegate = Method1;</span><br><span class="line">        myDelegate += Method2;</span><br><span class="line">        myDelegate += Method3;</span><br><span class="line">        <span class="comment">// 获取每一个函数的返回值</span></span><br><span class="line">        Delegate[] delegates = myDelegate.GetInvocationList();</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> del <span class="keyword">in</span> delegates)</span><br><span class="line">        &#123;</span><br><span class="line">            MyDelegate singleDelegate = (MyDelegate)del;</span><br><span class="line">            <span class="built_in">int</span> result = singleDelegate();</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;Method returned: <span class="subst">&#123;result&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">Method1</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Method1&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">Method2</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Method2&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">Method3</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Method3&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="内置泛型委托"><a href="#内置泛型委托" class="headerlink" title="内置泛型委托"></a><strong>内置泛型委托</strong></h1><p><strong><code>Action</code></strong>：无返回值的方法，最多支持 16 个参数。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Action&lt;<span class="built_in">string</span>&gt; log = message =&gt; Console.WriteLine(message);</span><br><span class="line">log(<span class="string">&quot;Hello, Action!&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong><code>Func</code></strong>：有返回值的方法，最后一个类型参数为返回类型。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>, <span class="built_in">string</span>&gt; formatSum = (a, b) =&gt; <span class="string">$&quot;<span class="subst">&#123;a + b&#125;</span>&quot;</span>;</span><br><span class="line">Console.WriteLine(formatSum(<span class="number">3</span>, <span class="number">5</span>)); <span class="comment">// 输出 &quot;8&quot;</span></span><br></pre></td></tr></table></figure><h1 id="匿名方法"><a href="#匿名方法" class="headerlink" title="匿名方法"></a><strong>匿名方法</strong></h1><p><strong>匿名函数的使用主要是配合委托和事件进行使用</strong><br>何时使用？</p><ol><li>函数中传递委托参数时</li><li>委托或事件赋值时</li></ol><p>缺点?</p><ol><li>不能删的具体只能无脑null</li></ol><p>eg：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">class</span> <span class="title">Test</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Fun1</span>(<span class="params">Action action</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;需要委托作为参数的函数,使用函数更加方便&quot;</span>);</span><br><span class="line">        action();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Action <span class="title">GetFun</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">delegate</span> ()</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;匿名函数常用作返回值&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">// 匿名函数给委托赋值</span></span><br><span class="line">        Action a = <span class="built_in">delegate</span> ()</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;匿名函数逻辑&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        Test t = <span class="keyword">new</span> Test();</span><br><span class="line">        t.Fun1(a); </span><br><span class="line">        t.GetFun()();</span><br><span class="line">        Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt; b = <span class="built_in">delegate</span> (<span class="built_in">int</span> a)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;匿名函数的返回值直接返回就行&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;委托基本概念&quot;&gt;&lt;a href=&quot;#委托基本概念&quot; class=&quot;headerlink&quot; title=&quot;委托基本概念&quot;&gt;&lt;/a&gt;委托基本概念&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：委托是&lt;strong&gt;类型安全的函数指针&lt;/strong</summary>
      
    
    
    
    <category term="编程语言" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Csharp" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Csharp/"/>
    
    
    <category term="编程语言" scheme="http://example.com/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Csharp" scheme="http://example.com/tags/Csharp/"/>
    
  </entry>
  
  <entry>
    <title>3.Unity随机数和UnityAction委托</title>
    <link href="http://example.com/2025/02/27/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%85%A5%E9%97%A8/unity%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/3.Unity%E9%9A%8F%E6%9C%BA%E6%95%B0%E5%92%8CUnityAction%E5%A7%94%E6%89%98/"/>
    <id>http://example.com/2025/02/27/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%85%A5%E9%97%A8/unity%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/3.Unity%E9%9A%8F%E6%9C%BA%E6%95%B0%E5%92%8CUnityAction%E5%A7%94%E6%89%98/</id>
    <published>2025-02-27T13:44:46.000Z</published>
    <updated>2025-02-28T07:30:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="unity当中的随机数用法"><a href="#unity当中的随机数用法" class="headerlink" title="unity当中的随机数用法"></a>unity当中的随机数用法</h1><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> randomNum = Random.Range(<span class="number">0</span>, <span class="number">100</span>); <span class="comment">// [0, 100)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// float重载，规则是左右都包含</span></span><br><span class="line"><span class="built_in">float</span> randomNumF = Random.Range(<span class="number">1.1f</span>, <span class="number">99.9f</span>); <span class="comment">// [1.1~99.9f]</span></span><br></pre></td></tr></table></figure><h1 id="CSharp中的随机数"><a href="#CSharp中的随机数" class="headerlink" title="CSharp中的随机数"></a>CSharp中的随机数</h1><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 左包含，右不包含</span></span><br><span class="line">System.Random random = <span class="keyword">new</span> System.Random();</span><br><span class="line">random.Next(<span class="number">0</span>, <span class="number">100</span>);    <span class="comment">// [0, 100)</span></span><br></pre></td></tr></table></figure><h1 id="unity的委托"><a href="#unity的委托" class="headerlink" title="unity的委托"></a>unity的委托</h1><p>要引用<code>using UnityEngine.Events;</code>命名空间</p><ul><li>无参无返回的委托</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UnityAction uac = () =&gt;</span><br><span class="line">&#123;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>string作为参数无返回值的委托</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UnityAction&lt;<span class="built_in">string</span>&gt; uac1 = (s) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="CSharp中的委托"><a href="#CSharp中的委托" class="headerlink" title="CSharp中的委托"></a>CSharp中的委托</h1><ul><li>无参无返回的委托</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.Action ac = () =&gt;</span><br><span class="line">&#123;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>int和float作为参数无返回值的委托</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.Action&lt;<span class="built_in">int</span>, <span class="built_in">float</span>&gt; ac2 = (i, f) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>无参int返回值的委托</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.Func&lt;<span class="built_in">int</span>&gt; fun1 = () =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>int作为参数string作为返回值的委托</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.Func&lt;<span class="built_in">int</span>, <span class="built_in">string</span>&gt; fun2 = (i) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;unity当中的随机数用法&quot;&gt;&lt;a href=&quot;#unity当中的随机数用法&quot; class=&quot;headerlink&quot; title=&quot;unity当中的随机数用法&quot;&gt;&lt;/a&gt;unity当中的随机数用法&lt;/h1&gt;&lt;figure class=&quot;highlight cs&quot;&gt;</summary>
      
    
    
    
    <category term="游戏引擎" scheme="http://example.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/"/>
    
    <category term="unity" scheme="http://example.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/"/>
    
    <category term="unity入门" scheme="http://example.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%85%A5%E9%97%A8/"/>
    
    <category term="unity入门实践项目" scheme="http://example.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%85%A5%E9%97%A8/unity%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="游戏引擎" scheme="http://example.com/tags/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/"/>
    
    <category term="unity" scheme="http://example.com/tags/unity/"/>
    
    <category term="unity入门" scheme="http://example.com/tags/unity%E5%85%A5%E9%97%A8/"/>
    
    <category term="unity入门实践项目" scheme="http://example.com/tags/unity%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>2.鼠标的隐藏锁定图片</title>
    <link href="http://example.com/2025/02/27/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%85%A5%E9%97%A8/unity%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/2.Cursor%E9%BC%A0%E6%A0%87%E7%9A%84%E9%9A%90%E8%97%8F%E9%94%81%E5%AE%9A%E5%9B%BE%E7%89%87/"/>
    <id>http://example.com/2025/02/27/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%85%A5%E9%97%A8/unity%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/2.Cursor%E9%BC%A0%E6%A0%87%E7%9A%84%E9%9A%90%E8%97%8F%E9%94%81%E5%AE%9A%E5%9B%BE%E7%89%87/</id>
    <published>2025-02-27T13:35:15.000Z</published>
    <updated>2025-02-28T07:30:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Cursor-visible静态变量-设置鼠标显隐"><a href="#Cursor-visible静态变量-设置鼠标显隐" class="headerlink" title="Cursor.visible静态变量 设置鼠标显隐"></a>Cursor.visible静态变量 设置鼠标显隐</h1><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 隐藏鼠标</span></span><br><span class="line">Cursor.visible = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><h1 id="Cursor-lockState静态变量-设置鼠标锁定状态"><a href="#Cursor-lockState静态变量-设置鼠标锁定状态" class="headerlink" title="Cursor.lockState静态变量 设置鼠标锁定状态"></a>Cursor.lockState静态变量 设置鼠标锁定状态</h1><p>确定硬件指针是否锁定到视图的中心、受限于窗口或者根本不受限制。</p><ul><li>None: 不锁定鼠标</li><li>Locked: 锁定鼠标。<strong>鼠标会被限制在屏幕的中心点，不仅会被锁定，还会被隐藏</strong>。可以通过按下ESC键摆脱编辑模式下的锁定。要是回到Game窗口点击鼠标会被再次锁定隐藏。</li><li>Confined: <strong>限制鼠标在Game窗口范围内</strong>。可以通过按下ESC键摆脱编辑模式下的限制。要是回到Game窗口点击鼠标会被再次限制。</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cursor.lockState = CursorLockMode.Confined;</span><br></pre></td></tr></table></figure><h1 id="Cursor-SetCursor静态方法-设置鼠标图片"><a href="#Cursor-SetCursor静态方法-设置鼠标图片" class="headerlink" title="Cursor.SetCursor静态方法 设置鼠标图片"></a>Cursor.SetCursor静态方法 设置鼠标图片</h1><p>将鼠标光标设置为给定纹理。<br>参数一：光标图片<br>参数二：偏移位置，相对图片左上角<br>参数三：平台支持的光标模式（硬件或软件）（一般选CursorMode.Auto）</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Texture2D cursorTexture2D;</span><br><span class="line"></span><br><span class="line">Cursor.SetCursor(cursorTexture2D, Vector2.zero, CursorMode.Auto);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Cursor-visible静态变量-设置鼠标显隐&quot;&gt;&lt;a href=&quot;#Cursor-visible静态变量-设置鼠标显隐&quot; class=&quot;headerlink&quot; title=&quot;Cursor.visible静态变量 设置鼠标显隐&quot;&gt;&lt;/a&gt;Cursor.visi</summary>
      
    
    
    
    <category term="游戏引擎" scheme="http://example.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/"/>
    
    <category term="unity" scheme="http://example.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/"/>
    
    <category term="unity入门" scheme="http://example.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%85%A5%E9%97%A8/"/>
    
    <category term="unity入门实践项目" scheme="http://example.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%85%A5%E9%97%A8/unity%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="游戏引擎" scheme="http://example.com/tags/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/"/>
    
    <category term="unity" scheme="http://example.com/tags/unity/"/>
    
    <category term="unity入门" scheme="http://example.com/tags/unity%E5%85%A5%E9%97%A8/"/>
    
    <category term="unity入门实践项目" scheme="http://example.com/tags/unity%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>1.场景切换和游戏退出</title>
    <link href="http://example.com/2025/02/27/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%85%A5%E9%97%A8/unity%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/1.%E5%9C%BA%E6%99%AF%E5%88%87%E6%8D%A2%E5%92%8C%E6%B8%B8%E6%88%8F%E9%80%80%E5%87%BA/"/>
    <id>http://example.com/2025/02/27/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%85%A5%E9%97%A8/unity%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/1.%E5%9C%BA%E6%99%AF%E5%88%87%E6%8D%A2%E5%92%8C%E6%B8%B8%E6%88%8F%E9%80%80%E5%87%BA/</id>
    <published>2025-02-27T13:28:07.000Z</published>
    <updated>2025-02-28T07:30:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="场景切换"><a href="#场景切换" class="headerlink" title="场景切换"></a>场景切换</h1><p>按照 Build Settings 中的名称或索引加载场景。要引入<code>using UnityEngine.SceneManagement;</code>命名空间。<br>直接写代码切换场景可能会报错。注意: <strong>切换必须要将场景拖到Unity 中的file-BuildSetting的Scene列表中</strong><br>然后可用用代码来切换<br><img src="/1.%E5%9C%BA%E6%99%AF%E5%88%87%E6%8D%A2%E5%92%8C%E6%B8%B8%E6%88%8F%E9%80%80%E5%87%BA/file-20250227213144486.png"></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ScenneManager.Load(<span class="string">&quot;scenename&quot;</span>);</span><br></pre></td></tr></table></figure><h1 id="退出游戏"><a href="#退出游戏" class="headerlink" title="退出游戏"></a>退出游戏</h1><p>退出播放器应用程序。执行这句代码就会退出游戏。但是在编辑模式下没有作用，一定是发布游戏过后才有用。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 退出游戏</span></span><br><span class="line">Application.Quit();</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;场景切换&quot;&gt;&lt;a href=&quot;#场景切换&quot; class=&quot;headerlink&quot; title=&quot;场景切换&quot;&gt;&lt;/a&gt;场景切换&lt;/h1&gt;&lt;p&gt;按照 Build Settings 中的名称或索引加载场景。要引入&lt;code&gt;using UnityEngine.Scene</summary>
      
    
    
    
    <category term="游戏引擎" scheme="http://example.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/"/>
    
    <category term="unity" scheme="http://example.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/"/>
    
    <category term="unity入门" scheme="http://example.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%85%A5%E9%97%A8/"/>
    
    <category term="unity入门实践项目" scheme="http://example.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%85%A5%E9%97%A8/unity%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="游戏引擎" scheme="http://example.com/tags/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/"/>
    
    <category term="unity" scheme="http://example.com/tags/unity/"/>
    
    <category term="unity入门" scheme="http://example.com/tags/unity%E5%85%A5%E9%97%A8/"/>
    
    <category term="unity入门实践项目" scheme="http://example.com/tags/unity%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>12.自定义控件拼面板</title>
    <link href="http://example.com/2025/02/27/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/12.%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%E6%8B%BC%E9%9D%A2%E6%9D%BF/"/>
    <id>http://example.com/2025/02/27/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/12.%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%E6%8B%BC%E9%9D%A2%E6%9D%BF/</id>
    <published>2025-02-27T09:11:12.000Z</published>
    <updated>2025-02-28T07:30:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>先拼面板<br><img src="/12.%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%E6%8B%BC%E9%9D%A2%E6%9D%BF/file-20250227171203497.png"></p><h1 id="TestBeginPanel-cs"><a href="#TestBeginPanel-cs" class="headerlink" title="TestBeginPanel.cs"></a>TestBeginPanel.cs</h1><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BeginPanel</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> CustomGUIButton btnBegin;</span><br><span class="line">    <span class="keyword">public</span> CustomGUIButton btnEnd;</span><br><span class="line">    <span class="keyword">public</span> CustomGUIButton btnQuit;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        btnBegin.clickEvent += () =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;Begin&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        btnEnd.clickEvent += () =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;End&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        btnQuit.clickEvent += () =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.gameObject.SetActive(<span class="literal">false</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;先拼面板&lt;br&gt;&lt;img src=&quot;/12.%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%E6%8B%BC%E9%9D%A2%E6%9D%BF/file-20250227171203497.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;T</summary>
      
    
    
    
    <category term="UI系统" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="GUI" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/GUI/"/>
    
    <category term="GUI实践项目" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="UI系统" scheme="http://example.com/tags/UI%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="GUI" scheme="http://example.com/tags/GUI/"/>
    
    <category term="GUI实践项目" scheme="http://example.com/tags/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>11.自定义图片绘制</title>
    <link href="http://example.com/2025/02/27/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/11.%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9B%BE%E7%89%87%E7%BB%98%E5%88%B6/"/>
    <id>http://example.com/2025/02/27/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/11.%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9B%BE%E7%89%87%E7%BB%98%E5%88%B6/</id>
    <published>2025-02-27T09:01:50.000Z</published>
    <updated>2025-02-28T07:30:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CustomGUITexture-cs"><a href="#CustomGUITexture-cs" class="headerlink" title="CustomGUITexture.cs"></a>CustomGUITexture.cs</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomGUITexture</span> : <span class="title">CustomGUIControl</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 方便外部缩放模式调整</span></span><br><span class="line">    <span class="keyword">public</span> ScaleMode mode = ScaleMode.StretchToFill;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DrawIsOff</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        GUI.DrawTexture(guiPos.Pos, guiContent.image, mode);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DrawIsOn</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        GUI.DrawTexture(guiPos.Pos, guiContent.image, mode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CustomGUITexture-cs&quot;&gt;&lt;a href=&quot;#CustomGUITexture-cs&quot; class=&quot;headerlink&quot; title=&quot;CustomGUITexture.cs&quot;&gt;&lt;/a&gt;CustomGUITexture.cs&lt;/h1&gt;&lt;figu</summary>
      
    
    
    
    <category term="UI系统" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="GUI" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/GUI/"/>
    
    <category term="GUI实践项目" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="UI系统" scheme="http://example.com/tags/UI%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="GUI" scheme="http://example.com/tags/GUI/"/>
    
    <category term="GUI实践项目" scheme="http://example.com/tags/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>10.自定义输入框和拖动条</title>
    <link href="http://example.com/2025/02/27/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/10.%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BE%93%E5%85%A5%E6%A1%86%E5%92%8C%E6%8B%96%E5%8A%A8%E6%9D%A1/"/>
    <id>http://example.com/2025/02/27/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/10.%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BE%93%E5%85%A5%E6%A1%86%E5%92%8C%E6%8B%96%E5%8A%A8%E6%9D%A1/</id>
    <published>2025-02-27T08:49:14.000Z</published>
    <updated>2025-02-28T07:30:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CustomGUIInput-cs"><a href="#CustomGUIInput-cs" class="headerlink" title="CustomGUIInput.cs"></a>CustomGUIInput.cs</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomGUIInput</span> : <span class="title">CustomGUIControl</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 当输入框变化时的事件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> UnityAction&lt;<span class="built_in">string</span>&gt; changeText;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> oldStr = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DrawIsOff</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        guiContent.text = GUI.TextField(guiPos.Pos, guiContent.text);</span><br><span class="line">        <span class="comment">// 当输入框变化时调用的委托函数</span></span><br><span class="line">        <span class="keyword">if</span> (oldStr != guiContent.text)</span><br><span class="line">        &#123;</span><br><span class="line">            changeText?.Invoke(guiContent.text);</span><br><span class="line">            oldStr = guiContent.text;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DrawIsOn</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        guiContent.text = GUI.TextField(guiPos.Pos, guiContent.text, style);</span><br><span class="line">        <span class="keyword">if</span> (oldStr != guiContent.text)</span><br><span class="line">        &#123;</span><br><span class="line">            changeText?.Invoke(guiContent.text);</span><br><span class="line">            oldStr = guiContent.text;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="CustomGUISlide-cs"><a href="#CustomGUISlide-cs" class="headerlink" title="CustomGUISlide.cs"></a>CustomGUISlide.cs</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> E_Slider_Type</span><br><span class="line">&#123;</span><br><span class="line">    Horizontal,</span><br><span class="line">    Vertical,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomGUISlide</span> : <span class="title">CustomGUIControl</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> minValue = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> maxValue = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> nowValue = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> E_Slider_Type sliderType = E_Slider_Type.Horizontal;</span><br><span class="line">    <span class="comment">// 默认的style是条的, 这里还需要滑块的style</span></span><br><span class="line">    <span class="keyword">public</span> GUIStyle styleThumb;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> UnityAction&lt;<span class="built_in">float</span>&gt; changeValue;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> oldValu</span><br><span class="line">    </span><br><span class="line">    e;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DrawIsOff</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span> (sliderType)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> E_Slider_Type.Horizontal:</span><br><span class="line">                nowValue = GUI.HorizontalSlider(guiPos.Pos, nowValue, minValue, maxValue);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> E_Slider_Type.Vertical:</span><br><span class="line">                nowValue = GUI.VerticalSlider(guiPos.Pos, nowValue, minValue, maxValue);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (oldValue != nowValue)</span><br><span class="line">        &#123;</span><br><span class="line">            changeValue?.Invoke(nowValue);</span><br><span class="line">            oldValue = nowValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DrawIsOn</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span> (sliderType)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> E_Slider_Type.Horizontal:</span><br><span class="line">                nowValue = GUI.HorizontalSlider(guiPos.Pos, nowValue, minValue, maxValue, style, styleThumb);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> E_Slider_Type.Vertical:</span><br><span class="line">                nowValue = GUI.VerticalSlider(guiPos.Pos, nowValue, minValue, maxValue, style, styleThumb);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (oldValue != nowValue)</span><br><span class="line">        &#123;</span><br><span class="line">            changeValue?.Invoke(nowValue);</span><br><span class="line">            oldValue = nowValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CustomGUIInput-cs&quot;&gt;&lt;a href=&quot;#CustomGUIInput-cs&quot; class=&quot;headerlink&quot; title=&quot;CustomGUIInput.cs&quot;&gt;&lt;/a&gt;CustomGUIInput.cs&lt;/h1&gt;&lt;figure class</summary>
      
    
    
    
    <category term="UI系统" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="GUI" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/GUI/"/>
    
    <category term="GUI实践项目" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="UI系统" scheme="http://example.com/tags/UI%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="GUI" scheme="http://example.com/tags/GUI/"/>
    
    <category term="GUI实践项目" scheme="http://example.com/tags/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>9.自定义单选框</title>
    <link href="http://example.com/2025/02/27/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/9.%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8D%95%E9%80%89%E6%A1%86/"/>
    <id>http://example.com/2025/02/27/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/9.%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8D%95%E9%80%89%E6%A1%86/</id>
    <published>2025-02-27T07:47:17.000Z</published>
    <updated>2025-02-28T07:30:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>回顾闭包<br><strong>当匿名函数捕获了外部变量时，C# 编译器会自动生成一个隐藏的类（称为“闭包类”），将捕获的变量“打包”到这个类的实例中。这个实例的生命周期会延长，使得闭包可以在后续继续访问这些变量。</strong></p><p><strong>示例 1：基本闭包</strong></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Func&lt;<span class="built_in">int</span>&gt; <span class="title">CreateCounter</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> () =&gt; ++count; <span class="comment">// 闭包捕获了外部变量 count</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> counter = CreateCounter();</span><br><span class="line">Console.WriteLine(counter()); <span class="comment">// 输出 1</span></span><br><span class="line">Console.WriteLine(counter()); <span class="comment">// 输出 2（说明闭包修改并保留了 count 的状态）</span></span><br></pre></td></tr></table></figure><ul><li><strong>现象</strong>：<code>count</code> 本应在 <code>CreateCounter</code> 方法执行完毕后被销毁，但闭包保留了它的状态。</li><li><strong>原理</strong>：编译器生成一个类，将 <code>count</code> 作为该类的字段存储，闭包通过这个类的实例访问 <code>count</code>。</li></ul><p><strong>示例 2：循环中的闭包陷阱</strong></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> actions = <span class="keyword">new</span> List&lt;Action&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    actions.Add(() =&gt; Console.WriteLine(i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> action <span class="keyword">in</span> actions)</span><br><span class="line">&#123;</span><br><span class="line">    action(); <span class="comment">// 输出 3, 3, 3（而非预期的 0, 1, 2）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>问题原因</strong>：所有闭包共享同一个变量 <code>i</code>（在循环结束后，<code>i</code> 的值为 3）。</li><li><strong>解决方案</strong>：在循环内部创建临时变量，让闭包捕获独立的值：</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> current = i; <span class="comment">// 每次循环新建一个临时变量</span></span><br><span class="line">    actions.Add(() =&gt; Console.WriteLine(current)); <span class="comment">// 输出 0, 1, 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="CustomGUIToggleGroup-cs"><a href="#CustomGUIToggleGroup-cs" class="headerlink" title="CustomGUIToggleGroup.cs"></a>CustomGUIToggleGroup.cs</h1><p>创建自定义单选框，<strong>添加多选框数组，通过管理多选框实现单选框</strong>，在添加一个记录上一次为true的toggle</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomGUIToggleGroup</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">SerializeField</span>]</span><br><span class="line">    <span class="keyword">private</span> CustomGUIToggle[] _toggles;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CustomGUIToggle _frontTrueToggle；    <span class="comment">// 上一次为true的toggle</span></span><br><span class="line">    <span class="comment">// 注意只有游戏运行才能用</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; _toggles.Length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            CustomGUIToggle tmp = _toggles[i];</span><br><span class="line">            <span class="comment">// 为每个Toggle添加一个一旦其值为true时, 其它Toggle变为false的委托</span></span><br><span class="line">            <span class="comment">// Lambda函数捕获了外部变量（tmp）!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</span></span><br><span class="line">            tmp.changeEvent += (<span class="keyword">value</span>) =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">value</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; _toggles.Length; j++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (tmp != _toggles[j])    <span class="comment">// 只要不是自己</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            _toggles[j].isSel = <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 这里可以记录上一次为true的toggle</span></span><br><span class="line">                    _frontTrueToggle = tmp;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (_frontTrueToggle == tmp)    <span class="comment">// 如果是上一次为true的toggle</span></span><br><span class="line">                &#123;</span><br><span class="line">                    tmp.isSel = <span class="literal">true</span>;    <span class="comment">// 永远保持选中的状态</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;回顾闭包&lt;br&gt;&lt;strong&gt;当匿名函数捕获了外部变量时，C# 编译器会自动生成一个隐藏的类（称为“闭包类”），将捕获的变量“打包”到这个类的实例中。这个实例的生命周期会延长，使得闭包可以在后续继续访问这些变量。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：</summary>
      
    
    
    
    <category term="UI系统" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="GUI" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/GUI/"/>
    
    <category term="GUI实践项目" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="UI系统" scheme="http://example.com/tags/UI%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="GUI" scheme="http://example.com/tags/GUI/"/>
    
    <category term="GUI实践项目" scheme="http://example.com/tags/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>8.自定义多选框</title>
    <link href="http://example.com/2025/02/27/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/8.%E8%87%AA%E5%AE%9A%E4%B9%89%E5%A4%9A%E9%80%89%E6%A1%86/"/>
    <id>http://example.com/2025/02/27/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/8.%E8%87%AA%E5%AE%9A%E4%B9%89%E5%A4%9A%E9%80%89%E6%A1%86/</id>
    <published>2025-02-27T07:42:31.000Z</published>
    <updated>2025-02-28T07:30:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CustomGUIToggle-cs"><a href="#CustomGUIToggle-cs" class="headerlink" title="CustomGUIToggle.cs"></a>CustomGUIToggle.cs</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomGUIToggle</span> : <span class="title">CustomGUIControl</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 单选的那个bool</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> isSel;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">bool</span> oldSel;</span><br><span class="line">    <span class="comment">// 当选中时所要执行的事件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> UnityAction&lt;<span class="built_in">bool</span>&gt; changeEvent;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DrawIsOff</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        isSel = GUI.Toggle(guiPos.Pos, isSel, guiContent);</span><br><span class="line">        <span class="comment">// 防止一直true true true一直调用事件执行 </span></span><br><span class="line">        <span class="comment">// 只有当 true 和 false 发生变化的时候才去处理</span></span><br><span class="line">        <span class="keyword">if</span> (isSel != oldSel)</span><br><span class="line">        &#123;</span><br><span class="line">            changeEvent?.Invoke(isSel);</span><br><span class="line">            oldSel = isSel;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DrawIsOn</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        isSel = GUI.Toggle(guiPos.Pos, isSel, guiContent, style);</span><br><span class="line">        <span class="keyword">if</span> (isSel != oldSel)</span><br><span class="line">        &#123;</span><br><span class="line">            changeEvent?.Invoke(isSel);</span><br><span class="line">            oldSel = isSel;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CustomGUIToggle-cs&quot;&gt;&lt;a href=&quot;#CustomGUIToggle-cs&quot; class=&quot;headerlink&quot; title=&quot;CustomGUIToggle.cs&quot;&gt;&lt;/a&gt;CustomGUIToggle.cs&lt;/h1&gt;&lt;figure c</summary>
      
    
    
    
    <category term="UI系统" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="GUI" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/GUI/"/>
    
    <category term="GUI实践项目" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="UI系统" scheme="http://example.com/tags/UI%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="GUI" scheme="http://example.com/tags/GUI/"/>
    
    <category term="GUI实践项目" scheme="http://example.com/tags/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>7.自定义文本和按钮</title>
    <link href="http://example.com/2025/02/27/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/7.%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E6%9C%AC%E5%92%8C%E6%8C%89%E9%92%AE/"/>
    <id>http://example.com/2025/02/27/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/7.%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E6%9C%AC%E5%92%8C%E6%8C%89%E9%92%AE/</id>
    <published>2025-02-27T07:19:01.000Z</published>
    <updated>2025-02-28T07:30:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>创建自定义文本和按钮，将其脚本拖入到空物体上做成预制体</p><h1 id="CustomGUILabel-cs"><a href="#CustomGUILabel-cs" class="headerlink" title="CustomGUILabel.cs"></a>CustomGUILabel.cs</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomGUILabel</span> : <span class="title">CustomGUIControl</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DrawIsOff</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        GUI.Label(guiPos.Pos, guiContent);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DrawIsOn</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        GUI.Label(guiPos.Pos, guiContent, style);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="CustomGUIButton-cs"><a href="#CustomGUIButton-cs" class="headerlink" title="CustomGUIButton.cs"></a>CustomGUIButton.cs</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomGUIButton</span> : <span class="title">CustomGUIControl</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 提供给外部的按钮点击事件, 想要按钮点击后做啥往里加函数就行, Unity自带的事件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> UnityAction clickEvent;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DrawIsOff</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (GUI.Button(guiPos.Pos, guiContent))</span><br><span class="line">        &#123;</span><br><span class="line">            clickEvent?.Invoke();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DrawIsOn</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (GUI.Button(guiPos.Pos, guiContent, style))</span><br><span class="line">        &#123;</span><br><span class="line">            clickEvent?.Invoke();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;创建自定义文本和按钮，将其脚本拖入到空物体上做成预制体&lt;/p&gt;
&lt;h1 id=&quot;CustomGUILabel-cs&quot;&gt;&lt;a href=&quot;#CustomGUILabel-cs&quot; class=&quot;headerlink&quot; title=&quot;CustomGUILabel.cs&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="UI系统" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="GUI" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/GUI/"/>
    
    <category term="GUI实践项目" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="UI系统" scheme="http://example.com/tags/UI%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="GUI" scheme="http://example.com/tags/GUI/"/>
    
    <category term="GUI实践项目" scheme="http://example.com/tags/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>6.控件根对象</title>
    <link href="http://example.com/2025/02/27/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/6.%E6%8E%A7%E4%BB%B6%E6%A0%B9%E5%AF%B9%E8%B1%A1/"/>
    <id>http://example.com/2025/02/27/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/6.%E6%8E%A7%E4%BB%B6%E6%A0%B9%E5%AF%B9%E8%B1%A1/</id>
    <published>2025-02-27T07:06:16.000Z</published>
    <updated>2025-02-28T07:30:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解决两个问题"><a href="#解决两个问题" class="headerlink" title="解决两个问题"></a>解决两个问题</h1><ol><li><strong>所见即所得</strong>（编辑模式下能看到GUI）</li><li><strong>可以控制控件的绘制顺序</strong></li></ol><p><strong>创建所有自定义GUI的根部类,添加ExecuteAlways特性</strong><br>在类名添加<code>ExecuteAlways</code>特性，可以让编辑模式下指定代码运行。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">ExecuteAlways</span>]</span><br><span class="line"><span class="comment">//所有自定义GUI的根部类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomGUIRoot</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在Start方法中获取所有子对象的控件父类脚本</strong></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//通过每一次绘制之前 得到所有子对象控件的 父类脚本</span></span><br><span class="line">    allControls = <span class="keyword">this</span>.GetComponentsInChildren&lt;CustomGUIControl&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>OnGUI</code>方法中按照得到的顺序来绘制每个控件，用控件父类中定义好的绘制方法</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在这同一绘制子对象控件的内容</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnGUI</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//编辑状态下 才会一直执行</span></span><br><span class="line">    <span class="comment">//if (!Application.isPlaying)</span></span><br><span class="line">    <span class="comment">//&#123;</span></span><br><span class="line">    <span class="comment">//这句代码 浪费性能 因为每次 gui都会来获取所有的 控件对应的脚本 所以要在编辑状态下才会一直执行</span></span><br><span class="line">    <span class="comment">//在编辑状态下运行是因为想一直看到控件的移动</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//最后没开启是因为只得了一次子对象的CustomGUIControl 就算子对象被隐藏了也不会重写得CustomGUIControl 会有问题</span></span><br><span class="line">    allControls = <span class="keyword">this</span>.GetComponentsInChildren&lt;CustomGUIControl&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历每一个控件 让其 执行绘制</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; allControls.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        allControls[i].GUIDraw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="CustomGUIRoot-cs"><a href="#CustomGUIRoot-cs" class="headerlink" title="CustomGUIRoot.cs"></a>CustomGUIRoot.cs</h1><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">ExecuteAlways</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomGUIRoot</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> CustomGUIControl[] _customGUIControls;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _customGUIControls = <span class="keyword">this</span>.GetComponentsInChildren&lt;CustomGUIControl&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 统一控制所有子对象挂载的控件的 绘制</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnGUI</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!Application.isPlaying)    <span class="comment">// 这里的条件判断主要是为了性能, 实际运行可能会出错</span></span><br><span class="line">        &#123;</span><br><span class="line">            _customGUIControls = <span class="keyword">this</span>.GetComponentsInChildren&lt;CustomGUIControl&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; _customGUIControls.Length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            _customGUIControls[i].GUIDraw();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;解决两个问题&quot;&gt;&lt;a href=&quot;#解决两个问题&quot; class=&quot;headerlink&quot; title=&quot;解决两个问题&quot;&gt;&lt;/a&gt;解决两个问题&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;所见即所得&lt;/strong&gt;（编辑模式下能看到GUI）&lt;/li&gt;
&lt;li&gt;&lt;st</summary>
      
    
    
    
    <category term="UI系统" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="GUI" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/GUI/"/>
    
    <category term="GUI实践项目" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="UI系统" scheme="http://example.com/tags/UI%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="GUI" scheme="http://example.com/tags/GUI/"/>
    
    <category term="GUI实践项目" scheme="http://example.com/tags/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>5.控件父类</title>
    <link href="http://example.com/2025/02/27/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/5.%E6%8E%A7%E4%BB%B6%E7%88%B6%E7%B1%BB/"/>
    <id>http://example.com/2025/02/27/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/5.%E6%8E%A7%E4%BB%B6%E7%88%B6%E7%B1%BB/</id>
    <published>2025-02-27T02:19:18.000Z</published>
    <updated>2025-02-28T07:30:17.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>这是所有控件的公共基类</strong><br><strong>自定义样式是否启用</strong>的开关枚举<br>定义了一个枚举类型 <code>E_Style_onoff</code> 用于表示自定义样式是否启用。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> E_Style_onoff</span><br><span class="line">&#123;</span><br><span class="line">    On,</span><br><span class="line">    Off,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义控件父类是一个抽象类，继承自<code>MonoBehaviour</code>。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">CustomGUIControl</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>提取控件的共同表现</strong><br>位置信息<br>显示内容信息<br>自定义样式以及自定义样式是否启用的开关。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 位置信息</span></span><br><span class="line"><span class="keyword">public</span> CustomGUIPos guiPos;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示内容信息</span></span><br><span class="line"><span class="keyword">public</span> GUIContent content;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义样式</span></span><br><span class="line"><span class="keyword">public</span> GUIStyle style;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义样式是否启用的开关</span></span><br><span class="line"><span class="keyword">public</span> E_Style_OnOff styleOnOrOff = E_Style_OnOff.Off;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>根据是否使用style写两个抽象方法</strong></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DrawGUI</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (styleOnOrOff)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> E_Style_OnOff.On:</span><br><span class="line">            StyleOnDraw();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> E_Style_OnOff.Off:</span><br><span class="line">            StyleOffDraw();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 自定义样式开启时的绘制抽象方法</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">StyleOnDraw</span>()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 自定义样式关闭时的绘制抽象方法</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">StyleOffDraw</span>()</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="CustomGUIControl-cs"><a href="#CustomGUIControl-cs" class="headerlink" title="CustomGUIControl.cs"></a>CustomGUIControl.cs</h1><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> E_Style_onoff</span><br><span class="line">&#123;</span><br><span class="line">    On,</span><br><span class="line">    Off,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">CustomGUIControl</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// GUI控件公共部分    !!!!!!</span></span><br><span class="line">    <span class="comment">// 位置信息</span></span><br><span class="line">    <span class="keyword">public</span> CustomGUIPos guiPos;</span><br><span class="line">    <span class="comment">// 显示内容信息</span></span><br><span class="line">    <span class="keyword">public</span> GUIContent guiContent;</span><br><span class="line">    <span class="comment">// 自定义样式</span></span><br><span class="line">    <span class="keyword">public</span> GUIStyle style;</span><br><span class="line">    <span class="comment">// 自定义样式开关</span></span><br><span class="line">    <span class="keyword">public</span> E_Style_onoff styleIsOn = E_Style_onoff.Off;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提供公共的控件绘制 </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GUIDraw</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span> (styleIsOn)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> E_Style_onoff.On:</span><br><span class="line">                <span class="comment">// 样式开启时使用的绘制函数</span></span><br><span class="line">                DrawIsOn();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> E_Style_onoff.Off:</span><br><span class="line">                DrawIsOff();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">DrawIsOn</span>()</span>;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">DrawIsOff</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;这是所有控件的公共基类&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;自定义样式是否启用&lt;/strong&gt;的开关枚举&lt;br&gt;定义了一个枚举类型 &lt;code&gt;E_Style_onoff&lt;/code&gt; 用于表示自定义样式是否启用。&lt;/p&gt;
&lt;figure class=</summary>
      
    
    
    
    <category term="UI系统" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="GUI" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/GUI/"/>
    
    <category term="GUI实践项目" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="UI系统" scheme="http://example.com/tags/UI%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="GUI" scheme="http://example.com/tags/GUI/"/>
    
    <category term="GUI实践项目" scheme="http://example.com/tags/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>4.控件位置信息类</title>
    <link href="http://example.com/2025/02/27/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/4.%E6%8E%A7%E4%BB%B6%E4%BD%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E7%B1%BB/"/>
    <id>http://example.com/2025/02/27/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/4.%E6%8E%A7%E4%BB%B6%E4%BD%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E7%B1%BB/</id>
    <published>2025-02-27T01:54:24.000Z</published>
    <updated>2025-02-28T07:30:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CustomGUIPos-cs"><a href="#CustomGUIPos-cs" class="headerlink" title="CustomGUIPos.cs"></a><strong>CustomGUIPos.cs</strong></h1><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对齐方式九宫格枚举定义</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> E_Alignment_Type</span><br><span class="line">&#123;</span><br><span class="line">    Up,</span><br><span class="line">    Down,</span><br><span class="line">    Left,</span><br><span class="line">    Right,</span><br><span class="line">    Center,</span><br><span class="line">    Left_Up,</span><br><span class="line">    Left_Down,</span><br><span class="line">    Right_Up,</span><br><span class="line">    Right_Down,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 自定义类需要再Inspector面板显示</span></span><br><span class="line">[<span class="meta">System.Serializable</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomGUIPos</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 控件位置</span></span><br><span class="line">    <span class="keyword">private</span> Rect _pos = <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">101</span>, <span class="number">100</span>);</span><br><span class="line">    <span class="comment">// 屏幕九宫格对齐方式</span></span><br><span class="line">    <span class="keyword">public</span> E_Alignment_Type Screen_Alignment_Type = E_Alignment_Type.Center;</span><br><span class="line">    <span class="comment">// 控件中心点对齐方式</span></span><br><span class="line">    <span class="keyword">public</span> E_Alignment_Type Constrol_Center_Alignment_Type = E_Alignment_Type.Center;</span><br><span class="line">    <span class="comment">// 偏移位置</span></span><br><span class="line">    <span class="keyword">public</span> Vector2 dPos;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 控件宽高 </span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> Width = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> Height = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算后的控件位置</span></span><br><span class="line">    <span class="keyword">public</span> Rect Pos</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            CalcCenterPos();</span><br><span class="line">            CalcPos();</span><br><span class="line">            _pos.width = Width;</span><br><span class="line">            _pos.height = Height;</span><br><span class="line">            <span class="keyword">return</span> _pos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算最后的位置</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">CalcPos</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span> (Screen_Alignment_Type)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> E_Alignment_Type.Up:</span><br><span class="line">                _pos.x = Screen.width / <span class="number">2</span> + _centerPos.x + dPos.x;</span><br><span class="line">                _pos.y = Screen.height * <span class="number">0</span> + _centerPos.y + dPos.y;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> E_Alignment_Type.Down:</span><br><span class="line">                _pos.x = Screen.width / <span class="number">2</span> + _centerPos.x + dPos.x;</span><br><span class="line">                _pos.y = Screen.height + _centerPos.y + dPos.y;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> E_Alignment_Type.Left:</span><br><span class="line">                _pos.x = Screen.width * <span class="number">0</span> + _centerPos.x + dPos.x;</span><br><span class="line">                _pos.y = Screen.height / <span class="number">2</span> + _centerPos.y + dPos.y;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> E_Alignment_Type.Right:</span><br><span class="line">                _pos.x = Screen.width + _centerPos.x + dPos.x;</span><br><span class="line">                _pos.y = Screen.height / <span class="number">2</span> + _centerPos.y + dPos.y;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> E_Alignment_Type.Center:</span><br><span class="line">                _pos.x = Screen.width / <span class="number">2</span> + _centerPos.x + dPos.x;</span><br><span class="line">                _pos.y = Screen.height / <span class="number">2</span> + _centerPos.y + dPos.y;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> E_Alignment_Type.Left_Up:</span><br><span class="line">                _pos.x = Screen.width * <span class="number">0</span> + _centerPos.x + dPos.x;</span><br><span class="line">                _pos.y = Screen.height * <span class="number">0</span> + _centerPos.y + dPos.y;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> E_Alignment_Type.Left_Down:</span><br><span class="line">                _pos.x = Screen.width * <span class="number">0</span> + _centerPos.x + dPos.x;</span><br><span class="line">                _pos.y = Screen.height + _centerPos.y + dPos.y;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> E_Alignment_Type.Right_Up:</span><br><span class="line">                _pos.x = Screen.width + _centerPos.x + dPos.x;</span><br><span class="line">                _pos.y = Screen.height * <span class="number">0</span> + _centerPos.y + dPos.y;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> E_Alignment_Type.Right_Down:</span><br><span class="line">                _pos.x = Screen.width + _centerPos.x + dPos.x;</span><br><span class="line">                _pos.y = Screen.height + _centerPos.y + dPos.y;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 控件中心点位置</span></span><br><span class="line">    <span class="keyword">private</span> Vector2 _centerPos;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">CalcCenterPos</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span> (Constrol_Center_Alignment_Type)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> E_Alignment_Type.Up:</span><br><span class="line">                _centerPos.x = -Width / <span class="number">2</span>;</span><br><span class="line">                _centerPos.y = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> E_Alignment_Type.Down:</span><br><span class="line">                _centerPos.x = -Width / <span class="number">2</span>;</span><br><span class="line">                _centerPos.y = -Height;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> E_Alignment_Type.Left:</span><br><span class="line">                _centerPos.x = <span class="number">0</span>;</span><br><span class="line">                _centerPos.y = -Height / <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> E_Alignment_Type.Right:</span><br><span class="line">                _centerPos.x = -Width;</span><br><span class="line">                _centerPos.y = -Height / <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> E_Alignment_Type.Center:</span><br><span class="line">                _centerPos.x = -Width / <span class="number">2</span>;</span><br><span class="line">                _centerPos.y = -Height / <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> E_Alignment_Type.Left_Up:</span><br><span class="line">                _centerPos.x = <span class="number">0</span>;</span><br><span class="line">                _centerPos.y = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> E_Alignment_Type.Left_Down:</span><br><span class="line">                _centerPos.x = <span class="number">0</span>;</span><br><span class="line">                _centerPos.y = -Height;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> E_Alignment_Type.Right_Up:</span><br><span class="line">                _centerPos.x = -Width;</span><br><span class="line">                _centerPos.y = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> E_Alignment_Type.Right_Down:</span><br><span class="line">                _centerPos.x = -Width;</span><br><span class="line">                _centerPos.y = -Height;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CustomGUIPos-cs&quot;&gt;&lt;a href=&quot;#CustomGUIPos-cs&quot; class=&quot;headerlink&quot; title=&quot;CustomGUIPos.cs&quot;&gt;&lt;/a&gt;&lt;strong&gt;CustomGUIPos.cs&lt;/strong&gt;&lt;/h1&gt;&lt;fig</summary>
      
    
    
    
    <category term="UI系统" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="GUI" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/GUI/"/>
    
    <category term="GUI实践项目" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="UI系统" scheme="http://example.com/tags/UI%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="GUI" scheme="http://example.com/tags/GUI/"/>
    
    <category term="GUI实践项目" scheme="http://example.com/tags/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>3.九宫格概念</title>
    <link href="http://example.com/2025/02/27/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/3.%E4%B9%9D%E5%AE%AB%E6%A0%BC%E6%A6%82%E5%BF%B5/"/>
    <id>http://example.com/2025/02/27/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/3.%E4%B9%9D%E5%AE%AB%E6%A0%BC%E6%A6%82%E5%BF%B5/</id>
    <published>2025-02-27T01:41:15.000Z</published>
    <updated>2025-02-28T07:30:17.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/3.%E4%B9%9D%E5%AE%AB%E6%A0%BC%E6%A6%82%E5%BF%B5/file-20250227094206604.png"><br>相对屏幕位置：红点的位置<br>中心点偏移位置：控件的九个点的位置<br><img src="/3.%E4%B9%9D%E5%AE%AB%E6%A0%BC%E6%A6%82%E5%BF%B5/file-20250227095239324.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/3.%E4%B9%9D%E5%AE%AB%E6%A0%BC%E6%A6%82%E5%BF%B5/file-20250227094206604.png&quot;&gt;&lt;br&gt;相对屏幕位置：红点的位置&lt;br&gt;中心点偏移位置：控件的九个点的位置&lt;br&gt;&lt;img src=</summary>
      
    
    
    
    <category term="UI系统" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="GUI" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/GUI/"/>
    
    <category term="GUI实践项目" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="UI系统" scheme="http://example.com/tags/UI%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="GUI" scheme="http://example.com/tags/GUI/"/>
    
    <category term="GUI实践项目" scheme="http://example.com/tags/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>2.需求分析</title>
    <link href="http://example.com/2025/02/27/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/2.%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/2025/02/27/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/2.%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/</id>
    <published>2025-02-27T01:35:44.000Z</published>
    <updated>2025-02-28T07:30:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用GUI制作出控件预制体，不需要运行时在OnGUI写逻辑才能看到UI<br><img src="/2.%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/file-20250227093553912.png"></p><p><img src="/2.%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/file-20250227093749569.png"></p><p><img src="/2.%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/file-20250227093843699.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用GUI制作出控件预制体，不需要运行时在OnGUI写逻辑才能看到UI&lt;br&gt;&lt;img src=&quot;/2.%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/file-20250227093553912.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2</summary>
      
    
    
    
    <category term="UI系统" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="GUI" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/GUI/"/>
    
    <category term="GUI实践项目" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="UI系统" scheme="http://example.com/tags/UI%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="GUI" scheme="http://example.com/tags/GUI/"/>
    
    <category term="GUI实践项目" scheme="http://example.com/tags/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>2.hexo源码上传到GitHub</title>
    <link href="http://example.com/2025/02/26/hexo/2.hexo%E6%BA%90%E7%A0%81%E4%B8%8A%E4%BC%A0%E5%88%B0GitHub/"/>
    <id>http://example.com/2025/02/26/hexo/2.hexo%E6%BA%90%E7%A0%81%E4%B8%8A%E4%BC%A0%E5%88%B0GitHub/</id>
    <published>2025-02-26T13:54:00.000Z</published>
    <updated>2025-02-28T07:30:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在你的github中创建一个新的分支用来保存源码"><a href="#在你的github中创建一个新的分支用来保存源码" class="headerlink" title="在你的github中创建一个新的分支用来保存源码"></a>在你的github中创建一个新的分支用来保存源码</h1><p>名字随便，这里我的是hexo</p><h1 id="git-clone-你的仓库"><a href="#git-clone-你的仓库" class="headerlink" title="git clone 你的仓库"></a>git clone 你的仓库</h1><h1 id="复制-git文件夹到你的博客目录"><a href="#复制-git文件夹到你的博客目录" class="headerlink" title="复制.git文件夹到你的博客目录"></a>复制<code>.git</code>文件夹到你的博客目录</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;Update&quot;</span><br><span class="line">git push origin hexo   </span><br></pre></td></tr></table></figure><p>参考链接：<br><a href="https://www.cnblogs.com/eidolonw/p/13066869.html">hexo源码上传到GitHub - choco莉特 - 博客园</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;在你的github中创建一个新的分支用来保存源码&quot;&gt;&lt;a href=&quot;#在你的github中创建一个新的分支用来保存源码&quot; class=&quot;headerlink&quot; title=&quot;在你的github中创建一个新的分支用来保存源码&quot;&gt;&lt;/a&gt;在你的github中创建一个</summary>
      
    
    
    
    <category term="hexo" scheme="http://example.com/categories/hexo/"/>
    
    
    <category term="hexo" scheme="http://example.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>1.编辑模式下让指定代码运行</title>
    <link href="http://example.com/2025/02/26/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/1.%E7%BC%96%E8%BE%91%E6%A8%A1%E5%BC%8F%E4%B8%8B%E8%AE%A9%E6%8C%87%E5%AE%9A%E4%BB%A3%E7%A0%81%E8%BF%90%E8%A1%8C/"/>
    <id>http://example.com/2025/02/26/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/1.%E7%BC%96%E8%BE%91%E6%A8%A1%E5%BC%8F%E4%B8%8B%E8%AE%A9%E6%8C%87%E5%AE%9A%E4%BB%A3%E7%A0%81%E8%BF%90%E8%A1%8C/</id>
    <published>2025-02-26T13:42:40.000Z</published>
    <updated>2025-02-28T07:30:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在类名上添加-ExecuteAlways-特性可以让指定代码在编辑模式下运行"><a href="#在类名上添加-ExecuteAlways-特性可以让指定代码在编辑模式下运行" class="headerlink" title="在类名上添加 [ExecuteAlways] 特性可以让指定代码在编辑模式下运行"></a>在类名上添加 <code>[ExecuteAlways]</code> 特性可以让指定代码在编辑模式下运行</h1><p>编辑模式下，缩放Game窗口大小每一帧相关也会执行</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在类名添加ExecuteAlways特性 可以让编辑模式下让指定代码运行</span></span><br><span class="line">[<span class="meta">ExecuteAlways</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Lesson01_</span>必备知识点_编辑模式下让指定代码运行 : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;对象初始化时调用（即使脚本未启用）。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnEnable</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;脚本启用或对象激活时调用（在Awake之后，若对象初始启用）。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;在首次Update前调用（仅一次，需脚本启用）。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">FixedUpdate</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;按固定时间间隔调用（物理计算阶段，可能一帧多次）。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnTriggerEnter</span>(<span class="params">Collider other</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;物理触发事件，在FixedUpdate之后、Update之前处理。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;每帧调用一次。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">LateUpdate</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;所有Update完成后调用。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnGUI</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;渲染GUI时调用，每帧可能多次（在LateUpdate之后）。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnDisable</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;脚本禁用或对象失活时调用。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnDestroy</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;对象销毁前调用。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;在类名上添加-ExecuteAlways-特性可以让指定代码在编辑模式下运行&quot;&gt;&lt;a href=&quot;#在类名上添加-ExecuteAlways-特性可以让指定代码在编辑模式下运行&quot; class=&quot;headerlink&quot; title=&quot;在类名上添加 [ExecuteA</summary>
      
    
    
    
    <category term="UI系统" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="GUI" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/GUI/"/>
    
    <category term="GUI实践项目" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="UI系统" scheme="http://example.com/tags/UI%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="GUI" scheme="http://example.com/tags/GUI/"/>
    
    <category term="GUI实践项目" scheme="http://example.com/tags/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>12.GUI总结</title>
    <link href="http://example.com/2025/02/26/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/12.GUI%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2025/02/26/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/12.GUI%E6%80%BB%E7%BB%93/</id>
    <published>2025-02-26T12:22:28.000Z</published>
    <updated>2025-02-28T07:30:17.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/12.GUI%E6%80%BB%E7%BB%93/file-20250226202233700.png"></p><p><img src="/12.GUI%E6%80%BB%E7%BB%93/file-20250226202256205.png"></p><p><img src="/12.GUI%E6%80%BB%E7%BB%93/file-20250226202304163.png"></p><p><img src="/12.GUI%E6%80%BB%E7%BB%93/file-20250226202336443.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/12.GUI%E6%80%BB%E7%BB%93/file-20250226202233700.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/12.GUI%E6%80%BB%E7%BB%93/file-20250226202256205.png&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="UI系统" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="GUI" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/GUI/"/>
    
    <category term="GUI基础知识" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="UI系统" scheme="http://example.com/tags/UI%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="GUI" scheme="http://example.com/tags/GUI/"/>
    
    <category term="GUI基础知识" scheme="http://example.com/tags/GUI%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>11.GUILayout自动布局</title>
    <link href="http://example.com/2025/02/26/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/11.GUILayout%E8%87%AA%E5%8A%A8%E5%B8%83%E5%B1%80/"/>
    <id>http://example.com/2025/02/26/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/11.GUILayout%E8%87%AA%E5%8A%A8%E5%B8%83%E5%B1%80/</id>
    <published>2025-02-26T12:13:57.000Z</published>
    <updated>2025-02-28T07:30:17.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GUILayout是一个类似GUI的类，里面的API和GUI类似，只是可以帮我们自动布局，不用手动调整位置，方便一点。</span></span><br><span class="line"><span class="comment">// GUILayout 类是 Unity GUI 的接口，并且具有自动布局功能。</span></span><br><span class="line"><span class="comment">// 主要用于进行编辑器开发，如果用它来做游戏UI不太合适。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// GUILayout和GUI可以相互配合着使用</span></span><br><span class="line">GUI.BeginGroup(<span class="keyword">new</span> Rect(<span class="number">100</span>, <span class="number">100</span>, <span class="number">500</span>, <span class="number">300</span>));</span><br><span class="line"></span><br><span class="line">GUILayout.BeginArea(<span class="keyword">new</span> Rect(<span class="number">10</span>, <span class="number">10</span>, <span class="number">400</span>, <span class="number">300</span>)); <span class="comment">// 在一个固定的屏幕区域中开始 GUI 控件的 GUILayout 块。</span></span><br><span class="line"></span><br><span class="line">GUILayout.BeginVertical(); <span class="comment">// 开始一个垂直控件组。</span></span><br><span class="line"></span><br><span class="line">GUILayout.Button(<span class="string">&quot;竖直123&quot;</span>, GUILayout.Width(<span class="number">200</span>)); <span class="comment">// 控件的固定宽高</span></span><br><span class="line">GUILayout.Button(<span class="string">&quot;竖直245666656565&quot;</span>);</span><br><span class="line">GUILayout.Button(<span class="string">&quot;竖直235&quot;</span>, GUILayout.ExpandWidth(<span class="literal">false</span>)); <span class="comment">// 允许或禁止水平拓展</span></span><br><span class="line"></span><br><span class="line">GUILayout.EndVertical(); <span class="comment">// 闭合以 BeginVertical 开始的组。</span></span><br><span class="line"></span><br><span class="line">GUILayout.BeginHorizontal(); <span class="comment">// 开始一个水平控件组。</span></span><br><span class="line"></span><br><span class="line">GUILayout.Button(<span class="string">&quot;水平123&quot;</span>, GUILayout.Height(<span class="number">300</span>)); <span class="comment">// 控件的固定宽高</span></span><br><span class="line">GUILayout.Button(<span class="string">&quot;水平245666656565&quot;</span>);</span><br><span class="line">GUILayout.Button(<span class="string">&quot;水平235&quot;</span>, GUILayout.ExpandWidth(<span class="literal">false</span>)); <span class="comment">// 允许或禁止水平拓展</span></span><br><span class="line"></span><br><span class="line">GUILayout.EndHorizontal(); <span class="comment">// 闭合以 BeginHorizontal 开始的组。</span></span><br><span class="line"></span><br><span class="line">GUILayout.EndArea(); <span class="comment">// 闭合以 BeginArea 开始的 GUILayout 块。</span></span><br><span class="line"></span><br><span class="line">GUI.EndGroup();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GUILayoutOption 布局选项</span><br><span class="line">        <span class="comment">//控件的固定宽高</span></span><br><span class="line">        GUILayout.Width(<span class="number">300</span>);</span><br><span class="line">        GUILayout.Height(<span class="number">200</span>);</span><br><span class="line">        <span class="comment">//允许控件的最小宽高</span></span><br><span class="line">        GUILayout.MinWidth(<span class="number">50</span>);</span><br><span class="line">        GUILayout.MinHeight(<span class="number">50</span>);</span><br><span class="line">        <span class="comment">//允许控件的最大宽高</span></span><br><span class="line">        GUILayout.MaxWidth(<span class="number">100</span>);</span><br><span class="line">        GUILayout.MaxHeight(<span class="number">100</span>);</span><br><span class="line">        <span class="comment">//允许或禁止水平拓展</span></span><br><span class="line">        GUILayout.ExpandWidth(<span class="literal">true</span>);<span class="comment">//允许</span></span><br><span class="line">        GUILayout.ExpandHeight(<span class="literal">false</span>);<span class="comment">//禁止</span></span><br><span class="line">        GUILayout.ExpandHeight(<span class="literal">true</span>);<span class="comment">//允许</span></span><br><span class="line">        GUILayout.ExpandHeight(<span class="literal">false</span>);<span class="comment">//禁止</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="UI系统" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="GUI" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/GUI/"/>
    
    <category term="GUI基础知识" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="UI系统" scheme="http://example.com/tags/UI%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="GUI" scheme="http://example.com/tags/GUI/"/>
    
    <category term="GUI基础知识" scheme="http://example.com/tags/GUI%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
</feed>
