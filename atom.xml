<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>akiraの博客思密达</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2025-03-01T12:43:19.860Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>akira23369</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>4.Vector3向量</title>
    <link href="http://example.com/2025/03/01/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%9F%BA%E7%A1%80/4.Vector3%E5%90%91%E9%87%8F/"/>
    <id>http://example.com/2025/03/01/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%9F%BA%E7%A1%80/4.Vector3%E5%90%91%E9%87%8F/</id>
    <published>2025-03-01T10:14:34.000Z</published>
    <updated>2025-03-01T12:43:19.860Z</updated>
    
    <content type="html"><![CDATA[<h1 id="unity中的向量"><a class="markdownIt-Anchor" href="#unity中的向量"></a> Unity中的向量</h1><h2 id="向量常用的成员和方法"><a class="markdownIt-Anchor" href="#向量常用的成员和方法"></a> 向量常用的成员和方法</h2><p>向量在数学和编程中有许多常用的成员和方法，常见的包括：</p><ol><li><strong>成员</strong>：<ul><li><code>x</code>、<code>y</code>、<code>z</code>：向量的分量，表示向量在 x、y、z 方向上的值。</li><li><code>magnitude</code> 或 <code>length</code>：向量的<strong>长度或模长</strong>，表示从原点到向量的终点的距离。</li><li><code>normalized</code>：返回与当前向量方向相同但长度为1的<strong>单位向量</strong>。也可以 向量 /magnitude</li><li><code>sqrMagnitude</code>：向量<strong>长度的平方</strong>，用于比较向量长度时避免开方计算。</li><li><code>zero</code>：零向量，所有分量均为0的向量。</li></ul></li><li><strong>方法</strong>：<ul><li><code>Vector3.Dot(Vector3 a, Vector3 b)</code>：计算两个向量的<strong>点乘</strong>结果。返回弧度</li><li><code>Vector3.Cross(Vector3 a, Vector3 b)</code>：计算两个向量的<strong>叉乘</strong>结果。</li><li><code>Vector3.Distance(Vector3 a, Vector3 b)</code>：计算两个向量之间的<strong>距离</strong>。</li><li><code>Vector3.Lerp(Vector3 a, Vector3 b, float t)</code>：在两个向量之间进行<strong>线性插值</strong>。</li><li><code>Vector3.Slerp(Vector3 a, Vector3 b, float t)</code>：在两个向量之间进行<strong>球形插值</strong></li><li><code>Vector3.Normalize(Vector3 value)</code>：将向量转化为单位向量。</li><li><code>Vector3.Project(Vector3 vector, Vector3 onNormal)</code>：将一个向量<strong>投影</strong>到另一个向量上。</li><li><code>Vector3.RotateTowards(Vector3 current, Vector3 target, float maxRadiansDelta, float maxMagnitudeDelta)</code>：将一个向量从当前方向<strong>旋转</strong>到目标方向。</li><li><code>Vector3.Angle(Vector3 from, Vector3 to)</code>：返回值float, 计算两个向量之间的<strong>角度值</strong></li></ul></li></ol><p>例子eg:</p><ul><li>利用 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>⋅</mo><mi>B</mi><mo>=</mo><mi mathvariant="normal">∣</mi><mi>A</mi><mi mathvariant="normal">∣</mi><mo>∗</mo><mi mathvariant="normal">∣</mi><mi>B</mi><mi mathvariant="normal">∣</mi><mi>c</mi><mi>o</mi><mi>s</mi><mi>θ</mi></mrow><annotation encoding="application/x-tex">A \cdot B = |A| * |B| cos\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal">A</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord">∣</span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span> 或者 Vector.Angle()(角度) 来计算<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>⋅</mo><mi>B</mi><mo>&gt;</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">A\cdot B &gt;= 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 前方 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>×</mo><mi>B</mi><mo>&lt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">A \times B &lt; 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 则A右B左</li><li>线性插值 (匀速)</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Transform target;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Vector3 startPos;</span><br><span class="line"><span class="keyword">private</span> Vector3 tmpTarget;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> time = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 每次终点移动变化, 重置时间, 起点</span></span><br><span class="line"><span class="keyword">if</span> (tmpTarget != target.position)</span><br><span class="line">&#123;</span><br><span class="line">tmpTarget = target.position;</span><br><span class="line">time = <span class="number">0</span>;</span><br><span class="line">startPos = transform.position;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">time += Time.deltaTime;</span><br><span class="line">transform.position = Vector3.Lerp(startPos, target.position, time);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="向量的点积"><a class="markdownIt-Anchor" href="#向量的点积"></a> 向量的点积</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Debug类中的DrawLine静态方法 画线段</span></span><br><span class="line"><span class="comment">// 参数：前两个参数分别是起点和终点，最后一个参数是划线颜色。</span></span><br><span class="line">Debug.DrawLine(<span class="keyword">this</span>.transform.position, <span class="keyword">this</span>.transform.position + <span class="keyword">this</span>.transform.forward, Color.red);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Debug类中的DrawRay静态方法 画射线</span></span><br><span class="line"><span class="comment">// 参数：前两个参数分别是起点和方向，最后一个参数是划线颜色。</span></span><br><span class="line">Debug.DrawRay(<span class="keyword">this</span>.transform.position, <span class="keyword">this</span>.transform.up, Color.blue);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>两个向量 a=(x1​,y1​) 和 b=(x2​,y2​) 的点积定义为 <code>a⋅b=x1x2​+y1​y2</code>​​，其结果是一个标量，且 <code>a⋅b=∣a∣×∣b∣×cosθ</code>，其中 θ 是 a 和 b 之间的夹角。<br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi><mo>=</mo><mi>A</mi><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><mtext>单位向量</mtext><mi>a</mi><mo>⋅</mo><mtext>单位向量</mtext><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\theta = Acos(单位向量a \cdot 单位向量b )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mopen">(</span><span class="mord cjk_fallback">单</span><span class="mord cjk_fallback">位</span><span class="mord cjk_fallback">向</span><span class="mord cjk_fallback">量</span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">单</span><span class="mord cjk_fallback">位</span><span class="mord cjk_fallback">向</span><span class="mord cjk_fallback">量</span><span class="mord mathnormal">b</span><span class="mclose">)</span></span></span></span><br /><strong>点积可用于判断两个向量的前后关系</strong></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Vector3 forward = transform.forward;</span><br><span class="line">Vector3 toEnemy = enemy.position - transform.position;</span><br><span class="line"><span class="built_in">float</span> dotResult = Vector3.Dot(forward, toEnemy.normalized);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 值&gt;0表示敌人在前方，&lt;0表示在后方</span></span><br><span class="line"><span class="keyword">if</span>(dotResult &gt; <span class="number">0.5f</span>) &#123;</span><br><span class="line">    <span class="comment">// 敌人位于前方60度范围内</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="向量的叉积"><a class="markdownIt-Anchor" href="#向量的叉积"></a> 向量的叉积</h2><p>获取垂直向量（右手定则， 常用于计算旋转轴）<br /><strong>可以用叉乘来判断两个向量的左右关系</strong><br /><img src="/2025/03/01/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%9F%BA%E7%A1%80/4.Vector3%E5%90%91%E9%87%8F/file-20250301192541472.png" alt="" /></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vector3 C = Vector3.Cross(A.position, B.position);</span><br><span class="line"><span class="keyword">if</span> (C.y &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    Debug.Log(<span class="string">&quot;A在B的右侧&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    Debug.Log(<span class="string">&quot;B在A的右侧&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="向量插值运算"><a class="markdownIt-Anchor" href="#向量插值运算"></a> 向量插值运算</h2><p>插值公式和<a href="/2025/03/01/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%9F%BA%E7%A1%80/2.Mathf%E6%95%B0%E5%AD%A6%E8%AE%A1%E7%AE%97%E7%BB%93%E6%9E%84%E4%BD%93%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/#%E6%8F%92%E5%80%BC%E8%BF%90%E7%AE%97" title="2.Mathf数学计算结构体常用方法">Mathf的插值运算</a>差不多</p><h3 id="线性插值"><a class="markdownIt-Anchor" href="#线性插值"></a> 线性插值</h3><p><img src="/2025/03/01/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%9F%BA%E7%A1%80/4.Vector3%E5%90%91%E9%87%8F/file-20250301201243989.png" alt="" /><br />先快后慢 每帧改变start位置 位置无限接近 但不会得到end位置</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以理解为t不变 每次往方向向量加的值(end - start)一直会变小</span></span><br><span class="line"></span><br><span class="line">A.position = Vector3.Lerp(A.position, target.position, Time.deltaTime);</span><br></pre></td></tr></table></figure><p>匀速 每帧改变时间 当t&gt;=1时 得到结果</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以理解为t每一帧累加相同值 start和(end - start)不变 所以是匀速运动</span></span><br><span class="line"><span class="comment">// 这种匀速移动 当time&gt;=1时  我改变了 目标位置后  它会直接瞬移到我们的目标位置 因为t&gt;=1时直接的得到结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 所以要做特殊处理 每次改变目标位置时 清空时间</span></span><br><span class="line"><span class="keyword">if</span> (nowTarget != target.position)</span><br><span class="line">&#123;</span><br><span class="line">    nowTarget = target.position;</span><br><span class="line">    time = <span class="number">0</span>;</span><br><span class="line">    startPos = B.position;</span><br><span class="line">&#125;</span><br><span class="line">time += Time.deltaTime;</span><br><span class="line">B.position = Vector3.Lerp(startPos, nowTarget, time);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="球形插值"><a class="markdownIt-Anchor" href="#球形插值"></a> 球形插值</h3><p><img src="/2025/03/01/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%9F%BA%E7%A1%80/4.Vector3%E5%90%91%E9%87%8F/file-20250301202346155.png" alt="" /><br />从（10， 0， 0） 到 （0， 0， 10）</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">time += Time.deltaTime;</span><br><span class="line">A.position = Vector3.Slerp(Vector3.right * <span class="number">10</span>, Vector3.forward * <span class="number">10</span>, time);</span><br></pre></td></tr></table></figure><p><img src="/2025/03/01/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%9F%BA%E7%A1%80/4.Vector3%E5%90%91%E9%87%8F/file-20250301203227418.png" alt="" /></p><h1 id="练习"><a class="markdownIt-Anchor" href="#练习"></a> 练习</h1><h2 id="用向量相关知识实现摄像机跟随"><a class="markdownIt-Anchor" href="#用向量相关知识实现摄像机跟随"></a> 用向量相关知识，实现摄像机跟随</h2><p>摄像机代码写在<code>LateUpdate</code>中<br />如果在<code>Update</code>中更新摄像机的位置，可能会出现<strong>摄像机位置更新早于目标对象位置更新</strong>的情况，导致摄像机出现<strong>抖动或延迟跟随</strong>的问题。<br />而在<code>LateUpdate</code>中更新摄像机位置，可以确保在目标对象位置更新完成后再进行摄像机的移动，从而实现平滑的跟随效果。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">float</span> zOffect = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">float</span> yOffect = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">public</span> Transform target;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LateUpdate</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 摄像机的位置等于目标的位置进行向量偏移</span></span><br><span class="line">    <span class="comment">// 先朝目标对象的面朝向的反方向平移4米再朝目标的头顶位置平移7米</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置摄像机位置</span></span><br><span class="line">    <span class="keyword">this</span>.transform.position = target.position - target.forward * zOffect + target.up * yOffect;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 看向目标</span></span><br><span class="line">    <span class="keyword">this</span>.transform.LookAt(target);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="发现入侵者"><a class="markdownIt-Anchor" href="#发现入侵者"></a> 发现入侵者</h2><p>当一个物体B在物体A前方45度角范围内，并且离A只有5米距离时，在控制台打印“发现入侵者”<br /><img src="/2025/03/01/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%9F%BA%E7%A1%80/4.Vector3%E5%90%91%E9%87%8F/file-20250301191637062.png" alt="" /></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 手动算</span></span><br><span class="line"><span class="keyword">if</span> (Vector3.Distance(<span class="keyword">this</span>.transform.position, B.transform.position) &lt;= <span class="number">5</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 第一步：算出点乘结果（方向向量）</span></span><br><span class="line">    <span class="built_in">float</span> dotResult = Vector3.Dot(<span class="keyword">this</span>.transform.forward, (B.transform.position - <span class="keyword">this</span>.transform.position).normalized);</span><br><span class="line">    <span class="comment">// 第二步：通过反余弦函数算出夹角</span></span><br><span class="line">    <span class="keyword">if</span> (Mathf.Acos(dotResult) * Mathf.Rad2Deg &lt;= <span class="number">22.5f</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        print(<span class="string">&quot;手动算角度 发现入侵者&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Angle直接算角度</span></span><br><span class="line"><span class="keyword">if</span> (Vector3.Distance(<span class="keyword">this</span>.transform.position, B.transform.position) &lt;= <span class="number">5</span> &amp;&amp;</span><br><span class="line">    Vector3.Angle(<span class="keyword">this</span>.transform.forward, B.transform.position - <span class="keyword">this</span>.transform.position) &lt;= <span class="number">22.5f</span>)</span><br><span class="line">&#123;</span><br><span class="line">    print(<span class="string">&quot;Angle直接算角度 发现入侵者&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="左上左下-右上右下哪个方位"><a class="markdownIt-Anchor" href="#左上左下-右上右下哪个方位"></a> 左上，左下 ，右上，右下哪个方位?</h2><p>判断一个物体B位置再另一个物体A的位置的左上，左下 ，右上，右下哪个方位</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">VectorPositionDetector</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Transform objectA;</span><br><span class="line">    <span class="keyword">public</span> Transform objectB;</span><br><span class="line">    [<span class="meta">Header(<span class="string">&quot;阈值&quot;</span>)</span>] </span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> angleThreshold = <span class="number">45f</span>; <span class="comment">// 方向识别角度范围</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 获取A到B的水平方向向量</span></span><br><span class="line">        Vector3 aToB = objectB.position - objectA.position;</span><br><span class="line">        aToB.y = <span class="number">0</span>; <span class="comment">// 忽略垂直分量</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取A的基准方向向量（已水平化）</span></span><br><span class="line">        Vector3 aForward = objectA.forward;</span><br><span class="line">        aForward.y = <span class="number">0</span>;</span><br><span class="line">        Vector3 aRight = objectA.right;</span><br><span class="line">        aRight.y = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算方向点积（自动处理向量长度）</span></span><br><span class="line">        <span class="built_in">float</span> forwardDot = Vector3.Dot(aToB.normalized, aForward.normalized);</span><br><span class="line">        <span class="built_in">float</span> rightDot = Vector3.Dot(aToB.normalized, aRight.normalized);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 精确角度计算版本</span></span><br><span class="line">        <span class="built_in">float</span> angle = Vector3.Angle(aForward, aToB);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 基本方位判断</span></span><br><span class="line">        <span class="built_in">bool</span> isFront = forwardDot &gt; <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">bool</span> isBack = forwardDot &lt; <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">bool</span> isRight = rightDot &gt; <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">bool</span> isLeft = rightDot &lt; <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 精确方位判断（45度扇形区）</span></span><br><span class="line">        <span class="built_in">bool</span> inFrontSector = angle &lt;= angleThreshold;</span><br><span class="line">        <span class="built_in">bool</span> inRightSector = Vector3.Angle(aRight, aToB) &lt;= angleThreshold;</span><br><span class="line">        </span><br><span class="line">        Debug.Log(<span class="string">$&quot;前方: <span class="subst">&#123;isFront&#125;</span> | 后方: <span class="subst">&#123;isBack&#125;</span>\n&quot;</span> +</span><br><span class="line">                  <span class="string">$&quot;右侧: <span class="subst">&#123;isRight&#125;</span> | 左侧: <span class="subst">&#123;isLeft&#125;</span>\n&quot;</span> +</span><br><span class="line">                  <span class="string">$&quot;前扇形区: <span class="subst">&#123;inFrontSector&#125;</span> | 右扇形区: <span class="subst">&#123;inRightSector&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算八个方向识别</span></span><br><span class="line">        <span class="built_in">bool</span> isFrontRight = forwardDot &gt; <span class="number">0</span> &amp;&amp; rightDot &gt; <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">bool</span> isFrontLeft = forwardDot &gt; <span class="number">0</span> &amp;&amp; rightDot &lt; <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 距离综合判断</span></span><br><span class="line">        <span class="built_in">float</span> distance = aToB.magnitude;</span><br><span class="line">        <span class="built_in">bool</span> inRange = distance &lt; <span class="number">5f</span>; <span class="comment">// 5米范围内</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 运动方向预测（需记录上一帧位置）</span></span><br><span class="line">        Vector3 velocity = (objectB.position - lastPosition) / Time.deltaTime;</span><br><span class="line">        lastPosition = objectB.position;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Lesson08_</span>练习题 : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//拖拽得到AB位置变量</span></span><br><span class="line">    <span class="keyword">public</span> Transform A;</span><br><span class="line">    <span class="keyword">public</span> Transform B;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//点乘接过和叉乘结果变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> dotResult;</span><br><span class="line">    <span class="keyword">private</span> Vector3 crossResult;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="meta">#<span class="keyword">region</span> 练习题一</span></span><br><span class="line">        <span class="comment">//判断一个物体B位置再另一个物体A的位置的左上，左下 ，右上，右下哪个方位</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//计算 A位置向量和AB方向差向量 点乘和叉乘结果</span></span><br><span class="line">        dotResult = Vector3.Dot(A.forward, B.position - A.position);</span><br><span class="line">        crossResult = Vector3.Cross(A.forward, B.position - A.position);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据点乘和叉乘的值判断前后左右</span></span><br><span class="line">        <span class="keyword">if</span> (dotResult &gt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//右侧</span></span><br><span class="line">            <span class="keyword">if</span> (crossResult.y &gt;= <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                print(<span class="string">&quot;右前&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//左侧</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                print(<span class="string">&quot;左前&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//右侧</span></span><br><span class="line">            <span class="keyword">if</span> (crossResult.y &gt;= <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                print(<span class="string">&quot;右后&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//左侧</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                print(<span class="string">&quot;左后&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 练习题二</span></span><br><span class="line">        <span class="comment">//当一个物体B在物体A左前方20度角或右前方30度范围内，并且离A只有5米距离时，在控制台打印“发现入侵者”</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//计算叉乘 用于判断左边还是右边</span></span><br><span class="line">        crossResult = Vector3.Cross(A.forward, B.position - A.position);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断距离</span></span><br><span class="line">        <span class="keyword">if</span> (Vector3.Distance(A.position, B.position) &lt;= <span class="number">5</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//A左前方20度角或右前方30度范围内</span></span><br><span class="line">            <span class="keyword">if</span> (crossResult.y &gt;= <span class="number">0</span> &amp;&amp; Vector3.Angle(A.forward, B.position - A.position) &lt;= <span class="number">30</span> ||</span><br><span class="line">                crossResult.y &lt; <span class="number">0</span> &amp;&amp; Vector3.Angle(A.forward, B.position - A.position) &lt;= <span class="number">20</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                print(<span class="string">&quot;发现入侵者&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="插值实现摄像机跟随"><a class="markdownIt-Anchor" href="#插值实现摄像机跟随"></a> 插值实现摄像机跟随</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果当前摄像机的目标位置不是目标对象的后方4米，向上偏7米 就设置目标位置 记录摄像机当前开始位置 重置时间</span></span><br><span class="line"><span class="keyword">if</span> (cameraTargetPos != target.position + -target.forward * zOffect + target.up * yOffect)</span><br><span class="line">&#123;</span><br><span class="line">    cameraTargetPos = target.position + -target.forward * zOffect + target.up * yOffect;</span><br><span class="line">    startPos = <span class="keyword">this</span>.transform.position;</span><br><span class="line">    time = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">time += Time.deltaTime;</span><br><span class="line"><span class="keyword">this</span>.transform.position = Vector3.Lerp(startPos, cameraTargetPos, time * moveSpeed);</span><br></pre></td></tr></table></figure><h2 id="球形插值模拟太阳轨迹"><a class="markdownIt-Anchor" href="#球形插值模拟太阳轨迹"></a> 球形插值模拟太阳轨迹</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    time2 += Time.deltaTime;</span><br><span class="line">    <span class="comment">// sun.position = Vector3.Slerp(Vector3.right * 10, Vector3.left * 10, time2 * 0.1f);//假如直接写最终值会不知道从哪里转 可能会平这转</span></span><br><span class="line">    sun.position = Vector3.Slerp(Vector3.right * <span class="number">10</span>, Vector3.left * <span class="number">10</span> + Vector3.up * <span class="number">0.1f</span>, time2 * <span class="number">0.1f</span>);<span class="comment">//要给最终值加一点向上的向量 才会往上转</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;unity中的向量&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#unity中的向量&quot;&gt;&lt;/a&gt; Unity中的向量&lt;/h1&gt;
&lt;h2 id=&quot;向量常用的成员和方法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=</summary>
      
    
    
    
    <category term="游戏引擎" scheme="http://example.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/"/>
    
    <category term="unity" scheme="http://example.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/"/>
    
    <category term="unity基础" scheme="http://example.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="游戏引擎" scheme="http://example.com/tags/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/"/>
    
    <category term="unity" scheme="http://example.com/tags/unity/"/>
    
    <category term="unity基础" scheme="http://example.com/tags/unity%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>3.坐标系</title>
    <link href="http://example.com/2025/03/01/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%9F%BA%E7%A1%80/3.%E5%9D%90%E6%A0%87%E7%B3%BB/"/>
    <id>http://example.com/2025/03/01/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%9F%BA%E7%A1%80/3.%E5%9D%90%E6%A0%87%E7%B3%BB/</id>
    <published>2025-03-01T07:57:07.000Z</published>
    <updated>2025-03-01T10:09:34.992Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2025/03/01/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%9F%BA%E7%A1%80/3.%E5%9D%90%E6%A0%87%E7%B3%BB/file-20250301160938092.png" alt="" /></p><h1 id="世界坐标系"><a class="markdownIt-Anchor" href="#世界坐标系"></a> 世界坐标系</h1><p><img src="/2025/03/01/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%9F%BA%E7%A1%80/3.%E5%9D%90%E6%A0%87%E7%B3%BB/file-20250301155758132.png" alt="" /></p><ul><li><code>this.transform.position</code>-返回物体在世界坐标系中的位置</li><li><code>this.transform.rotation</code>-返回物体在世界坐标系中的旋转四元数</li><li><code>this.transform.eulerAngles</code>-返回物体在世界坐标系中的欧拉角</li><li><code>this.transform.lossyScale</code>-返回物体在世界坐标系中的缩放</li><li>修改它们将导致相对于世界坐标系的变化</li></ul><h1 id="物体坐标系"><a class="markdownIt-Anchor" href="#物体坐标系"></a> 物体坐标系</h1><p><img src="/2025/03/01/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%9F%BA%E7%A1%80/3.%E5%9D%90%E6%A0%87%E7%B3%BB/file-20250301155814045.png" alt="" /></p><ul><li><code>this.transform.localPosition</code>-返回物体在其父对象坐标系中的位置</li><li><code>this.transform.localEulerAngles</code>-返回物体在其父对象坐标系中的旋转四元数</li><li><code>this.transform.localRotation</code>-返回物体在其父对象坐标系中的欧拉角</li><li><code>this.transform.localScale</code>-返回物体在其父对象坐标系中的缩放</li><li>修改它们将导致相对于父对象物体坐标系的变化</li></ul><h1 id="屏幕坐标系"><a class="markdownIt-Anchor" href="#屏幕坐标系"></a> 屏幕坐标系</h1><p><img src="/2025/03/01/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%9F%BA%E7%A1%80/3.%E5%9D%90%E6%A0%87%E7%B3%BB/file-20250301155843741.png" alt="" /></p><ul><li><code>Input.mousePosition</code>-返回鼠标在屏幕坐标系中的位置</li><li><code>Screen.width</code>-返回屏幕坐标系的宽度</li><li><code>Screen.height</code>-返回屏幕坐标系的高度</li><li><code>currentResolution</code>当前屏幕的分辨率为</li></ul><h1 id="视口坐标系"><a class="markdownIt-Anchor" href="#视口坐标系"></a> 视口坐标系</h1><p><img src="/2025/03/01/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%9F%BA%E7%A1%80/3.%E5%9D%90%E6%A0%87%E7%B3%BB/file-20250301155903740.png" alt="" /></p><p><img src="/2025/03/01/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%9F%BA%E7%A1%80/3.%E5%9D%90%E6%A0%87%E7%B3%BB/file-20250301161722119.png" alt="" /></p><h1 id="坐标转换"><a class="markdownIt-Anchor" href="#坐标转换"></a> 坐标转换</h1><a href="/2025/02/19/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%85%A5%E9%97%A8/unity%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/18.%E5%9D%90%E6%A0%87%E8%BD%AC%E6%8D%A2/" title="18.坐标转换">点与向量在本地与世界之间的来回转换</a><h2 id="世界转本地"><a class="markdownIt-Anchor" href="#世界转本地"></a> 世界转本地</h2><p><code>this.transform.InverseTransformDirection</code> 将世界空间中的方向向量转换为本地空间中的方向向量。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Vector3 worldDirection = <span class="keyword">new</span> Vector3(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">Vector3 localDirection = <span class="keyword">this</span>.transform.InverseTransformDirection(worldDirection);    <span class="comment">// (不受缩放影响</span></span><br></pre></td></tr></table></figure><p><code>this.transform.InverseTransformPoint</code> 将世界空间中的点转换为本地空间中的点。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Vector3 worldPoint = <span class="keyword">new</span> Vector3(<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">Vector3 localPoint = <span class="keyword">this</span>.transform.InverseTransformPoint(worldPoint);</span><br></pre></td></tr></table></figure><p><code>this.transform.InverseTransformVector</code> 将世界空间中的向量转换为本地空间中的向量。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Vector3 worldVector = <span class="keyword">new</span> Vector3(<span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">Vector3 localVector = <span class="keyword">this</span>.transform.InverseTransformVector(worldVector);     <span class="comment">// (受缩放影响</span></span><br></pre></td></tr></table></figure><h2 id="本地转世界"><a class="markdownIt-Anchor" href="#本地转世界"></a> 本地转世界</h2><p><code>this.transform.TransformDirection</code> 将本地空间中的方向向量转换为世界空间中的方向向量。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Vector3 localDirection = <span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">Vector3 worldDirection = <span class="keyword">this</span>.transform.TransformDirection(localDirection);<span class="comment">// (不受缩放影响</span></span><br></pre></td></tr></table></figure><p><code>this.transform.TransformPoint</code> 将本地空间中的点转换为世界空间中的点。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Vector3 localPoint = <span class="keyword">new</span> Vector3(<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>);</span><br><span class="line">Vector3 worldPoint = <span class="keyword">this</span>.transform.TransformPoint(localPoint);</span><br></pre></td></tr></table></figure><p><code>this.transform.TransformVector</code> 将本地空间中的向量转换为世界空间中的向量。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Vector3 localVector = <span class="keyword">new</span> Vector3(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">Vector3 worldVector = <span class="keyword">this</span>.transform.TransformVector(localVector);    <span class="comment">// (受缩放影响</span></span><br></pre></td></tr></table></figure><h2 id="世界转屏幕"><a class="markdownIt-Anchor" href="#世界转屏幕"></a> 世界转屏幕</h2><p><code>Camera.main.WorldToScreenPoint</code> 将世界空间中的点转换为屏幕空间中的点。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Vector3 worldPoint = <span class="keyword">new</span> Vector3(<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">Vector3 screenPoint = Camera.main.WorldToScreenPoint(worldPoint);</span><br></pre></td></tr></table></figure><h2 id="屏幕转世界"><a class="markdownIt-Anchor" href="#屏幕转世界"></a> 屏幕转世界</h2><p><code>Camera.main.ScreenToWorldPoint</code> 将屏幕空间中的点转换为世界空间中的点。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Vector3 screenPoint = <span class="keyword">new</span> Vector3(<span class="number">100</span>, <span class="number">200</span>, <span class="number">0</span>);</span><br><span class="line">Vector3 worldPoint = Camera.main.ScreenToWorldPoint(screenPoint);</span><br></pre></td></tr></table></figure><h2 id="世界转视口"><a class="markdownIt-Anchor" href="#世界转视口"></a> 世界转视口</h2><p><code>Camera.main.WorldToViewportPoint</code> 将世界空间中的点转换为视口空间中的点。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Vector3 worldPoint = <span class="keyword">new</span> Vector3(<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">Vector3 viewportPoint = Camera.main.WorldToViewportPoint(worldPoint);</span><br></pre></td></tr></table></figure><h2 id="视口转世界"><a class="markdownIt-Anchor" href="#视口转世界"></a> 视口转世界</h2><p><code>Camera.main.ViewportToWorldPoint</code> 将视口空间中的点转换为世界空间中的点。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Vector3 viewportPoint = <span class="keyword">new</span> Vector3(<span class="number">0.5f</span>, <span class="number">0.5f</span>, <span class="number">0</span>);</span><br><span class="line">Vector3 worldPoint = Camera.main.ViewportToWorldPoint(viewportPoint);</span><br></pre></td></tr></table></figure><h2 id="视口转屏幕"><a class="markdownIt-Anchor" href="#视口转屏幕"></a> 视口转屏幕</h2><p><code>Camera.main.ViewportToScreenPoint</code> 将视口空间中的点转换为屏幕空间中的点。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Vector3 viewportPoint = <span class="keyword">new</span> Vector3(<span class="number">0.5f</span>, <span class="number">0.5f</span>, <span class="number">0</span>);</span><br><span class="line">Vector3 screenPoint = Camera.main.ViewportToScreenPoint(viewportPoint);</span><br></pre></td></tr></table></figure><h2 id="屏幕转视口"><a class="markdownIt-Anchor" href="#屏幕转视口"></a> 屏幕转视口</h2><p><code>Camera.main.ScreenToViewportPoint</code> 将屏幕空间中的点转换为视口空间中的点。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Vector3 screenPoint = <span class="keyword">new</span> Vector3(<span class="number">100</span>, <span class="number">200</span>, <span class="number">0</span>);</span><br><span class="line">Vector3 viewportPoint = Camera.main.ScreenToViewportPoint(screenPoint);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2025/03/01/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%9F%BA%E7%A1%80/3.%E5%9D%90%E6%A0%87%E7%B3%BB/file-2025030116093</summary>
      
    
    
    
    <category term="游戏引擎" scheme="http://example.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/"/>
    
    <category term="unity" scheme="http://example.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/"/>
    
    <category term="unity基础" scheme="http://example.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="游戏引擎" scheme="http://example.com/tags/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/"/>
    
    <category term="unity" scheme="http://example.com/tags/unity/"/>
    
    <category term="unity基础" scheme="http://example.com/tags/unity%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>2.Mathf数学计算结构体常用方法</title>
    <link href="http://example.com/2025/03/01/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%9F%BA%E7%A1%80/2.Mathf%E6%95%B0%E5%AD%A6%E8%AE%A1%E7%AE%97%E7%BB%93%E6%9E%84%E4%BD%93%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2025/03/01/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%9F%BA%E7%A1%80/2.Mathf%E6%95%B0%E5%AD%A6%E8%AE%A1%E7%AE%97%E7%BB%93%E6%9E%84%E4%BD%93%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</id>
    <published>2025-03-01T06:51:42.000Z</published>
    <updated>2025-03-01T07:56:34.715Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mathf和math"><a class="markdownIt-Anchor" href="#mathf和math"></a> Mathf和Math</h1><ul><li>Math是C#中封装好的用于数学计算的<strong>工具类</strong>，位于System命名空间中。</li><li>Mathf是Unity中封装好的用于数学计算的<strong>工具结构体</strong>，位于UnityEngine命名空间中。</li><li>他们都是提供来用于进行数学相关计算的。</li></ul><h1 id="mathf和math的区别"><a class="markdownIt-Anchor" href="#mathf和math的区别"></a> Mathf和Math的区别</h1><ul><li>Mathf 和 Math中的相关方法几乎一样。</li><li>Math - C#自带数学库，提供基本的数学计算方法。</li><li>Mathf - Unity专门针对游戏开发增强的数学库，包含了Math中的方法，并添加了一些适用于游戏开发的方法。</li></ul><h1 id="mathf中的常用方法"><a class="markdownIt-Anchor" href="#mathf中的常用方法"></a> Mathf中的常用方法</h1><h2 id="pi常量-获取圆周率π"><a class="markdownIt-Anchor" href="#pi常量-获取圆周率π"></a> PI常量 获取圆周率π</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 众所周知的“3.14159265358979...”值（只读）。</span></span><br><span class="line">print(Mathf.PI);<span class="comment">//3.141593</span></span><br></pre></td></tr></table></figure><h2 id="abs静态方法-取绝对值"><a class="markdownIt-Anchor" href="#abs静态方法-取绝对值"></a> Abs静态方法 取绝对值</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回 f 的绝对值。</span></span><br><span class="line">print(Mathf.Abs(<span class="number">-10</span>));<span class="comment">//10</span></span><br><span class="line">print(Mathf.Abs(<span class="number">-20</span>));<span class="comment">//20</span></span><br><span class="line">print(Mathf.Abs(<span class="number">1</span>));<span class="comment">//1</span></span><br></pre></td></tr></table></figure><h2 id="ceiltoint静态方法-向上取整"><a class="markdownIt-Anchor" href="#ceiltoint静态方法-向上取整"></a> CeilToInt静态方法 向上取整</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回大于或等于 f 的最小整数。</span></span><br><span class="line"><span class="built_in">float</span> f = <span class="number">1.3f</span>;</span><br><span class="line"><span class="built_in">int</span> i = (<span class="built_in">int</span>)f;</span><br><span class="line">print(i);<span class="comment">//1</span></span><br><span class="line">print(Mathf.CeilToInt(f));<span class="comment">//2</span></span><br><span class="line">print(Mathf.CeilToInt(<span class="number">1.00001f</span>));<span class="comment">//2</span></span><br></pre></td></tr></table></figure><h2 id="floortoint静态方法-向下取整"><a class="markdownIt-Anchor" href="#floortoint静态方法-向下取整"></a> FloorToInt静态方法 向下取整</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回小于或等于 f 的最大整数。</span></span><br><span class="line">print(Mathf.FloorToInt(<span class="number">9.6f</span>));<span class="comment">//9</span></span><br></pre></td></tr></table></figure><h2 id="clamp静态方法-钳制函数"><a class="markdownIt-Anchor" href="#clamp静态方法-钳制函数"></a> Clamp静态方法 钳制函数</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在给定的最小浮点值和最大浮点值之间钳制给定值。如果在最小和最大范围内，则返回给定值。</span></span><br><span class="line"><span class="comment">// 比最小还小，就取最小，比最大还大，就取最大，两者之间，就取本身</span></span><br><span class="line">print(Mathf.Clamp(<span class="number">10</span>, <span class="number">11</span>, <span class="number">20</span>));<span class="comment">//11</span></span><br><span class="line">print(Mathf.Clamp(<span class="number">21</span>, <span class="number">11</span>, <span class="number">20</span>));<span class="comment">//20</span></span><br><span class="line">print(Mathf.Clamp(<span class="number">15</span>, <span class="number">11</span>, <span class="number">20</span>));<span class="comment">//15</span></span><br></pre></td></tr></table></figure><h2 id="max静态方法-获取最大值"><a class="markdownIt-Anchor" href="#max静态方法-获取最大值"></a> Max静态方法 获取最大值</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回两个或更多值中的最大值。</span></span><br><span class="line"><span class="comment">// 内部有一个可变长的参数</span></span><br><span class="line">print(Mathf.Max(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>));<span class="comment">//8</span></span><br><span class="line">print(Mathf.Max(<span class="number">1</span>, <span class="number">2</span>));<span class="comment">//2</span></span><br></pre></td></tr></table></figure><h2 id="min静态方法-获取最小值"><a class="markdownIt-Anchor" href="#min静态方法-获取最小值"></a> Min静态方法 获取最小值</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回两个或更多值中的最小值。</span></span><br><span class="line"><span class="comment">// 内部有一个可变长的参数</span></span><br><span class="line">print(Mathf.Min(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">545</span>, <span class="number">6</span>, <span class="number">1123</span>, <span class="number">123</span>));<span class="comment">//1</span></span><br><span class="line">print(Mathf.Min(<span class="number">1.1f</span>, <span class="number">0.4f</span>));<span class="comment">//0.4</span></span><br></pre></td></tr></table></figure><h2 id="pow静态方法-一个数的n次幂"><a class="markdownIt-Anchor" href="#pow静态方法-一个数的n次幂"></a> Pow静态方法 一个数的n次幂</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回 f 的 p 次幂。</span></span><br><span class="line">print(<span class="string">&quot;一个数的n次方&quot;</span> + Mathf.Pow(<span class="number">4</span>, <span class="number">2</span>));<span class="comment">//16</span></span><br><span class="line">print(<span class="string">&quot;一个数的n次方&quot;</span> + Mathf.Pow(<span class="number">2</span>, <span class="number">3</span>));<span class="comment">//8</span></span><br></pre></td></tr></table></figure><h2 id="roundtoint静态方法-四舍五入"><a class="markdownIt-Anchor" href="#roundtoint静态方法-四舍五入"></a> RoundToInt静态方法 四舍五入</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回舍入为最近整数的 / f /。</span></span><br><span class="line">print(<span class="string">&quot;四舍五入&quot;</span> + Mathf.RoundToInt(<span class="number">1.3f</span>));<span class="comment">//1</span></span><br><span class="line">print(<span class="string">&quot;四舍五入&quot;</span> + Mathf.RoundToInt(<span class="number">1.5f</span>));<span class="comment">//2</span></span><br></pre></td></tr></table></figure><h2 id="sqrt静态方法-返回一个数的平方根"><a class="markdownIt-Anchor" href="#sqrt静态方法-返回一个数的平方根"></a> Sqrt静态方法 返回一个数的平方根</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回 f 的平方根。</span></span><br><span class="line">print(<span class="string">&quot;返回一个数的平方根&quot;</span> + Mathf.Sqrt(<span class="number">4</span>));<span class="comment">//2</span></span><br><span class="line">print(<span class="string">&quot;返回一个数的平方根&quot;</span> + Mathf.Sqrt(<span class="number">16</span>));<span class="comment">//4</span></span><br><span class="line">print(<span class="string">&quot;返回一个数的平方根&quot;</span> + Mathf.Sqrt(<span class="number">64</span>));<span class="comment">//8</span></span><br></pre></td></tr></table></figure><h2 id="ispoweroftwo静态方法-判断一个数是否是2的n次方"><a class="markdownIt-Anchor" href="#ispoweroftwo静态方法-判断一个数是否是2的n次方"></a> IsPowerOfTwo静态方法 判断一个数是否是2的n次方</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果值是 2 的幂，则返回 true。</span></span><br><span class="line">print(<span class="string">&quot;判断一个数是否是2的n次方&quot;</span> + Mathf.IsPowerOfTwo(<span class="number">4</span>));<span class="comment">//true</span></span><br><span class="line">print(<span class="string">&quot;判断一个数是否是2的n次方&quot;</span> + Mathf.IsPowerOfTwo(<span class="number">8</span>));<span class="comment">//true</span></span><br><span class="line">print(<span class="string">&quot;判断一个数是否是2的n次方&quot;</span> + Mathf.IsPowerOfTwo(<span class="number">3</span>));<span class="comment">//false</span></span><br><span class="line">print(<span class="string">&quot;判断一个数是否是2的n次方&quot;</span> + Mathf.IsPowerOfTwo(<span class="number">1</span>));<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h2 id="sign静态方法-判断正负数"><a class="markdownIt-Anchor" href="#sign静态方法-判断正负数"></a> Sign静态方法 判断正负数</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回 f 的符号。</span></span><br><span class="line"><span class="comment">// 正数和0就返回1，负数就返回-1</span></span><br><span class="line">print(<span class="string">&quot;判断正负数&quot;</span> + Mathf.Sign(<span class="number">0</span>));<span class="comment">//1</span></span><br><span class="line">print(<span class="string">&quot;判断正负数&quot;</span> + Mathf.Sign(<span class="number">10</span>));<span class="comment">//1</span></span><br><span class="line">print(<span class="string">&quot;判断正负数&quot;</span> + Mathf.Sign(<span class="number">-10</span>));<span class="comment">//-1</span></span><br><span class="line">print(<span class="string">&quot;判断正负数&quot;</span> + Mathf.Sign(<span class="number">3</span>));<span class="comment">//1</span></span><br><span class="line">print(<span class="string">&quot;判断正负数&quot;</span> + Mathf.Sign(<span class="number">-2</span>));<span class="comment">//-1</span></span><br></pre></td></tr></table></figure><h2 id="插值运算"><a class="markdownIt-Anchor" href="#插值运算"></a> 插值运算</h2><p>Lerp :   result = Mathf.Lerp(start, end, t);<br />t为插值系数   取值范围<code>[0, 1]</code><br /><code>result = start + (end - start) * t</code>;</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// t不变，起点不断变化</span></span><br><span class="line"><span class="comment">// 用法1  先快后慢, 无限趋近10</span></span><br><span class="line"><span class="built_in">float</span> start = <span class="number">1</span>;</span><br><span class="line">start = Mathf.Lerp(start, <span class="number">10</span>, Time.deltaTime);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 起点不变，时间t匀速变化</span></span><br><span class="line"><span class="comment">// 用法2  匀速变化</span></span><br><span class="line"><span class="built_in">float</span> start = <span class="number">1</span>; <span class="built_in">float</span> time = <span class="number">0</span>, result = <span class="number">0</span>;</span><br><span class="line">time += Time.deltaTime;</span><br><span class="line">result = Mathf.Lerp(start, <span class="number">10</span>, time);</span><br></pre></td></tr></table></figure><p><img src="/2025/03/01/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%9F%BA%E7%A1%80/2.Mathf%E6%95%B0%E5%AD%A6%E8%AE%A1%E7%AE%97%E7%BB%93%E6%9E%84%E4%BD%93%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/file-20250301153953564.png" alt="" /></p><p><img src="/2025/03/01/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%9F%BA%E7%A1%80/2.Mathf%E6%95%B0%E5%AD%A6%E8%AE%A1%E7%AE%97%E7%BB%93%E6%9E%84%E4%BD%93%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/file-20250301154007473.png" alt="" /></p><p>Rad2Deg常量 弧度转角度的常量</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 弧度到度换算常量（只读）。</span></span><br><span class="line"><span class="built_in">float</span> rad = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">float</span> anger = rad * Mathf.Rad2Deg;</span><br><span class="line">print(anger);<span class="comment">//57.29578f;</span></span><br></pre></td></tr></table></figure><p>Deg2Rad常量 角度转弧度的常量</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 度到弧度换算常量（只读）。</span></span><br><span class="line">anger = <span class="number">1</span>;</span><br><span class="line">rad = anger * Mathf.Deg2Rad;</span><br><span class="line">print(rad);<span class="comment">//0.01745329</span></span><br></pre></td></tr></table></figure><h1 id="unity中的三角函数"><a class="markdownIt-Anchor" href="#unity中的三角函数"></a> Unity中的三角函数</h1><p>注意：Mathf中的三角函数相关函数，<strong>传入的参数需要时弧度值</strong></p><h2 id="sin静态方法-计算正弦函数"><a class="markdownIt-Anchor" href="#sin静态方法-计算正弦函数"></a> Sin静态方法 计算正弦函数</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回角度 f 的正弦。</span></span><br><span class="line">print(Mathf.Sin(<span class="number">30</span> * Mathf.Deg2Rad));<span class="comment">//0.5</span></span><br></pre></td></tr></table></figure><h2 id="cos静态方法-计算余弦函数"><a class="markdownIt-Anchor" href="#cos静态方法-计算余弦函数"></a> Cos静态方法 计算余弦函数</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回角度 f 的余弦。</span></span><br><span class="line">print(Mathf.Cos(<span class="number">60</span> * Mathf.Deg2Rad));<span class="comment">//0.5</span></span><br></pre></td></tr></table></figure><p>注意：反三角函数得到的结果是 正弦或者余弦值对应的弧度</p><h2 id="asin静态方法-反正弦函数"><a class="markdownIt-Anchor" href="#asin静态方法-反正弦函数"></a> Asin静态方法 反正弦函数</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回 f 的反正弦 - 其正弦为 f 的角度（以弧度为单位）。</span></span><br><span class="line">rad = Mathf.Asin(<span class="number">0.5f</span>);</span><br><span class="line">print(rad * Mathf.Rad2Deg);<span class="comment">//30</span></span><br></pre></td></tr></table></figure><h2 id="acos静态方法-反余弦函数"><a class="markdownIt-Anchor" href="#acos静态方法-反余弦函数"></a> Acos静态方法 反余弦函数</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回 f 的反余弦 - 其余弦为 f 的角度（以弧度为单位）。</span></span><br><span class="line">rad = Mathf.Acos(<span class="number">0.5f</span>);</span><br><span class="line">print(rad * Mathf.Rad2Deg);<span class="comment">//60</span></span><br></pre></td></tr></table></figure><h1 id="练习"><a class="markdownIt-Anchor" href="#练习"></a> 练习</h1><h2 id="使用插值实现一个方块跟随另一个方块移动"><a class="markdownIt-Anchor" href="#使用插值实现一个方块跟随另一个方块移动"></a> 使用插值实现一个方块跟随另一个方块移动</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这个脚本将要挂载到方块A上 实现方块A跟随着方块B</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Lesson02_</span>练习题 : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">//要跟随的对象B</span></span><br><span class="line">    <span class="keyword">public</span> Transform B;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//移动速度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> moveSpeed;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//位置中介</span></span><br><span class="line">    <span class="keyword">private</span> Vector3 pos;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//B当前的位置</span></span><br><span class="line">    <span class="keyword">private</span> Vector3 bNowPos;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开始位置</span></span><br><span class="line">    <span class="keyword">private</span> Vector3 startPos;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//匀速运动累加的时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> time;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//模式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> mode = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(mode == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//第一种 就是 先快后慢的形式</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//记录当前这一帧A的位置</span></span><br><span class="line">            pos = <span class="keyword">this</span>.transform.position;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//传入这一帧A的位置算出下一帧A的位置</span></span><br><span class="line">            pos.x = Mathf.Lerp(pos.x, B.position.x, Time.deltaTime * moveSpeed);</span><br><span class="line">            pos.y = Mathf.Lerp(pos.y, B.position.y, Time.deltaTime * moveSpeed);</span><br><span class="line">            pos.z = Mathf.Lerp(pos.z, B.position.z, Time.deltaTime * moveSpeed);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//算出下一帧A的位置赋值给A</span></span><br><span class="line">            <span class="keyword">this</span>.transform.position = pos;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(mode == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//第二种 就是 匀速运动</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//发现存储的B的位置不等于当前B的位置</span></span><br><span class="line">            <span class="keyword">if</span> (bNowPos != B.transform.position)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//清空时间 重写设置B的位置 开始位置是A当前的位置</span></span><br><span class="line">                time = <span class="number">0</span>;</span><br><span class="line">                bNowPos = B.transform.position;</span><br><span class="line">                startPos = <span class="keyword">this</span>.transform.position;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//时间每一帧运算累加</span></span><br><span class="line">            time += Time.deltaTime;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//startPos和bNowPos其实定死了 只有time在变化 传入算出下一帧A的位置</span></span><br><span class="line">            pos.x = Mathf.Lerp(startPos.x, bNowPos.x, time * moveSpeed);</span><br><span class="line">            pos.y = Mathf.Lerp(startPos.y, bNowPos.y, time * moveSpeed);</span><br><span class="line">            pos.z = Mathf.Lerp(startPos.z, bNowPos.z, time * moveSpeed);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//算出下一帧A的位置赋值给A</span></span><br><span class="line">            <span class="keyword">this</span>.transform.position = pos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnGUI</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(GUI.Button(<span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>, <span class="number">200</span>), <span class="string">&quot;切换模式&quot;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            mode = <span class="number">3</span> - mode;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="实现一个物体按照曲线移动正弦或余弦"><a class="markdownIt-Anchor" href="#实现一个物体按照曲线移动正弦或余弦"></a> 实现一个物体按照曲线移动（正弦或余弦）</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MathfTest</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 向前移动速度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> moveSpeed = <span class="number">5</span>;</span><br><span class="line">    <span class="comment">// 振幅</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> changeSize = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// 频率</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> changeSpeed = <span class="number">5</span>;</span><br><span class="line">    <span class="comment">// 时间</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> time = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.transform.Translate(Vector3.forward * moveSpeed * Time.deltaTime);</span><br><span class="line">        time += Time.deltaTime;</span><br><span class="line">        <span class="keyword">this</span>.transform.Translate(Vector3.right * Mathf.Sin(time * changeSpeed) * changeSize * Time.deltaTime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;mathf和math&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#mathf和math&quot;&gt;&lt;/a&gt; Mathf和Math&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Math是C#中封装好的用于数学计算的&lt;strong&gt;工具类&lt;/strong&gt;，位于</summary>
      
    
    
    
    <category term="游戏引擎" scheme="http://example.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/"/>
    
    <category term="unity" scheme="http://example.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/"/>
    
    <category term="unity基础" scheme="http://example.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="游戏引擎" scheme="http://example.com/tags/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/"/>
    
    <category term="unity" scheme="http://example.com/tags/unity/"/>
    
    <category term="unity基础" scheme="http://example.com/tags/unity%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>1.unity基础概述</title>
    <link href="http://example.com/2025/03/01/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%9F%BA%E7%A1%80/1.unity%E5%9F%BA%E7%A1%80%E6%A6%82%E8%BF%B0/"/>
    <id>http://example.com/2025/03/01/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%9F%BA%E7%A1%80/1.unity%E5%9F%BA%E7%A1%80%E6%A6%82%E8%BF%B0/</id>
    <published>2025-03-01T06:43:09.000Z</published>
    <updated>2025-03-01T06:47:12.464Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2025/03/01/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%9F%BA%E7%A1%80/1.unity%E5%9F%BA%E7%A1%80%E6%A6%82%E8%BF%B0/file-20250301144349330.png" alt="" /></p><p><img src="/2025/03/01/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%9F%BA%E7%A1%80/1.unity%E5%9F%BA%E7%A1%80%E6%A6%82%E8%BF%B0/file-20250301144710806.png" alt="" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2025/03/01/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%9F%BA%E7%A1%80/1.unity%E5%9F%BA%E7%A1%80%E6%A6%82%E8%BF%B0/file</summary>
      
    
    
    
    <category term="游戏引擎" scheme="http://example.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/"/>
    
    <category term="unity" scheme="http://example.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/"/>
    
    <category term="unity基础" scheme="http://example.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="游戏引擎" scheme="http://example.com/tags/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/"/>
    
    <category term="unity" scheme="http://example.com/tags/unity/"/>
    
    <category term="unity基础" scheme="http://example.com/tags/unity%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>4.模型自资源的导入</title>
    <link href="http://example.com/2025/03/01/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%85%A5%E9%97%A8/unity%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/4.%E6%A8%A1%E5%9E%8B%E8%87%AA%E8%B5%84%E6%BA%90%E7%9A%84%E5%AF%BC%E5%85%A5/"/>
    <id>http://example.com/2025/03/01/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%85%A5%E9%97%A8/unity%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/4.%E6%A8%A1%E5%9E%8B%E8%87%AA%E8%B5%84%E6%BA%90%E7%9A%84%E5%AF%BC%E5%85%A5/</id>
    <published>2025-03-01T06:37:18.000Z</published>
    <updated>2025-03-01T06:40:34.472Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2025/03/01/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%85%A5%E9%97%A8/unity%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/4.%E6%A8%A1%E5%9E%8B%E8%87%AA%E8%B5%84%E6%BA%90%E7%9A%84%E5%AF%BC%E5%85%A5/file-20250301144027904.png" alt="" /></p><p><img src="/2025/03/01/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%85%A5%E9%97%A8/unity%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/4.%E6%A8%A1%E5%9E%8B%E8%87%AA%E8%B5%84%E6%BA%90%E7%9A%84%E5%AF%BC%E5%85%A5/file-20250301143740401.png" alt="" /></p><p><img src="/2025/03/01/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%85%A5%E9%97%A8/unity%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/4.%E6%A8%A1%E5%9E%8B%E8%87%AA%E8%B5%84%E6%BA%90%E7%9A%84%E5%AF%BC%E5%85%A5/file-20250301143825667.png" alt="" /></p><p><img src="/2025/03/01/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%85%A5%E9%97%A8/unity%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/4.%E6%A8%A1%E5%9E%8B%E8%87%AA%E8%B5%84%E6%BA%90%E7%9A%84%E5%AF%BC%E5%85%A5/file-20250301143846271.png" alt="" /></p><p><img src="/2025/03/01/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%85%A5%E9%97%A8/unity%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/4.%E6%A8%A1%E5%9E%8B%E8%87%AA%E8%B5%84%E6%BA%90%E7%9A%84%E5%AF%BC%E5%85%A5/file-20250301143929796.png" alt="" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2025/03/01/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%85%A5%E9%97%A8/unity%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E9%A1%</summary>
      
    
    
    
    <category term="游戏引擎" scheme="http://example.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/"/>
    
    <category term="unity" scheme="http://example.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/"/>
    
    <category term="unity入门" scheme="http://example.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%85%A5%E9%97%A8/"/>
    
    <category term="unity入门实践项目" scheme="http://example.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%85%A5%E9%97%A8/unity%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="游戏引擎" scheme="http://example.com/tags/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/"/>
    
    <category term="unity" scheme="http://example.com/tags/unity/"/>
    
    <category term="unity入门" scheme="http://example.com/tags/unity%E5%85%A5%E9%97%A8/"/>
    
    <category term="unity入门实践项目" scheme="http://example.com/tags/unity%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>泛型委托和泛型接口の协变和逆变</title>
    <link href="http://example.com/2025/03/01/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Csharp/%E6%B3%9B%E5%9E%8B%E5%A7%94%E6%89%98%E5%92%8C%E6%B3%9B%E5%9E%8B%E6%8E%A5%E5%8F%A3%E3%81%AE%E5%8D%8F%E5%8F%98%E5%92%8C%E9%80%86%E5%8F%98/"/>
    <id>http://example.com/2025/03/01/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Csharp/%E6%B3%9B%E5%9E%8B%E5%A7%94%E6%89%98%E5%92%8C%E6%B3%9B%E5%9E%8B%E6%8E%A5%E5%8F%A3%E3%81%AE%E5%8D%8F%E5%8F%98%E5%92%8C%E9%80%86%E5%8F%98/</id>
    <published>2025-03-01T02:26:27.000Z</published>
    <updated>2025-03-01T06:36:44.841Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/lemontea/archive/2013/02/17/2915065.html">逆变与协变详解 - zhangweiwen - 博客园 (cnblogs.com)</a></p><p>协变和逆变是用来修饰泛型类型参数T的<br />协变：out   表明修饰的T只能作为<strong>返回值</strong>来使用<br />逆变：in      表明修饰的T只能作为<strong>参数</strong>来使j用<br />只有<strong>泛型接口</strong>和<strong>泛型委托</strong>能使用</p><h1 id="协变foo父类-foo子类"><a class="markdownIt-Anchor" href="#协变foo父类-foo子类"></a> 协变（Foo&lt;父类&gt; = Foo&lt;子类&gt; ）</h1><p>典型场景：<strong>生产者（输出数据），如返回值、只读集合。</strong></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//泛型委托：</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> T <span class="title">MyFuncA</span>&lt;<span class="title">T</span>&gt;()</span>;<span class="comment">//不支持逆变与协变</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> T <span class="title">MyFuncB</span>&lt;<span class="keyword">out</span> <span class="title">T</span>&gt;()</span>;<span class="comment">//支持协变</span></span><br><span class="line"> </span><br><span class="line">MyFuncA&lt;<span class="built_in">object</span>&gt; funcAObject = <span class="literal">null</span>;</span><br><span class="line">MyFuncA&lt;<span class="built_in">string</span>&gt; funcAString = <span class="literal">null</span>;</span><br><span class="line">MyFuncB&lt;<span class="built_in">object</span>&gt; funcBObject = <span class="literal">null</span>;</span><br><span class="line">MyFuncB&lt;<span class="built_in">string</span>&gt; funcBString = <span class="literal">null</span>;</span><br><span class="line">MyFuncB&lt;<span class="built_in">int</span>&gt; funcBInt = <span class="literal">null</span>;</span><br><span class="line"> </span><br><span class="line">funcAObject = funcAString;<span class="comment">//编译失败，MyFuncA不支持逆变与协变</span></span><br><span class="line">funcBObject = funcBString;<span class="comment">//变了，协变</span></span><br><span class="line">funcBObject = funcBInt;<span class="comment">//编译失败，值类型不参与协变或逆变</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//泛型接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IFlyA</span>&lt;<span class="title">T</span>&gt; &#123; &#125;<span class="comment">//不支持逆变与协变</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IFlyB</span>&lt;<span class="keyword">out</span> <span class="title">T</span>&gt; &#123; &#125;<span class="comment">//支持协变</span></span><br><span class="line"> </span><br><span class="line">IFlyA&lt;<span class="built_in">object</span>&gt; flyAObject = <span class="literal">null</span>;</span><br><span class="line">IFlyA&lt;<span class="built_in">string</span>&gt; flyAString = <span class="literal">null</span>;</span><br><span class="line">IFlyB&lt;<span class="built_in">object</span>&gt; flyBObject = <span class="literal">null</span>;</span><br><span class="line">IFlyB&lt;<span class="built_in">string</span>&gt; flyBString = <span class="literal">null</span>;</span><br><span class="line">IFlyB&lt;<span class="built_in">int</span>&gt; flyBInt = <span class="literal">null</span>;</span><br><span class="line"> </span><br><span class="line">flyAObject = flyAString;<span class="comment">//编译失败，IFlyA不支持逆变与协变</span></span><br><span class="line">flyBObject = flyBString;<span class="comment">//变了，协变</span></span><br><span class="line">flyBObject = flyBInt;<span class="comment">//编译失败，值类型不参与协变或逆变</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//数组：</span></span><br><span class="line"><span class="built_in">string</span>[] strings = <span class="keyword">new</span> <span class="built_in">string</span>[] &#123; <span class="string">&quot;string&quot;</span> &#125;;</span><br><span class="line"><span class="built_in">object</span>[] objects = strings;</span><br></pre></td></tr></table></figure><h1 id="逆变foo子类-foo父类"><a class="markdownIt-Anchor" href="#逆变foo子类-foo父类"></a> 逆变（Foo&lt;子类&gt; = Foo&lt;父类&gt;）</h1><p>典型场景：<strong>消费者（输入数据），如函数参数、写入操作。</strong></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">MyActionA</span>&lt;<span class="title">T</span>&gt;(<span class="params">T param</span>)</span>;<span class="comment">//不支持逆变与协变</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">MyActionB</span>&lt;<span class="keyword">in</span> <span class="title">T</span>&gt;(<span class="params">T param</span>)</span>;<span class="comment">//支持逆变</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IPlayA</span>&lt;<span class="title">T</span>&gt; &#123; &#125;<span class="comment">//不支持逆变与协变</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IPlayB</span>&lt;<span class="keyword">in</span> <span class="title">T</span>&gt; &#123; &#125;<span class="comment">//支持逆变</span></span><br><span class="line"> </span><br><span class="line">MyActionA&lt;<span class="built_in">object</span>&gt; actionAObject = <span class="literal">null</span>;</span><br><span class="line">MyActionA&lt;<span class="built_in">string</span>&gt; actionAString = <span class="literal">null</span>;</span><br><span class="line">MyActionB&lt;<span class="built_in">object</span>&gt; actionBObject = <span class="literal">null</span>;</span><br><span class="line">MyActionB&lt;<span class="built_in">string</span>&gt; actionBString = <span class="literal">null</span>;</span><br><span class="line">actionAString = actionAObject;<span class="comment">//MyActionA不支持逆变与协变,编译失败</span></span><br><span class="line">actionBString = actionBObject;<span class="comment">//变了，逆变</span></span><br><span class="line"> </span><br><span class="line">IPlayA&lt;<span class="built_in">object</span>&gt; playAObject = <span class="literal">null</span>;</span><br><span class="line">IPlayA&lt;<span class="built_in">string</span>&gt; playAString = <span class="literal">null</span>;</span><br><span class="line">IPlayB&lt;<span class="built_in">object</span>&gt; playBObject = <span class="literal">null</span>;</span><br><span class="line">IPlayB&lt;<span class="built_in">string</span>&gt; playBString = <span class="literal">null</span>;</span><br><span class="line">playAString = playAObject;<span class="comment">//IPlayA不支持逆变与协变,编译失败</span></span><br><span class="line">playBString = playBObject;<span class="comment">//变了，逆变</span></span><br></pre></td></tr></table></figure><h1 id="注意"><a class="markdownIt-Anchor" href="#注意"></a> <strong>注意:</strong></h1><ul><li>当前仅支持接口和委托的逆变与协变 ，不支持类和方法。但数组也有协变性。</li><li>值类型不参与逆变与协变。</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">Base</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">T <span class="title">Test</span>(<span class="params">T param</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Sub</span>&lt;<span class="title">T</span>&gt; : <span class="title">Base</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">Test</span>(<span class="params">T param</span>)</span> &#123; <span class="keyword">return</span> <span class="literal">default</span>(T); &#125;</span><br><span class="line">&#125;</span><br><span class="line">Base&lt;<span class="built_in">string</span>&gt; b = <span class="keyword">new</span> Sub&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">b.Test(<span class="string">&quot;你好&quot;</span>);</span><br></pre></td></tr></table></figure><p>在上面的例子中，b里面的实例是<code>Sub&lt;string&gt;</code> <code>b.Test(&quot;你好&quot;)</code>会把参数 “你好” 传入到Sub里面执行方法<br /><img src="/2025/03/01/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Csharp/%E6%B3%9B%E5%9E%8B%E5%A7%94%E6%89%98%E5%92%8C%E6%B3%9B%E5%9E%8B%E6%8E%A5%E5%8F%A3%E3%81%AE%E5%8D%8F%E5%8F%98%E5%92%8C%E9%80%86%E5%8F%98/file-20250301104738051.png" alt="" /></p><p><strong>即调用父类的方法，其实实际是调用子类的方法。</strong><br />可以看到，这个方法能够安全的调用，需要两个条件：</p><ol><li>变式（父）的方法参数能安全转为原式（子）的参数；</li><li>原式（子）的返回值能安全的转为变式的返回值。</li></ol><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Base&lt;<span class="built_in">object</span>&gt; BaseObject = <span class="literal">null</span>;</span><br><span class="line">Base&lt;<span class="built_in">string</span>&gt; BaseString = <span class="literal">null</span>;</span><br><span class="line">BaseObject = BaseString;<span class="comment">//编译失败</span></span><br><span class="line">BaseObject.Test(<span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure><p>这里的“实际流程”如下，可以看到，参数那里是object是不能安全转换为string，所以编译失败：<br /><img src="/2025/03/01/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Csharp/%E6%B3%9B%E5%9E%8B%E5%A7%94%E6%89%98%E5%92%8C%E6%B3%9B%E5%9E%8B%E6%8E%A5%E5%8F%A3%E3%81%AE%E5%8D%8F%E5%8F%98%E5%92%8C%E9%80%86%E5%8F%98/file-20250301105137915.png" alt="" /></p><p>看到这里如果都明白的话，我们不难得到逆变与协变的”实际流程图”（记住，它们是有in/out限制的）:<br /><img src="/2025/03/01/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Csharp/%E6%B3%9B%E5%9E%8B%E5%A7%94%E6%89%98%E5%92%8C%E6%B3%9B%E5%9E%8B%E6%8E%A5%E5%8F%A3%E3%81%AE%E5%8D%8F%E5%8F%98%E5%92%8C%E9%80%86%E5%8F%98/file-20250301105254234.png" alt="" /></p><h1 id="稍微难一点的问题"><a class="markdownIt-Anchor" href="#稍微难一点的问题"></a> 稍微难一点的问题</h1><p>下面哪个正确？</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IBar</span>&lt;<span class="keyword">in</span> <span class="title">T</span>&gt; &#123; &#125;</span><br><span class="line"><span class="comment">//应该是in</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IFoo</span>&lt;<span class="keyword">in</span> <span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Test</span>(<span class="params">IBar&lt;T&gt; bar</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//还是out</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IFoo</span>&lt;<span class="keyword">out</span> <span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Test</span>(<span class="params">IBar&lt;T&gt; bar</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答案是，如果是in的话，会编译失败，out才正确（当然不要泛型修饰符也能通过编译，但IFoo就没有协变能力了）。<br />这里的意思就是说，一个有协变（逆变）能力的泛型（IBar），作为另一个泛型（IFoo）的参数时，影响到了它（IFoo）的泛型的定义。乍一看以为是in的其中一个陷阱是T是在Test方法的参数里的，所以以为是in。但<strong>这里Test的参数根本不是T，而是<code>IBar&lt;T&gt;</code></strong>。</p><p><img src="/2025/03/01/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Csharp/%E6%B3%9B%E5%9E%8B%E5%A7%94%E6%89%98%E5%92%8C%E6%B3%9B%E5%9E%8B%E6%8E%A5%E5%8F%A3%E3%81%AE%E5%8D%8F%E5%8F%98%E5%92%8C%E9%80%86%E5%8F%98/file-20250301105647504.png" alt="" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/lemontea/archive/2013/02/17/2915065.html&quot;&gt;逆变与协变详解 - zhangweiwen - 博客园 (cnblogs.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;协变和逆变是用来修</summary>
      
    
    
    
    <category term="编程语言" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Csharp" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Csharp/"/>
    
    
    <category term="编程语言" scheme="http://example.com/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Csharp" scheme="http://example.com/tags/Csharp/"/>
    
  </entry>
  
  <entry>
    <title>csharp事件</title>
    <link href="http://example.com/2025/02/28/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Csharp/csharp%E4%BA%8B%E4%BB%B6/"/>
    <id>http://example.com/2025/02/28/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Csharp/csharp%E4%BA%8B%E4%BB%B6/</id>
    <published>2025-02-28T11:31:10.000Z</published>
    <updated>2025-03-01T03:26:04.293Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是事件"><a class="markdownIt-Anchor" href="#什么是事件"></a> <strong>什么是事件？</strong></h1><p>事件的核心是：<strong>当某件事发生时，自动通知所有关心它的人</strong>。<br />在 C# 中，事件是一种机制，允许一个对象（发布者）在特定动作发生时，通知其他对象（订阅者）执行某些代码。</p><h1 id="事件的核心三要素"><a class="markdownIt-Anchor" href="#事件的核心三要素"></a> <strong>事件的核心三要素</strong></h1><ol><li><strong>发布者（Publisher）</strong>：定义事件并触发它</li><li><strong>订阅者（Subscriber）</strong>：注册事件处理方法</li><li><strong>事件处理方法（Handler）</strong>：当事件发生时执行的代码</li></ol><h1 id="游戏开发高频场景"><a class="markdownIt-Anchor" href="#游戏开发高频场景"></a> <strong>游戏开发高频场景</strong></h1><table><thead><tr><th><strong>场景</strong></th><th><strong>事件用法</strong></th><th><strong>代码灵魂示例</strong></th></tr></thead><tbody><tr><td><strong>角色受伤</strong></td><td>触发UI血条更新、音效、伤害数字</td><td><code>player.OnHurt += UpdateHealthBar;</code></td></tr><tr><td><strong>敌人死亡</strong></td><td>触发掉落物品、任务进度更新、成就解锁</td><td><code>enemy.OnDeath += DropLoot;</code></td></tr><tr><td><strong>技能释放</strong></td><td>触发特效、冷却计时、连击计数</td><td><code>skill.OnCast += PlayVFX;</code></td></tr><tr><td><strong>游戏状态切换</strong></td><td>暂停/继续、关卡加载完成、游戏结束</td><td><code>GameManager.OnPause += FreezeEnemies;</code></td></tr><tr><td><strong>UI交互</strong></td><td>按钮点击、菜单打开/关闭、道具拖动</td><td><code>button.OnClick += OpenInventory;</code></td></tr></tbody></table><h1 id="代码示例"><a class="markdownIt-Anchor" href="#代码示例"></a> 代码示例</h1><p><strong>角色受伤</strong>触发UI血条更新、音效、伤害数字</p><h2 id="第一步定义事件参数类传递伤害值"><a class="markdownIt-Anchor" href="#第一步定义事件参数类传递伤害值"></a> 第一步：定义事件参数类（传递伤害值）</h2><p><strong>为什么事件参数要继承 <code>EventArgs</code>？</strong></p><ul><li>这是一个约定，保持代码统一性。</li><li>如果需要传递数据，推荐使用自定义的 <code>EventArgs</code> 子类。</li><li><strong>EventArgs 作用</strong>：<br />通过自定义参数类，把伤害值传递给所有监听者，避免每个系统单独查询角色状态</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DamageEventArgs</span> : <span class="title">EventArgs</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Damage &#123; <span class="keyword">get</span>; &#125; <span class="comment">// 需要传递的伤害值</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DamageEventArgs</span>(<span class="params"><span class="built_in">int</span> damage</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Damage = damage;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第二步创建角色类事件发布者"><a class="markdownIt-Anchor" href="#第二步创建角色类事件发布者"></a> 第二步：创建角色类（事件发布者）</h2><p><strong><code>EventHandler&lt;T&gt;</code> 委托</strong></p><ul><li>是 .NET 内置的泛型委托，无需自己定义。</li><li>签名：<code>void EventHandler&lt;TEventArgs&gt;(object sender, TEventArgs e)</code>。</li><li><code>sender</code>：触发事件的对象（通常是发布者自己）。</li><li><code>e</code>：事件参数（传递额外数据）。</li><li>事件名称以 <code>On</code> 开头（如 <code>OnClick</code>）。</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Character</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 声明事件（使用自定义的EventArgs）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> EventHandler&lt;DamageEventArgs&gt; Damaged;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TakeDamage</span>(<span class="params"><span class="built_in">int</span> damage</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 触发事件的通用写法</span></span><br><span class="line">        OnDamaged(<span class="keyword">new</span> DamageEventArgs(damage));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 触发事件</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnDamaged</span>(<span class="params">DamageEventArgs e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Damaged?.Invoke(<span class="keyword">this</span>, e);  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第三步创建各种事件订阅者"><a class="markdownIt-Anchor" href="#第三步创建各种事件订阅者"></a> 第三步：创建各种事件订阅者</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UI血条控制器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UIHealthBar</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 别人sender发来通知，并携带了e的参数，你要做的事如下： 更新血条</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnCharacterDamaged</span>(<span class="params"><span class="built_in">object</span> sender, DamageEventArgs e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        UpdateHealthBar(e.Damage);</span><br><span class="line">        Debug.Log(<span class="string">$&quot;血条更新：减少<span class="subst">&#123;e.Damage&#125;</span>HP&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">UpdateHealthBar</span>(<span class="params"><span class="built_in">int</span> damage</span>)</span> &#123; <span class="comment">/* 实际血条逻辑 */</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 音效系统</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SoundSystem</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 别人sender发来通知，并携带了e的参数，你要做的事如下： 播放受伤音效</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PlayHurtSound</span>(<span class="params"><span class="built_in">object</span> sender, DamageEventArgs e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Audio.Play(<span class="string">&quot;受伤音效&quot;</span>);</span><br><span class="line">        Debug.Log(<span class="string">&quot;播放受伤音效&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 伤害数字系统</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DamageNumbers</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 别人sender发来通知，并携带了e的参数，你要做的事如下： 显示上海数字</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowDamagePopup</span>(<span class="params"><span class="built_in">object</span> sender, DamageEventArgs e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        CreateFloatingText(e.Damage);</span><br><span class="line">        Debug.Log(<span class="string">$&quot;显示伤害数字：<span class="subst">&#123;e.Damage&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">CreateFloatingText</span>(<span class="params"><span class="built_in">int</span> damage</span>)</span> &#123; <span class="comment">/* 数字弹窗逻辑 */</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="第四步连接事件订阅"><a class="markdownIt-Anchor" href="#第四步连接事件订阅"></a> 第四步：连接事件订阅</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化所有对象</span></span><br><span class="line">Character player = <span class="keyword">new</span> Character();</span><br><span class="line">UIHealthBar ui = <span class="keyword">new</span> UIHealthBar();</span><br><span class="line">SoundSystem sound = <span class="keyword">new</span> SoundSystem();</span><br><span class="line">DamageNumbers numbers = <span class="keyword">new</span> DamageNumbers();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订阅事件（+= 添加监听）</span></span><br><span class="line">player.Damaged += ui.OnCharacterDamaged;</span><br><span class="line">player.Damaged += sound.PlayHurtSound;</span><br><span class="line">player.Damaged += numbers.ShowDamagePopup;</span><br></pre></td></tr></table></figure><h2 id="第五步触发事件"><a class="markdownIt-Anchor" href="#第五步触发事件"></a> 第五步：触发事件</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当玩家受到伤害时</span></span><br><span class="line">player.TakeDamage(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果：</span></span><br><span class="line"><span class="comment">// 血条更新：减少50HP</span></span><br><span class="line"><span class="comment">// 播放受伤音效</span></span><br><span class="line"><span class="comment">// 显示伤害数字：50</span></span><br></pre></td></tr></table></figure><h1 id="事件与委托的区别"><a class="markdownIt-Anchor" href="#事件与委托的区别"></a> 事件与委托的区别</h1><table><thead><tr><th><strong>特性</strong></th><th><strong>委托（Delegate）</strong></th><th><strong>事件（Event）</strong></th></tr></thead><tbody><tr><td><strong>访问权限</strong></td><td>可直接调用或赋值（<code>=</code>）</td><td>只能在类内部触发（<code>Invoke</code>）</td></tr><tr><td><strong>多播（Multicast）</strong></td><td>支持（<code>+=</code>/<code>-=</code>）</td><td>支持（本质是委托的封装）</td></tr><tr><td><strong>封装性</strong></td><td>低（外部可任意修改委托链）</td><td>高（外部只能订阅/取消订阅）</td></tr><tr><td><strong>典型用途</strong></td><td>通用回调机制</td><td>发布-订阅模式的通知机制</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是事件&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#什么是事件&quot;&gt;&lt;/a&gt; &lt;strong&gt;什么是事件？&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;事件的核心是：&lt;strong&gt;当某件事发生时，自动通知所有关心它的人&lt;/strong&gt;。&lt;</summary>
      
    
    
    
    <category term="编程语言" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Csharp" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Csharp/"/>
    
    
    <category term="编程语言" scheme="http://example.com/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Csharp" scheme="http://example.com/tags/Csharp/"/>
    
  </entry>
  
  <entry>
    <title>csharp表达式体</title>
    <link href="http://example.com/2025/02/28/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Csharp/csharp%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BD%93/"/>
    <id>http://example.com/2025/02/28/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Csharp/csharp%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BD%93/</id>
    <published>2025-02-28T10:17:19.000Z</published>
    <updated>2025-02-28T10:32:37.134Z</updated>
    
    <content type="html"><![CDATA[<p>表达式体（Expression-bodied members）是 C# 6.0 及更高版本引入的特性，它允许用简洁的 <code>=&gt;</code> 语法替代传统代码块，适用于方法、属性、构造函数等成员。</p><p><strong>注意</strong>：<br /><strong><a href="/2025/02/28/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Csharp/csharp%E7%9A%84Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/" title="csharp的Lambda表达式">csharp的Lambda表达式</a>（核心是创建匿名函数）</strong><br /><strong>表达式体成员（核心是简写方法体）</strong></p><h1 id="综合示例"><a class="markdownIt-Anchor" href="#综合示例"></a> <strong>综合示例</strong></h1><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Calculator</span> &#123;</span><br><span class="line">    <span class="comment">// 只读属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Model =&gt; <span class="string">&quot;Scientific-Calculator-3000&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">Square</span>(<span class="params"><span class="built_in">double</span> x</span>)</span> =&gt; x * x;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 索引器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">double</span>[] _history = <span class="keyword">new</span> <span class="built_in">double</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">double</span> <span class="keyword">this</span>[<span class="built_in">int</span> index] =&gt; _history[index];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Calculator</span>(<span class="params"><span class="built_in">string</span> model</span>)</span> =&gt; Model = model;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 运算符重载</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Calculator <span class="keyword">operator</span> +(Calculator a, Calculator b) =&gt; </span><br><span class="line">        <span class="keyword">new</span> Calculator(<span class="string">$&quot;<span class="subst">&#123;a.Model&#125;</span>+<span class="subst">&#123;b.Model&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="方法methods"><a class="markdownIt-Anchor" href="#方法methods"></a> <strong>方法（Methods）</strong></h1><p>用 <code>=&gt;</code> 替代 <code>&#123;&#125;</code>，适用于单行返回值的方法。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传统写法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Add</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表达式体写法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Add</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span> =&gt; a + b;</span><br></pre></td></tr></table></figure><h1 id="只读属性read-only-properties"><a class="markdownIt-Anchor" href="#只读属性read-only-properties"></a> <strong>只读属性（Read-Only Properties）</strong></h1><p>直接返回计算结果的属性（仅有 <code>get</code> 访问器）。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传统写法</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> FullName &#123;</span><br><span class="line">    <span class="keyword">get</span> &#123; <span class="keyword">return</span> <span class="string">$&quot;<span class="subst">&#123;FirstName&#125;</span> <span class="subst">&#123;LastName&#125;</span>&quot;</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表达式体写法</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> FullName =&gt; <span class="string">$&quot;<span class="subst">&#123;FirstName&#125;</span> <span class="subst">&#123;LastName&#125;</span>&quot;</span>;</span><br></pre></td></tr></table></figure><h1 id="构造函数析构函数c-70"><a class="markdownIt-Anchor" href="#构造函数析构函数c-70"></a> <strong>构造函数/析构函数（C# 7.0+）</strong></h1><p>单行初始化或清理逻辑。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> name</span>)</span> =&gt; Name = name; <span class="comment">// 初始化</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 析构函数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Resource</span> &#123;</span><br><span class="line">    ~Resource() =&gt; Console.WriteLine(<span class="string">&quot;资源已释放&quot;</span>); <span class="comment">// 清理逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="索引器indexers"><a class="markdownIt-Anchor" href="#索引器indexers"></a> <strong>索引器（Indexers）</strong></h1><p>简化索引器的 <code>get</code> 访问器。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">string</span>[] _data = <span class="keyword">new</span> <span class="built_in">string</span>[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传统写法</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> <span class="keyword">this</span>[<span class="built_in">int</span> index] &#123;</span><br><span class="line">    <span class="keyword">get</span> &#123; <span class="keyword">return</span> _data[index]; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表达式体写法</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> <span class="keyword">this</span>[<span class="built_in">int</span> index] =&gt; _data[index];</span><br></pre></td></tr></table></figure><h1 id="属性访问器c-70"><a class="markdownIt-Anchor" href="#属性访问器c-70"></a> <strong>属性访问器（C# 7.0+）</strong></h1><p>对 <code>get</code> 和 <code>set</code> 访问器分别使用表达式体。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">string</span> _name;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传统写法</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> Name &#123;</span><br><span class="line">    <span class="keyword">get</span> &#123; <span class="keyword">return</span> _name; &#125;</span><br><span class="line">    <span class="keyword">set</span> &#123; _name = <span class="keyword">value</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表达式体写法</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> Name &#123;</span><br><span class="line">    <span class="keyword">get</span> =&gt; _name;</span><br><span class="line">    <span class="keyword">set</span> =&gt; _name = <span class="keyword">value</span> ?? <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="事件访问器c-70"><a class="markdownIt-Anchor" href="#事件访问器c-70"></a> <strong>事件访问器（C# 7.0+）</strong></h1><p>简化事件的 <code>add</code> 和 <code>remove</code> 逻辑。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> EventHandler _myEvent;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传统写法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">event</span> EventHandler MyEvent &#123;</span><br><span class="line">    <span class="keyword">add</span> &#123; _myEvent += <span class="keyword">value</span>; &#125;</span><br><span class="line">    <span class="keyword">remove</span> &#123; _myEvent -= <span class="keyword">value</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表达式体写法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">event</span> EventHandler MyEvent &#123;</span><br><span class="line">    <span class="keyword">add</span> =&gt; _myEvent += <span class="keyword">value</span>;</span><br><span class="line">    <span class="keyword">remove</span> =&gt; _myEvent -= <span class="keyword">value</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="运算符重载operator-overloading"><a class="markdownIt-Anchor" href="#运算符重载operator-overloading"></a> <strong>运算符重载（Operator Overloading）</strong></h1><p>简化运算符的实现。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Vector</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> X &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Y &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Vector</span>(<span class="params"><span class="built_in">int</span> x, <span class="built_in">int</span> y</span>)</span> =&gt; (X, Y) = (x, y);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 传统运算符重载</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Vector <span class="keyword">operator</span> +(Vector a, Vector b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Vector(a.X + b.X, a.Y + b.Y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 表达式体写法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Vector <span class="keyword">operator</span> +(Vector a, Vector b) =&gt; <span class="keyword">new</span>(a.X + b.X, a.Y + b.Y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="throw-表达式c-70"><a class="markdownIt-Anchor" href="#throw-表达式c-70"></a> <strong><code>throw</code> 表达式（C# 7.0+）</strong></h1><p>直接在表达式中抛出异常。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数校验</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">GetName</span>(<span class="params"><span class="built_in">string</span> input</span>)</span> =&gt; </span><br><span class="line">    input ?? <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="keyword">nameof</span>(input));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 替代传统写法：</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">GetName</span>(<span class="params"><span class="built_in">string</span> input</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (input == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="keyword">nameof</span>(input));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> input;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;表达式体（Expression-bodied members）是 C# 6.0 及更高版本引入的特性，它允许用简洁的 &lt;code&gt;=&amp;gt;&lt;/code&gt; 语法替代传统代码块，适用于方法、属性、构造函数等成员。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：&lt;br </summary>
      
    
    
    
    <category term="编程语言" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Csharp" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Csharp/"/>
    
    
    <category term="编程语言" scheme="http://example.com/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Csharp" scheme="http://example.com/tags/Csharp/"/>
    
  </entry>
  
  <entry>
    <title>csharp的Lambda表达式</title>
    <link href="http://example.com/2025/02/28/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Csharp/csharp%E7%9A%84Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://example.com/2025/02/28/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Csharp/csharp%E7%9A%84Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2025-02-28T02:38:33.000Z</published>
    <updated>2025-02-28T10:33:14.120Z</updated>
    
    <content type="html"><![CDATA[<p>在C#中，<strong>Lambda表达式</strong>是一种简洁的<a href="/2025/02/27/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Csharp/csharp%E5%A7%94%E6%89%98/#%E5%8C%BF%E5%90%8D%E6%96%B9%E6%B3%95" title="csharp委托">匿名函数</a>，用于创建委托或表达式树类型。</p><h1 id="lambda表达式的基本形式"><a class="markdownIt-Anchor" href="#lambda表达式的基本形式"></a> <strong>Lambda表达式的基本形式</strong></h1><p>Lambda表达式分为两种形式：</p><p><strong>表达式Lambda</strong><br />仅包含单个表达式，无需大括号，自动返回结果。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(参数列表) =&gt; 表达式</span><br><span class="line"></span><br><span class="line">Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt; square = x =&gt; x * x;</span><br><span class="line">Console.WriteLine(square(<span class="number">5</span>)); <span class="comment">// 输出 25</span></span><br></pre></td></tr></table></figure><p><strong>语句块Lambda</strong><br />包含多行语句，需用大括号包裹，显式使用<code>return</code>（若有返回值）。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(参数列表) =&gt; &#123; </span><br><span class="line">    语句块;</span><br><span class="line">    <span class="keyword">return</span> 结果; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Action&lt;<span class="built_in">string</span>&gt; greet = name =&gt; &#123;</span><br><span class="line">    <span class="built_in">string</span> message = <span class="string">$&quot;Hello, <span class="subst">&#123;name&#125;</span>!&quot;</span>;</span><br><span class="line">    Console.WriteLine(message);</span><br><span class="line">&#125;;</span><br><span class="line">greet(<span class="string">&quot;Alice&quot;</span>); <span class="comment">// 输出 &quot;Hello, Alice!&quot;</span></span><br></pre></td></tr></table></figure><h1 id="lambda表达式的简写"><a class="markdownIt-Anchor" href="#lambda表达式的简写"></a> Lambda表达式的简写</h1><p>注意和<a href="/2025/02/28/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Csharp/csharp%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BD%93/" title="csharp表达式体">csharp表达式体</a>的区别</p><h2 id="简化1自动类型推断"><a class="markdownIt-Anchor" href="#简化1自动类型推断"></a> <strong>简化1：自动类型推断</strong></h2><p>当委托类型明确时，参数类型可省略：  <code>(int x) =&gt; ...</code> → <code>x =&gt; ...</code></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt; doubler = (x) =&gt; &#123; </span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">2</span>; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="简化2单参数可省略括号"><a class="markdownIt-Anchor" href="#简化2单参数可省略括号"></a> <strong>简化2：单参数可省略括号</strong></h2><p>若只有一个参数，<code>()</code>可省略：  <code>(x) =&gt; ...</code> → <code>x =&gt; ...</code></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt; doubler = x =&gt; &#123; </span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">2</span>; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="简化3单行表达式自动返回"><a class="markdownIt-Anchor" href="#简化3单行表达式自动返回"></a> <strong>简化3：单行表达式自动返回</strong></h2><p>若主体是单行表达式，可省略<code>&#123;&#125;</code>和<code>return</code>：  <code>x =&gt; &#123; return x*2; &#125;</code> → <code>x =&gt; x*2</code></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt; doubler = x =&gt; x * <span class="number">2</span>;</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a class="markdownIt-Anchor" href="#注意事项"></a> <strong>注意事项</strong></h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多参数必须保留括号：</span></span><br><span class="line">Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>, <span class="built_in">int</span>&gt; <span class="keyword">add</span> = (a, b) =&gt; a + b; <span class="comment">// 正确</span></span><br><span class="line">Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>, <span class="built_in">int</span>&gt; <span class="keyword">add</span> = a, b =&gt; a + b;   <span class="comment">// 错误！</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// 无参数时需空括号:</span></span><br><span class="line">Action printHello = () =&gt; Console.WriteLine(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复杂逻辑仍需代码块：</span></span><br><span class="line">Action log = () =&gt; &#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;Start&quot;</span>);</span><br><span class="line">    <span class="comment">// 多行逻辑</span></span><br><span class="line">    Console.WriteLine(<span class="string">&quot;End&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="lambda的常见用途"><a class="markdownIt-Anchor" href="#lambda的常见用途"></a> <strong>Lambda的常见用途</strong></h1><p>委托实例化  和 事件处理</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>, <span class="built_in">int</span>&gt; sum = (a, b) =&gt; a + b;</span><br><span class="line">Action&lt;<span class="built_in">string</span>&gt; log = msg =&gt; Console.WriteLine(msg);</span><br><span class="line">button.Click += (sender, e) =&gt; MessageBox.Show(<span class="string">&quot;Clicked!&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>LINQ查询</strong><br />与LINQ方法结合，实现数据筛选、转换等操作：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt; &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> evenNumbers = numbers.Where(n =&gt; n % <span class="number">2</span> == <span class="number">0</span>); <span class="comment">// 筛选偶数</span></span><br><span class="line"><span class="keyword">var</span> squares = numbers.Select(x =&gt; x * x);         <span class="comment">// 计算平方</span></span><br></pre></td></tr></table></figure><p><strong>表达式树（Expression Trees）</strong><br />将Lambda编译为表达式树，供其他框架（如EF Core）解析：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Expression&lt;Func&lt;<span class="built_in">int</span>, <span class="built_in">bool</span>&gt;&gt; expr = x =&gt; x &gt; <span class="number">5</span>;</span><br></pre></td></tr></table></figure><h1 id="闭包与变量捕获"><a class="markdownIt-Anchor" href="#闭包与变量捕获"></a> <strong>闭包与变量捕获</strong></h1><p><strong>当匿名函数捕获了外部变量时，C# 编译器会自动生成一个隐藏的类（称为“闭包类”），将捕获的变量“打包”到这个类的实例中。这个实例的生命周期会延长，使得闭包可以在后续继续访问这些变量。</strong></p><p><strong>示例 1：基本闭包</strong></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Func&lt;<span class="built_in">int</span>&gt; <span class="title">CreateCounter</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> () =&gt; ++count; <span class="comment">// 闭包捕获了外部变量 count</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> counter = CreateCounter();</span><br><span class="line">Console.WriteLine(counter()); <span class="comment">// 输出 1</span></span><br><span class="line">Console.WriteLine(counter()); <span class="comment">// 输出 2（说明闭包修改并保留了 count 的状态）</span></span><br></pre></td></tr></table></figure><ul><li><strong>现象</strong>：<code>count</code> 本应在 <code>CreateCounter</code> 方法执行完毕后被销毁，但闭包保留了它的状态。</li><li><strong>原理</strong>：编译器生成一个类，将 <code>count</code> 作为该类的字段存储，闭包通过这个类的实例访问 <code>count</code>。</li></ul><p><strong>示例 2：循环中的闭包陷阱</strong></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> actions = <span class="keyword">new</span> List&lt;Action&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    actions.Add(() =&gt; Console.WriteLine(i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> action <span class="keyword">in</span> actions)</span><br><span class="line">&#123;</span><br><span class="line">    action(); <span class="comment">// 输出 3, 3, 3（而非预期的 0, 1, 2）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>问题原因</strong>：所有闭包共享同一个变量 <code>i</code>（在循环结束后，<code>i</code> 的值为 3）。</li><li><strong>解决方案</strong>：在循环内部创建临时变量，让闭包捕获独立的值：</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> current = i; <span class="comment">// 每次循环新建一个临时变量</span></span><br><span class="line">    actions.Add(() =&gt; Console.WriteLine(current)); <span class="comment">// 输出 0, 1, 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在C#中，&lt;strong&gt;Lambda表达式&lt;/strong&gt;是一种简洁的&lt;a href=&quot;/2025/02/27/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Csharp/csharp%E5%A7%94%E6%89%98/#%E5%8C%BF</summary>
      
    
    
    
    <category term="编程语言" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Csharp" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Csharp/"/>
    
    
    <category term="编程语言" scheme="http://example.com/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Csharp" scheme="http://example.com/tags/Csharp/"/>
    
  </entry>
  
  <entry>
    <title>csharp委托</title>
    <link href="http://example.com/2025/02/27/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Csharp/csharp%E5%A7%94%E6%89%98/"/>
    <id>http://example.com/2025/02/27/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Csharp/csharp%E5%A7%94%E6%89%98/</id>
    <published>2025-02-27T14:37:01.000Z</published>
    <updated>2025-03-01T03:21:55.888Z</updated>
    
    <content type="html"><![CDATA[<h1 id="委托基本概念"><a class="markdownIt-Anchor" href="#委托基本概念"></a> 委托基本概念</h1><ul><li><strong>定义</strong>：委托是<strong>类型安全的函数指针</strong>，通过 <code>delegate</code> 关键字声明。（ 委托就是一个用来装函数的类的类型）</li><li><strong>作用</strong>：允许将方法作为参数传递、动态调用多个方法。</li><li><strong>核心特点</strong>：<ul><li>类型安全（编译时检查参数和返回值）。</li><li>支持多播（组合多个方法）。</li><li>可用于异步编程。</li></ul></li></ul><h1 id="委托的声明与使用"><a class="markdownIt-Anchor" href="#委托的声明与使用"></a> <strong>委托的声明与使用</strong></h1><p>写在哪里？<br />可以申明在namespace和class语句块中<br />更多的写在<strong>namespace</strong>中</p><p>委托常用在：</p><ol><li>作为类的成员</li><li>作为函数的参数</li></ol><p><strong>声明委托类型</strong>：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义委托类型，指定方法签名</span></span><br><span class="line"><span class="comment">// MathOperation是一个委托类型，只能引用接受两个 int 参数并返回 string 的方法。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="built_in">string</span> <span class="title">MathOperation</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span>;</span><br></pre></td></tr></table></figure><p><strong>实例化委托</strong>：<br />eg1：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 绑定到具体方法</span></span><br><span class="line">MathOperation <span class="keyword">add</span> = (a, b) =&gt; a + b;</span><br><span class="line">MathOperation multiply = (a, b) =&gt; a * b;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用委托</span></span><br><span class="line"><span class="built_in">int</span> result = <span class="keyword">add</span>(<span class="number">3</span>, <span class="number">5</span>); <span class="comment">// 输出 8</span></span><br></pre></td></tr></table></figure><p>eg2：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="built_in">int</span> <span class="title">Fun</span>(<span class="params"><span class="built_in">int</span> a</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">MyFun1</span>(<span class="params"><span class="built_in">int</span> a</span>) ...</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">MyFun2</span>(<span class="params"><span class="built_in">int</span> a</span>) ...</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">Fun f</span> = MyFun1;</span><br><span class="line"><span class="built_in">int</span> tmp = f.Invoke(<span class="number">666</span>);</span><br><span class="line"><span class="built_in">int</span> tmp = f(<span class="number">666</span>);</span><br></pre></td></tr></table></figure><h1 id="多播委托multicast-delegate"><a class="markdownIt-Anchor" href="#多播委托multicast-delegate"></a> <strong>多播委托（Multicast Delegate）</strong></h1><ul><li><strong>功能</strong>：一个委托实例可绑定多个方法，按顺序执行。</li><li><strong>操作符</strong>：<ul><li><code>+=</code> 添加方法。</li><li><code>-=</code> 移除方法。</li></ul></li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MathOperation <span class="keyword">add</span> = (a, b) =&gt; a + b;</span><br><span class="line">MathOperation multiply = (a, b) =&gt; a * b;</span><br><span class="line">MathOperation operations = <span class="keyword">add</span>;</span><br><span class="line">operations += multiply;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用时会依次执行 add 和 multiply</span></span><br><span class="line"><span class="built_in">int</span> finalResult = operations(<span class="number">3</span>, <span class="number">5</span>); <span class="comment">// 返回 multiply 的结果 15（最后一个方法的返回值）</span></span><br></pre></td></tr></table></figure><ul><li><strong>注意</strong>：返回值通常只保留最后一个方法的返回值，中间结果可能被覆盖。<br />以下是一个示例，演示了如何获取多播委托每一个函数的返回值：</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="built_in">int</span> <span class="title">MyDelegate</span>()</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        MyDelegate myDelegate = Method1;</span><br><span class="line">        myDelegate += Method2;</span><br><span class="line">        myDelegate += Method3;</span><br><span class="line">        <span class="comment">// 获取每一个函数的返回值</span></span><br><span class="line">        Delegate[] delegates = myDelegate.GetInvocationList();</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> del <span class="keyword">in</span> delegates)</span><br><span class="line">        &#123;</span><br><span class="line">            MyDelegate singleDelegate = (MyDelegate)del;</span><br><span class="line">            <span class="built_in">int</span> result = singleDelegate();</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;Method returned: <span class="subst">&#123;result&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">Method1</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Method1&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">Method2</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Method2&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">Method3</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Method3&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="内置泛型委托"><a class="markdownIt-Anchor" href="#内置泛型委托"></a> <strong>内置泛型委托</strong></h1><p><strong><code>Action</code></strong>：无返回值的方法，最多支持 16 个参数。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Action&lt;<span class="built_in">string</span>&gt; log = message =&gt; Console.WriteLine(message);</span><br><span class="line">log(<span class="string">&quot;Hello, Action!&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong><code>Func</code></strong>：有返回值的方法，最后一个类型参数为返回类型。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>, <span class="built_in">string</span>&gt; formatSum = (a, b) =&gt; <span class="string">$&quot;<span class="subst">&#123;a + b&#125;</span>&quot;</span>;</span><br><span class="line">Console.WriteLine(formatSum(<span class="number">3</span>, <span class="number">5</span>)); <span class="comment">// 输出 &quot;8&quot;</span></span><br></pre></td></tr></table></figure><h1 id="匿名方法"><a class="markdownIt-Anchor" href="#匿名方法"></a> <strong>匿名方法</strong></h1><p><strong>匿名函数的使用主要是配合委托和事件进行使用</strong><br />何时使用？</p><ol><li>函数中传递委托参数时</li><li>委托或事件赋值时</li></ol><p>缺点?</p><ol><li>不能删的具体只能无脑null</li></ol><p>eg：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">class</span> <span class="title">Test</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Fun1</span>(<span class="params">Action action</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;需要委托作为参数的函数,使用函数更加方便&quot;</span>);</span><br><span class="line">        action();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Action <span class="title">GetFun</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">delegate</span> ()</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;匿名函数常用作返回值&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">// 匿名函数给委托赋值</span></span><br><span class="line">        Action a = <span class="built_in">delegate</span> ()</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;匿名函数逻辑&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        Test t = <span class="keyword">new</span> Test();</span><br><span class="line">        t.Fun1(a); </span><br><span class="line">        t.GetFun()();</span><br><span class="line">        Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt; b = <span class="built_in">delegate</span> (<span class="built_in">int</span> a)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;匿名函数的返回值直接返回就行&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="-swig8-"><a class="markdownIt-Anchor" href="#-swig8-"></a> <a href="/2025/02/28/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Csharp/csharp%E4%BA%8B%E4%BB%B6/" title="csharp事件">csharp事件</a></h1><h1 id="-swig9-"><a class="markdownIt-Anchor" href="#-swig9-"></a> <a href="/2025/02/28/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Csharp/csharp%E7%9A%84Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/" title="csharp的Lambda表达式">csharp的Lambda表达式</a></h1><h1 id="-swig10-"><a class="markdownIt-Anchor" href="#-swig10-"></a> <a href="/2025/03/01/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Csharp/%E6%B3%9B%E5%9E%8B%E5%A7%94%E6%89%98%E5%92%8C%E6%B3%9B%E5%9E%8B%E6%8E%A5%E5%8F%A3%E3%81%AE%E5%8D%8F%E5%8F%98%E5%92%8C%E9%80%86%E5%8F%98/" title="泛型委托和泛型接口の协变和逆变">泛型委托和泛型接口の协变和逆变</a></h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;委托基本概念&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#委托基本概念&quot;&gt;&lt;/a&gt; 委托基本概念&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：委托是&lt;strong&gt;类型安全的函数指针&lt;/strong&gt;，通过 &lt;</summary>
      
    
    
    
    <category term="编程语言" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Csharp" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Csharp/"/>
    
    
    <category term="编程语言" scheme="http://example.com/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Csharp" scheme="http://example.com/tags/Csharp/"/>
    
  </entry>
  
  <entry>
    <title>3.Unity随机数和UnityAction委托</title>
    <link href="http://example.com/2025/02/27/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%85%A5%E9%97%A8/unity%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/3.Unity%E9%9A%8F%E6%9C%BA%E6%95%B0%E5%92%8CUnityAction%E5%A7%94%E6%89%98/"/>
    <id>http://example.com/2025/02/27/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%85%A5%E9%97%A8/unity%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/3.Unity%E9%9A%8F%E6%9C%BA%E6%95%B0%E5%92%8CUnityAction%E5%A7%94%E6%89%98/</id>
    <published>2025-02-27T13:44:46.000Z</published>
    <updated>2025-02-28T10:39:30.253Z</updated>
    
    <content type="html"><![CDATA[<h1 id="unity当中的随机数用法"><a class="markdownIt-Anchor" href="#unity当中的随机数用法"></a> unity当中的随机数用法</h1><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> randomNum = Random.Range(<span class="number">0</span>, <span class="number">100</span>); <span class="comment">// [0, 100)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// float重载，规则是左右都包含</span></span><br><span class="line"><span class="built_in">float</span> randomNumF = Random.Range(<span class="number">1.1f</span>, <span class="number">99.9f</span>); <span class="comment">// [1.1~99.9f]</span></span><br></pre></td></tr></table></figure><h1 id="csharp中的随机数"><a class="markdownIt-Anchor" href="#csharp中的随机数"></a> CSharp中的随机数</h1><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 左包含，右不包含</span></span><br><span class="line">System.Random random = <span class="keyword">new</span> System.Random();</span><br><span class="line">random.Next(<span class="number">0</span>, <span class="number">100</span>);    <span class="comment">// [0, 100)</span></span><br></pre></td></tr></table></figure><h1 id="unity的委托"><a class="markdownIt-Anchor" href="#unity的委托"></a> unity的委托</h1><p>要引用<code>using UnityEngine.Events;</code>命名空间</p><ul><li>无参无返回的委托</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UnityAction uac = () =&gt;</span><br><span class="line">&#123;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>string作为参数无返回值的委托</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UnityAction&lt;<span class="built_in">string</span>&gt; uac1 = (s) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="-swig8-"><a class="markdownIt-Anchor" href="#-swig8-"></a> <a href="/2025/02/27/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Csharp/csharp%E5%A7%94%E6%89%98/" title="csharp委托">csharp委托</a></h1><ul><li>无参无返回的委托</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.Action ac = () =&gt;</span><br><span class="line">&#123;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>int和float作为参数无返回值的委托</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.Action&lt;<span class="built_in">int</span>, <span class="built_in">float</span>&gt; ac2 = (i, f) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>无参int返回值的委托</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.Func&lt;<span class="built_in">int</span>&gt; fun1 = () =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>int作为参数string作为返回值的委托</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.Func&lt;<span class="built_in">int</span>, <span class="built_in">string</span>&gt; fun2 = (i) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;unity当中的随机数用法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#unity当中的随机数用法&quot;&gt;&lt;/a&gt; unity当中的随机数用法&lt;/h1&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t</summary>
      
    
    
    
    <category term="游戏引擎" scheme="http://example.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/"/>
    
    <category term="unity" scheme="http://example.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/"/>
    
    <category term="unity入门" scheme="http://example.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%85%A5%E9%97%A8/"/>
    
    <category term="unity入门实践项目" scheme="http://example.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%85%A5%E9%97%A8/unity%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="游戏引擎" scheme="http://example.com/tags/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/"/>
    
    <category term="unity" scheme="http://example.com/tags/unity/"/>
    
    <category term="unity入门" scheme="http://example.com/tags/unity%E5%85%A5%E9%97%A8/"/>
    
    <category term="unity入门实践项目" scheme="http://example.com/tags/unity%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>2.鼠标的隐藏锁定图片</title>
    <link href="http://example.com/2025/02/27/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%85%A5%E9%97%A8/unity%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/2.Cursor%E9%BC%A0%E6%A0%87%E7%9A%84%E9%9A%90%E8%97%8F%E9%94%81%E5%AE%9A%E5%9B%BE%E7%89%87/"/>
    <id>http://example.com/2025/02/27/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%85%A5%E9%97%A8/unity%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/2.Cursor%E9%BC%A0%E6%A0%87%E7%9A%84%E9%9A%90%E8%97%8F%E9%94%81%E5%AE%9A%E5%9B%BE%E7%89%87/</id>
    <published>2025-02-27T13:35:15.000Z</published>
    <updated>2025-02-28T07:30:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="cursorvisible静态变量-设置鼠标显隐"><a class="markdownIt-Anchor" href="#cursorvisible静态变量-设置鼠标显隐"></a> Cursor.visible静态变量 设置鼠标显隐</h1><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 隐藏鼠标</span></span><br><span class="line">Cursor.visible = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><h1 id="cursorlockstate静态变量-设置鼠标锁定状态"><a class="markdownIt-Anchor" href="#cursorlockstate静态变量-设置鼠标锁定状态"></a> Cursor.lockState静态变量 设置鼠标锁定状态</h1><p>确定硬件指针是否锁定到视图的中心、受限于窗口或者根本不受限制。</p><ul><li>None: 不锁定鼠标</li><li>Locked: 锁定鼠标。<strong>鼠标会被限制在屏幕的中心点，不仅会被锁定，还会被隐藏</strong>。可以通过按下ESC键摆脱编辑模式下的锁定。要是回到Game窗口点击鼠标会被再次锁定隐藏。</li><li>Confined: <strong>限制鼠标在Game窗口范围内</strong>。可以通过按下ESC键摆脱编辑模式下的限制。要是回到Game窗口点击鼠标会被再次限制。</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cursor.lockState = CursorLockMode.Confined;</span><br></pre></td></tr></table></figure><h1 id="cursorsetcursor静态方法-设置鼠标图片"><a class="markdownIt-Anchor" href="#cursorsetcursor静态方法-设置鼠标图片"></a> Cursor.SetCursor静态方法 设置鼠标图片</h1><p>将鼠标光标设置为给定纹理。<br />参数一：光标图片<br />参数二：偏移位置，相对图片左上角<br />参数三：平台支持的光标模式（硬件或软件）（一般选CursorMode.Auto）</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Texture2D cursorTexture2D;</span><br><span class="line"></span><br><span class="line">Cursor.SetCursor(cursorTexture2D, Vector2.zero, CursorMode.Auto);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;cursorvisible静态变量-设置鼠标显隐&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#cursorvisible静态变量-设置鼠标显隐&quot;&gt;&lt;/a&gt; Cursor.visible静态变量 设置鼠标显隐&lt;/h1&gt;
&lt;figure </summary>
      
    
    
    
    <category term="游戏引擎" scheme="http://example.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/"/>
    
    <category term="unity" scheme="http://example.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/"/>
    
    <category term="unity入门" scheme="http://example.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%85%A5%E9%97%A8/"/>
    
    <category term="unity入门实践项目" scheme="http://example.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%85%A5%E9%97%A8/unity%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="游戏引擎" scheme="http://example.com/tags/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/"/>
    
    <category term="unity" scheme="http://example.com/tags/unity/"/>
    
    <category term="unity入门" scheme="http://example.com/tags/unity%E5%85%A5%E9%97%A8/"/>
    
    <category term="unity入门实践项目" scheme="http://example.com/tags/unity%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>1.场景切换和游戏退出</title>
    <link href="http://example.com/2025/02/27/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%85%A5%E9%97%A8/unity%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/1.%E5%9C%BA%E6%99%AF%E5%88%87%E6%8D%A2%E5%92%8C%E6%B8%B8%E6%88%8F%E9%80%80%E5%87%BA/"/>
    <id>http://example.com/2025/02/27/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%85%A5%E9%97%A8/unity%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/1.%E5%9C%BA%E6%99%AF%E5%88%87%E6%8D%A2%E5%92%8C%E6%B8%B8%E6%88%8F%E9%80%80%E5%87%BA/</id>
    <published>2025-02-27T13:28:07.000Z</published>
    <updated>2025-02-28T07:30:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="场景切换"><a class="markdownIt-Anchor" href="#场景切换"></a> 场景切换</h1><p>按照 Build Settings 中的名称或索引加载场景。要引入<code>using UnityEngine.SceneManagement;</code>命名空间。<br />直接写代码切换场景可能会报错。注意: <strong>切换必须要将场景拖到Unity 中的file-BuildSetting的Scene列表中</strong><br />然后可用用代码来切换<br /><img src="/2025/02/27/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%85%A5%E9%97%A8/unity%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/1.%E5%9C%BA%E6%99%AF%E5%88%87%E6%8D%A2%E5%92%8C%E6%B8%B8%E6%88%8F%E9%80%80%E5%87%BA/file-20250227213144486.png" alt="" /></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ScenneManager.Load(<span class="string">&quot;scenename&quot;</span>);</span><br></pre></td></tr></table></figure><h1 id="退出游戏"><a class="markdownIt-Anchor" href="#退出游戏"></a> 退出游戏</h1><p>退出播放器应用程序。执行这句代码就会退出游戏。但是在编辑模式下没有作用，一定是发布游戏过后才有用。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 退出游戏</span></span><br><span class="line">Application.Quit();</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;场景切换&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#场景切换&quot;&gt;&lt;/a&gt; 场景切换&lt;/h1&gt;
&lt;p&gt;按照 Build Settings 中的名称或索引加载场景。要引入&lt;code&gt;using UnityEngine.SceneMana</summary>
      
    
    
    
    <category term="游戏引擎" scheme="http://example.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/"/>
    
    <category term="unity" scheme="http://example.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/"/>
    
    <category term="unity入门" scheme="http://example.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%85%A5%E9%97%A8/"/>
    
    <category term="unity入门实践项目" scheme="http://example.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%85%A5%E9%97%A8/unity%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="游戏引擎" scheme="http://example.com/tags/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/"/>
    
    <category term="unity" scheme="http://example.com/tags/unity/"/>
    
    <category term="unity入门" scheme="http://example.com/tags/unity%E5%85%A5%E9%97%A8/"/>
    
    <category term="unity入门实践项目" scheme="http://example.com/tags/unity%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>12.自定义控件拼面板</title>
    <link href="http://example.com/2025/02/27/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/12.%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%E6%8B%BC%E9%9D%A2%E6%9D%BF/"/>
    <id>http://example.com/2025/02/27/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/12.%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%E6%8B%BC%E9%9D%A2%E6%9D%BF/</id>
    <published>2025-02-27T09:11:12.000Z</published>
    <updated>2025-02-28T07:30:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>先拼面板<br /><img src="/2025/02/27/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/12.%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%E6%8B%BC%E9%9D%A2%E6%9D%BF/file-20250227171203497.png" alt="" /></p><h1 id="testbeginpanelcs"><a class="markdownIt-Anchor" href="#testbeginpanelcs"></a> TestBeginPanel.cs</h1><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BeginPanel</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> CustomGUIButton btnBegin;</span><br><span class="line">    <span class="keyword">public</span> CustomGUIButton btnEnd;</span><br><span class="line">    <span class="keyword">public</span> CustomGUIButton btnQuit;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        btnBegin.clickEvent += () =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;Begin&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        btnEnd.clickEvent += () =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;End&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        btnQuit.clickEvent += () =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.gameObject.SetActive(<span class="literal">false</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;先拼面板&lt;br /&gt;
&lt;img src=&quot;/2025/02/27/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/12.%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7</summary>
      
    
    
    
    <category term="UI系统" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="GUI" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/GUI/"/>
    
    <category term="GUI实践项目" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="UI系统" scheme="http://example.com/tags/UI%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="GUI" scheme="http://example.com/tags/GUI/"/>
    
    <category term="GUI实践项目" scheme="http://example.com/tags/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>11.自定义图片绘制</title>
    <link href="http://example.com/2025/02/27/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/11.%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9B%BE%E7%89%87%E7%BB%98%E5%88%B6/"/>
    <id>http://example.com/2025/02/27/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/11.%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9B%BE%E7%89%87%E7%BB%98%E5%88%B6/</id>
    <published>2025-02-27T09:01:50.000Z</published>
    <updated>2025-02-28T07:30:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="customguitexturecs"><a class="markdownIt-Anchor" href="#customguitexturecs"></a> CustomGUITexture.cs</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomGUITexture</span> : <span class="title">CustomGUIControl</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 方便外部缩放模式调整</span></span><br><span class="line">    <span class="keyword">public</span> ScaleMode mode = ScaleMode.StretchToFill;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DrawIsOff</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        GUI.DrawTexture(guiPos.Pos, guiContent.image, mode);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DrawIsOn</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        GUI.DrawTexture(guiPos.Pos, guiContent.image, mode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;customguitexturecs&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#customguitexturecs&quot;&gt;&lt;/a&gt; CustomGUITexture.cs&lt;/h1&gt;
&lt;figure class=&quot;highlight c</summary>
      
    
    
    
    <category term="UI系统" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="GUI" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/GUI/"/>
    
    <category term="GUI实践项目" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="UI系统" scheme="http://example.com/tags/UI%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="GUI" scheme="http://example.com/tags/GUI/"/>
    
    <category term="GUI实践项目" scheme="http://example.com/tags/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>10.自定义输入框和拖动条</title>
    <link href="http://example.com/2025/02/27/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/10.%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BE%93%E5%85%A5%E6%A1%86%E5%92%8C%E6%8B%96%E5%8A%A8%E6%9D%A1/"/>
    <id>http://example.com/2025/02/27/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/10.%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BE%93%E5%85%A5%E6%A1%86%E5%92%8C%E6%8B%96%E5%8A%A8%E6%9D%A1/</id>
    <published>2025-02-27T08:49:14.000Z</published>
    <updated>2025-02-28T07:30:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="customguiinputcs"><a class="markdownIt-Anchor" href="#customguiinputcs"></a> CustomGUIInput.cs</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomGUIInput</span> : <span class="title">CustomGUIControl</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 当输入框变化时的事件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> UnityAction&lt;<span class="built_in">string</span>&gt; changeText;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> oldStr = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DrawIsOff</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        guiContent.text = GUI.TextField(guiPos.Pos, guiContent.text);</span><br><span class="line">        <span class="comment">// 当输入框变化时调用的委托函数</span></span><br><span class="line">        <span class="keyword">if</span> (oldStr != guiContent.text)</span><br><span class="line">        &#123;</span><br><span class="line">            changeText?.Invoke(guiContent.text);</span><br><span class="line">            oldStr = guiContent.text;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DrawIsOn</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        guiContent.text = GUI.TextField(guiPos.Pos, guiContent.text, style);</span><br><span class="line">        <span class="keyword">if</span> (oldStr != guiContent.text)</span><br><span class="line">        &#123;</span><br><span class="line">            changeText?.Invoke(guiContent.text);</span><br><span class="line">            oldStr = guiContent.text;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="customguislidecs"><a class="markdownIt-Anchor" href="#customguislidecs"></a> CustomGUISlide.cs</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> E_Slider_Type</span><br><span class="line">&#123;</span><br><span class="line">    Horizontal,</span><br><span class="line">    Vertical,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomGUISlide</span> : <span class="title">CustomGUIControl</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> minValue = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> maxValue = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> nowValue = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> E_Slider_Type sliderType = E_Slider_Type.Horizontal;</span><br><span class="line">    <span class="comment">// 默认的style是条的, 这里还需要滑块的style</span></span><br><span class="line">    <span class="keyword">public</span> GUIStyle styleThumb;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> UnityAction&lt;<span class="built_in">float</span>&gt; changeValue;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> oldValu</span><br><span class="line">    </span><br><span class="line">    e;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DrawIsOff</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span> (sliderType)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> E_Slider_Type.Horizontal:</span><br><span class="line">                nowValue = GUI.HorizontalSlider(guiPos.Pos, nowValue, minValue, maxValue);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> E_Slider_Type.Vertical:</span><br><span class="line">                nowValue = GUI.VerticalSlider(guiPos.Pos, nowValue, minValue, maxValue);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (oldValue != nowValue)</span><br><span class="line">        &#123;</span><br><span class="line">            changeValue?.Invoke(nowValue);</span><br><span class="line">            oldValue = nowValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DrawIsOn</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span> (sliderType)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> E_Slider_Type.Horizontal:</span><br><span class="line">                nowValue = GUI.HorizontalSlider(guiPos.Pos, nowValue, minValue, maxValue, style, styleThumb);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> E_Slider_Type.Vertical:</span><br><span class="line">                nowValue = GUI.VerticalSlider(guiPos.Pos, nowValue, minValue, maxValue, style, styleThumb);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (oldValue != nowValue)</span><br><span class="line">        &#123;</span><br><span class="line">            changeValue?.Invoke(nowValue);</span><br><span class="line">            oldValue = nowValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;customguiinputcs&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#customguiinputcs&quot;&gt;&lt;/a&gt; CustomGUIInput.cs&lt;/h1&gt;
&lt;figure class=&quot;highlight csharp&quot;</summary>
      
    
    
    
    <category term="UI系统" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="GUI" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/GUI/"/>
    
    <category term="GUI实践项目" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="UI系统" scheme="http://example.com/tags/UI%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="GUI" scheme="http://example.com/tags/GUI/"/>
    
    <category term="GUI实践项目" scheme="http://example.com/tags/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>9.自定义单选框</title>
    <link href="http://example.com/2025/02/27/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/9.%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8D%95%E9%80%89%E6%A1%86/"/>
    <id>http://example.com/2025/02/27/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/9.%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8D%95%E9%80%89%E6%A1%86/</id>
    <published>2025-02-27T07:47:17.000Z</published>
    <updated>2025-02-28T07:30:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>回顾闭包<br /><strong>当匿名函数捕获了外部变量时，C# 编译器会自动生成一个隐藏的类（称为“闭包类”），将捕获的变量“打包”到这个类的实例中。这个实例的生命周期会延长，使得闭包可以在后续继续访问这些变量。</strong></p><p><strong>示例 1：基本闭包</strong></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Func&lt;<span class="built_in">int</span>&gt; <span class="title">CreateCounter</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> () =&gt; ++count; <span class="comment">// 闭包捕获了外部变量 count</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> counter = CreateCounter();</span><br><span class="line">Console.WriteLine(counter()); <span class="comment">// 输出 1</span></span><br><span class="line">Console.WriteLine(counter()); <span class="comment">// 输出 2（说明闭包修改并保留了 count 的状态）</span></span><br></pre></td></tr></table></figure><ul><li><strong>现象</strong>：<code>count</code> 本应在 <code>CreateCounter</code> 方法执行完毕后被销毁，但闭包保留了它的状态。</li><li><strong>原理</strong>：编译器生成一个类，将 <code>count</code> 作为该类的字段存储，闭包通过这个类的实例访问 <code>count</code>。</li></ul><p><strong>示例 2：循环中的闭包陷阱</strong></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> actions = <span class="keyword">new</span> List&lt;Action&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    actions.Add(() =&gt; Console.WriteLine(i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> action <span class="keyword">in</span> actions)</span><br><span class="line">&#123;</span><br><span class="line">    action(); <span class="comment">// 输出 3, 3, 3（而非预期的 0, 1, 2）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>问题原因</strong>：所有闭包共享同一个变量 <code>i</code>（在循环结束后，<code>i</code> 的值为 3）。</li><li><strong>解决方案</strong>：在循环内部创建临时变量，让闭包捕获独立的值：</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> current = i; <span class="comment">// 每次循环新建一个临时变量</span></span><br><span class="line">    actions.Add(() =&gt; Console.WriteLine(current)); <span class="comment">// 输出 0, 1, 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="customguitogglegroupcs"><a class="markdownIt-Anchor" href="#customguitogglegroupcs"></a> CustomGUIToggleGroup.cs</h1><p>创建自定义单选框，<strong>添加多选框数组，通过管理多选框实现单选框</strong>，在添加一个记录上一次为true的toggle</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomGUIToggleGroup</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">SerializeField</span>]</span><br><span class="line">    <span class="keyword">private</span> CustomGUIToggle[] _toggles;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CustomGUIToggle _frontTrueToggle；    <span class="comment">// 上一次为true的toggle</span></span><br><span class="line">    <span class="comment">// 注意只有游戏运行才能用</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; _toggles.Length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            CustomGUIToggle tmp = _toggles[i];</span><br><span class="line">            <span class="comment">// 为每个Toggle添加一个一旦其值为true时, 其它Toggle变为false的委托</span></span><br><span class="line">            <span class="comment">// Lambda函数捕获了外部变量（tmp）!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</span></span><br><span class="line">            tmp.changeEvent += (<span class="keyword">value</span>) =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">value</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; _toggles.Length; j++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (tmp != _toggles[j])    <span class="comment">// 只要不是自己</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            _toggles[j].isSel = <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 这里可以记录上一次为true的toggle</span></span><br><span class="line">                    _frontTrueToggle = tmp;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (_frontTrueToggle == tmp)    <span class="comment">// 如果是上一次为true的toggle</span></span><br><span class="line">                &#123;</span><br><span class="line">                    tmp.isSel = <span class="literal">true</span>;    <span class="comment">// 永远保持选中的状态</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;回顾闭包&lt;br /&gt;
&lt;strong&gt;当匿名函数捕获了外部变量时，C# 编译器会自动生成一个隐藏的类（称为“闭包类”），将捕获的变量“打包”到这个类的实例中。这个实例的生命周期会延长，使得闭包可以在后续继续访问这些变量。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例</summary>
      
    
    
    
    <category term="UI系统" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="GUI" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/GUI/"/>
    
    <category term="GUI实践项目" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="UI系统" scheme="http://example.com/tags/UI%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="GUI" scheme="http://example.com/tags/GUI/"/>
    
    <category term="GUI实践项目" scheme="http://example.com/tags/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>8.自定义多选框</title>
    <link href="http://example.com/2025/02/27/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/8.%E8%87%AA%E5%AE%9A%E4%B9%89%E5%A4%9A%E9%80%89%E6%A1%86/"/>
    <id>http://example.com/2025/02/27/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/8.%E8%87%AA%E5%AE%9A%E4%B9%89%E5%A4%9A%E9%80%89%E6%A1%86/</id>
    <published>2025-02-27T07:42:31.000Z</published>
    <updated>2025-02-28T07:30:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="customguitogglecs"><a class="markdownIt-Anchor" href="#customguitogglecs"></a> CustomGUIToggle.cs</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomGUIToggle</span> : <span class="title">CustomGUIControl</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 单选的那个bool</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> isSel;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">bool</span> oldSel;</span><br><span class="line">    <span class="comment">// 当选中时所要执行的事件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> UnityAction&lt;<span class="built_in">bool</span>&gt; changeEvent;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DrawIsOff</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        isSel = GUI.Toggle(guiPos.Pos, isSel, guiContent);</span><br><span class="line">        <span class="comment">// 防止一直true true true一直调用事件执行 </span></span><br><span class="line">        <span class="comment">// 只有当 true 和 false 发生变化的时候才去处理</span></span><br><span class="line">        <span class="keyword">if</span> (isSel != oldSel)</span><br><span class="line">        &#123;</span><br><span class="line">            changeEvent?.Invoke(isSel);</span><br><span class="line">            oldSel = isSel;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DrawIsOn</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        isSel = GUI.Toggle(guiPos.Pos, isSel, guiContent, style);</span><br><span class="line">        <span class="keyword">if</span> (isSel != oldSel)</span><br><span class="line">        &#123;</span><br><span class="line">            changeEvent?.Invoke(isSel);</span><br><span class="line">            oldSel = isSel;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;customguitogglecs&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#customguitogglecs&quot;&gt;&lt;/a&gt; CustomGUIToggle.cs&lt;/h1&gt;
&lt;figure class=&quot;highlight csha</summary>
      
    
    
    
    <category term="UI系统" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="GUI" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/GUI/"/>
    
    <category term="GUI实践项目" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="UI系统" scheme="http://example.com/tags/UI%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="GUI" scheme="http://example.com/tags/GUI/"/>
    
    <category term="GUI实践项目" scheme="http://example.com/tags/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>7.自定义文本和按钮</title>
    <link href="http://example.com/2025/02/27/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/7.%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E6%9C%AC%E5%92%8C%E6%8C%89%E9%92%AE/"/>
    <id>http://example.com/2025/02/27/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/7.%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E6%9C%AC%E5%92%8C%E6%8C%89%E9%92%AE/</id>
    <published>2025-02-27T07:19:01.000Z</published>
    <updated>2025-02-28T07:30:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>创建自定义文本和按钮，将其脚本拖入到空物体上做成预制体</p><h1 id="customguilabelcs"><a class="markdownIt-Anchor" href="#customguilabelcs"></a> CustomGUILabel.cs</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomGUILabel</span> : <span class="title">CustomGUIControl</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DrawIsOff</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        GUI.Label(guiPos.Pos, guiContent);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DrawIsOn</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        GUI.Label(guiPos.Pos, guiContent, style);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="customguibuttoncs"><a class="markdownIt-Anchor" href="#customguibuttoncs"></a> CustomGUIButton.cs</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomGUIButton</span> : <span class="title">CustomGUIControl</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 提供给外部的按钮点击事件, 想要按钮点击后做啥往里加函数就行, Unity自带的事件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> UnityAction clickEvent;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DrawIsOff</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (GUI.Button(guiPos.Pos, guiContent))</span><br><span class="line">        &#123;</span><br><span class="line">            clickEvent?.Invoke();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DrawIsOn</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (GUI.Button(guiPos.Pos, guiContent, style))</span><br><span class="line">        &#123;</span><br><span class="line">            clickEvent?.Invoke();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;创建自定义文本和按钮，将其脚本拖入到空物体上做成预制体&lt;/p&gt;
&lt;h1 id=&quot;customguilabelcs&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#customguilabelcs&quot;&gt;&lt;/a&gt; CustomGUILabel.cs&lt;/h</summary>
      
    
    
    
    <category term="UI系统" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="GUI" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/GUI/"/>
    
    <category term="GUI实践项目" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="UI系统" scheme="http://example.com/tags/UI%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="GUI" scheme="http://example.com/tags/GUI/"/>
    
    <category term="GUI实践项目" scheme="http://example.com/tags/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>6.控件根对象</title>
    <link href="http://example.com/2025/02/27/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/6.%E6%8E%A7%E4%BB%B6%E6%A0%B9%E5%AF%B9%E8%B1%A1/"/>
    <id>http://example.com/2025/02/27/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/6.%E6%8E%A7%E4%BB%B6%E6%A0%B9%E5%AF%B9%E8%B1%A1/</id>
    <published>2025-02-27T07:06:16.000Z</published>
    <updated>2025-02-28T07:30:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解决两个问题"><a class="markdownIt-Anchor" href="#解决两个问题"></a> 解决两个问题</h1><ol><li><strong>所见即所得</strong>（编辑模式下能看到GUI）</li><li><strong>可以控制控件的绘制顺序</strong></li></ol><p><strong>创建所有自定义GUI的根部类,添加ExecuteAlways特性</strong><br />在类名添加<code>ExecuteAlways</code>特性，可以让编辑模式下指定代码运行。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">ExecuteAlways</span>]</span><br><span class="line"><span class="comment">//所有自定义GUI的根部类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomGUIRoot</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在Start方法中获取所有子对象的控件父类脚本</strong></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//通过每一次绘制之前 得到所有子对象控件的 父类脚本</span></span><br><span class="line">    allControls = <span class="keyword">this</span>.GetComponentsInChildren&lt;CustomGUIControl&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>OnGUI</code>方法中按照得到的顺序来绘制每个控件，用控件父类中定义好的绘制方法</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在这同一绘制子对象控件的内容</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnGUI</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//编辑状态下 才会一直执行</span></span><br><span class="line">    <span class="comment">//if (!Application.isPlaying)</span></span><br><span class="line">    <span class="comment">//&#123;</span></span><br><span class="line">    <span class="comment">//这句代码 浪费性能 因为每次 gui都会来获取所有的 控件对应的脚本 所以要在编辑状态下才会一直执行</span></span><br><span class="line">    <span class="comment">//在编辑状态下运行是因为想一直看到控件的移动</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//最后没开启是因为只得了一次子对象的CustomGUIControl 就算子对象被隐藏了也不会重写得CustomGUIControl 会有问题</span></span><br><span class="line">    allControls = <span class="keyword">this</span>.GetComponentsInChildren&lt;CustomGUIControl&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历每一个控件 让其 执行绘制</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; allControls.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        allControls[i].GUIDraw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="customguirootcs"><a class="markdownIt-Anchor" href="#customguirootcs"></a> CustomGUIRoot.cs</h1><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">ExecuteAlways</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomGUIRoot</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> CustomGUIControl[] _customGUIControls;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _customGUIControls = <span class="keyword">this</span>.GetComponentsInChildren&lt;CustomGUIControl&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 统一控制所有子对象挂载的控件的 绘制</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnGUI</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!Application.isPlaying)    <span class="comment">// 这里的条件判断主要是为了性能, 实际运行可能会出错</span></span><br><span class="line">        &#123;</span><br><span class="line">            _customGUIControls = <span class="keyword">this</span>.GetComponentsInChildren&lt;CustomGUIControl&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; _customGUIControls.Length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            _customGUIControls[i].GUIDraw();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;解决两个问题&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#解决两个问题&quot;&gt;&lt;/a&gt; 解决两个问题&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;所见即所得&lt;/strong&gt;（编辑模式下能看到GUI）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可</summary>
      
    
    
    
    <category term="UI系统" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="GUI" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/GUI/"/>
    
    <category term="GUI实践项目" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/GUI/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="UI系统" scheme="http://example.com/tags/UI%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="GUI" scheme="http://example.com/tags/GUI/"/>
    
    <category term="GUI实践项目" scheme="http://example.com/tags/GUI%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
</feed>
