<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>akiraの博客思密达</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2025-03-07T07:17:03.957Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>akira23369</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>4.Panel组件(UIPanel)</title>
    <link href="http://example.com/2025/03/07/UI%E7%B3%BB%E7%BB%9F/NGUI/NGUI%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/4.Panel%E7%BB%84%E4%BB%B6(UIPanel)/"/>
    <id>http://example.com/2025/03/07/UI%E7%B3%BB%E7%BB%9F/NGUI/NGUI%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/4.Panel%E7%BB%84%E4%BB%B6(UIPanel)/</id>
    <published>2025-03-07T06:36:59.000Z</published>
    <updated>2025-03-07T07:17:03.957Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2025/03/07/UI%E7%B3%BB%E7%BB%9F/NGUI/NGUI%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/4.Panel%E7%BB%84%E4%BB%B6(UIPanel)/%E5%8F%82%E6%95%B0%E7%9B%B8%E5%85%B3%201.png" alt="" /></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2025/03/07/UI%E7%B3%BB%E7%BB%9F/NGUI/NGUI%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/4.Panel%E7%BB%84%E4%BB%B6(UIPanel)/%E5%8F%82%E6%</summary>
      
    
    
    
    <category term="UI系统" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="NGUI" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/NGUI/"/>
    
    <category term="NGUI基础知识" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/NGUI/NGUI%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="UI系统" scheme="http://example.com/tags/UI%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="NGUI" scheme="http://example.com/tags/NGUI/"/>
    
    <category term="NGUI基础知识" scheme="http://example.com/tags/NGUI%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>3.Root组件(UIRoot)</title>
    <link href="http://example.com/2025/03/07/UI%E7%B3%BB%E7%BB%9F/NGUI/NGUI%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/3.Root%E7%BB%84%E4%BB%B6(UIRoot)/"/>
    <id>http://example.com/2025/03/07/UI%E7%B3%BB%E7%BB%9F/NGUI/NGUI%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/3.Root%E7%BB%84%E4%BB%B6(UIRoot)/</id>
    <published>2025-03-07T06:12:19.000Z</published>
    <updated>2025-03-07T06:23:04.530Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分辨率相关概念"><a class="markdownIt-Anchor" href="#分辨率相关概念"></a> 分辨率相关概念</h1><p><strong>分辨率</strong><br />屏幕宽高两个方向的像素点<br />比如1920 * 1080<br />宽1920个像素<br />高1080个像素</p><p><strong>像素</strong><br />像素即px<br />是画面中最小的点(单位色块)</p><p><strong>屏幕尺寸</strong><br />屏幕对角线长度</p><p><strong>屏幕比例</strong><br />宽高比<br />PC显示器<br />1920:1080=16:9<br />苹果手机<br />iPhone7,8：1334 * 750 = 16:9<br />iPhone 7,8 Plus：1920 * 1080 = 16:9<br />iPhoneX：2436 * 1125 = 19.5:9<br />iPhone12:2532 * 1170 = 19.5:9<br />目前市面上设备分辨率比例传统的有：</p><ul><li>4:3( ipad )</li><li>16:10</li><li>16:9( 老手机 、电脑显示器 )</li><li>18:9（去掉留海屏幕）</li><li>19.5:9（ 新款手机）</li><li>19.9:9</li></ul><p><strong>dpi</strong><br />像素密度<br />单位面积上有多少个像素点<br />一般指一英寸有多少个像素点</p><h1 id="root根组件的作用"><a class="markdownIt-Anchor" href="#root根组件的作用"></a> Root根组件的作用</h1><ul><li>Root是用于分辨率自适应的根对象，是控制分辨率自适应模式的基础，可以设置基本分辨率，用于设置UI显示区域，并且管理所有UI控件的分辨率自适应</li><li>可以简单理解 它管理一个 UI画布 所有的UI都是显示在这个画布上的，它会管理 UI画布 和 不同屏幕分辨率的 适应关系</li></ul><p>创建Root组件<br />方式1：在Project面板右键中创建<br />方式2：在窗口旁白的NGUI创建</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;分辨率相关概念&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#分辨率相关概念&quot;&gt;&lt;/a&gt; 分辨率相关概念&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;分辨率&lt;/strong&gt;&lt;br /&gt;
屏幕宽高两个方向的像素点&lt;br /&gt;
比如1920 * 10</summary>
      
    
    
    
    <category term="UI系统" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="NGUI" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/NGUI/"/>
    
    <category term="NGUI基础知识" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/NGUI/NGUI%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="UI系统" scheme="http://example.com/tags/UI%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="NGUI" scheme="http://example.com/tags/NGUI/"/>
    
    <category term="NGUI基础知识" scheme="http://example.com/tags/NGUI%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>2.NGUI下载和导入</title>
    <link href="http://example.com/2025/03/07/UI%E7%B3%BB%E7%BB%9F/NGUI/NGUI%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2.NGUI%E4%B8%8B%E8%BD%BD%E5%92%8C%E5%AF%BC%E5%85%A5/"/>
    <id>http://example.com/2025/03/07/UI%E7%B3%BB%E7%BB%9F/NGUI/NGUI%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2.NGUI%E4%B8%8B%E8%BD%BD%E5%92%8C%E5%AF%BC%E5%85%A5/</id>
    <published>2025-03-07T05:49:54.000Z</published>
    <updated>2025-03-07T05:54:52.573Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2025/03/07/UI%E7%B3%BB%E7%BB%9F/NGUI/NGUI%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2.NGUI%E4%B8%8B%E8%BD%BD%E5%92%8C%E5%AF%BC%E5%85%A5/file-20250307135450543.png" alt="" /></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2025/03/07/UI%E7%B3%BB%E7%BB%9F/NGUI/NGUI%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2.NGUI%E4%B8%8B%E8%BD%BD%E5%92%8C%E5%AF%BC%E5%85</summary>
      
    
    
    
    <category term="UI系统" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="NGUI" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/NGUI/"/>
    
    <category term="NGUI基础知识" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/NGUI/NGUI%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="UI系统" scheme="http://example.com/tags/UI%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="NGUI" scheme="http://example.com/tags/NGUI/"/>
    
    <category term="NGUI基础知识" scheme="http://example.com/tags/NGUI%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>2.XMLDataMgr存储读取功能</title>
    <link href="http://example.com/2025/03/07/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/2.XMLDataMgr%E5%AD%98%E5%82%A8%E8%AF%BB%E5%8F%96%E5%8A%9F%E8%83%BD/"/>
    <id>http://example.com/2025/03/07/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/2.XMLDataMgr%E5%AD%98%E5%82%A8%E8%AF%BB%E5%8F%96%E5%8A%9F%E8%83%BD/</id>
    <published>2025-03-07T05:22:34.000Z</published>
    <updated>2025-03-07T05:36:20.092Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">XmlDataMgr</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> XmlDataMgr _instance = <span class="keyword">new</span> XmlDataMgr();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> XmlDataMgr Instance =&gt; _instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">XmlDataMgr</span>()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SaveData</span>(<span class="params"><span class="built_in">object</span> obj, <span class="built_in">string</span> fileName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> path = <span class="string">$&quot;<span class="subst">&#123;Application.persistentDataPath&#125;</span>/<span class="subst">&#123;fileName&#125;</span>.xml&quot;</span>;</span><br><span class="line">        <span class="keyword">using</span> (StreamWriter writer = <span class="keyword">new</span> StreamWriter(path))</span><br><span class="line">        &#123;</span><br><span class="line">            XmlSerializer serializer = <span class="keyword">new</span> XmlSerializer(obj.GetType());</span><br><span class="line">            serializer.Serialize(writer, obj);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">LoadData</span>(<span class="params">Type type, <span class="built_in">string</span> fileName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> path = <span class="string">$&quot;<span class="subst">&#123;Application.persistentDataPath&#125;</span>/<span class="subst">&#123;fileName&#125;</span>.xml&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (!File.Exists(path))</span><br><span class="line">        &#123;</span><br><span class="line">            path = <span class="string">$&quot;<span class="subst">&#123;Application.streamingAssetsPath&#125;</span>/<span class="subst">&#123;fileName&#125;</span>.xml&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!File.Exists(path))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//如果根本不存在文件 两个路径都找过了</span></span><br><span class="line">            <span class="comment">//那么直接new 一个对象 返回给外部 无非 里面都是默认值</span></span><br><span class="line">            <span class="keyword">return</span> Activator.CreateInstance(type);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">using</span> (StreamReader reader = <span class="keyword">new</span> StreamReader(path))</span><br><span class="line">        &#123;</span><br><span class="line">            XmlSerializer serializer = <span class="keyword">new</span> XmlSerializer(type);</span><br><span class="line">            <span class="built_in">object</span> obj = serializer.Deserialize(reader);</span><br><span class="line">            <span class="keyword">return</span> obj;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestData</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestData</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">int</span> age</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestData</span>()</span> &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> SerializerDictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt; dic;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 创建测试数据对象</span></span><br><span class="line">        TestData originalData = <span class="keyword">new</span> TestData(<span class="string">&quot;John&quot;</span>, <span class="number">25</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义文件名</span></span><br><span class="line">        <span class="built_in">string</span> fileName = <span class="string">&quot;testData&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 保存数据到 XML 文件</span></span><br><span class="line">        XmlDataMgr.Instance.SaveData(originalData, fileName);</span><br><span class="line">        Debug.Log(<span class="string">&quot;数据已保存到 XML 文件。&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从 XML 文件加载数据</span></span><br><span class="line">        TestData loadedData = (TestData)XmlDataMgr.Instance.LoadData(<span class="keyword">typeof</span>(TestData), fileName);</span><br><span class="line">        Debug.Log(<span class="string">&quot;数据已从 XML 文件加载。&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 验证加载的数据是否与原始数据一致</span></span><br><span class="line">        <span class="keyword">if</span> (loadedData != <span class="literal">null</span> &amp;&amp; loadedData.name == originalData.name &amp;&amp; loadedData.age == originalData.age)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;数据加载成功，内容一致。&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            Debug.LogError(<span class="string">&quot;数据加载失败，内容不一致。&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成的xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TestData</span> <span class="attr">xmlns:xsd</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>John<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">age</span>&gt;</span>25<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">TestData</span>&gt;</span></span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="数据" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE/"/>
    
    <category term="数据持久化" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    
    <category term="XML" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/"/>
    
    <category term="XML实践项目" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="数据" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE/"/>
    
    <category term="数据持久化" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    
    <category term="XML" scheme="http://example.com/tags/XML/"/>
    
    <category term="XML实践项目" scheme="http://example.com/tags/XML%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>1.需求分析+XML数据管理类创建</title>
    <link href="http://example.com/2025/03/07/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/1.%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90+XML%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E7%B1%BB%E5%88%9B%E5%BB%BA/"/>
    <id>http://example.com/2025/03/07/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/1.%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90+XML%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E7%B1%BB%E5%88%9B%E5%BB%BA/</id>
    <published>2025-03-07T05:17:28.000Z</published>
    <updated>2025-03-07T05:21:49.031Z</updated>
    
    <content type="html"><![CDATA[<p>需求分析<br />目标：</p><ul><li>提供公共的序列化和反序列化方法给外部</li><li>方便外部存储和获取数据</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">XmlDataMgr</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> XmlDataMgr _instance = <span class="keyword">new</span> XmlDataMgr();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> XmlDataMgr Instance =&gt; _instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">XmlDataMgr</span>()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SaveData</span>(<span class="params"><span class="built_in">object</span> obj, <span class="built_in">string</span> fileName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LoadData</span>(<span class="params">Type type, <span class="built_in">string</span> fileName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;需求分析&lt;br /&gt;
目标：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提供公共的序列化和反序列化方法给外部&lt;/li&gt;
&lt;li&gt;方便外部存储和获取数据&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;</summary>
      
    
    
    
    <category term="数据" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE/"/>
    
    <category term="数据持久化" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    
    <category term="XML" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/"/>
    
    <category term="XML实践项目" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="数据" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE/"/>
    
    <category term="数据持久化" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    
    <category term="XML" scheme="http://example.com/tags/XML/"/>
    
    <category term="XML实践项目" scheme="http://example.com/tags/XML%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>11.让Dictionary支持序列化和反序列化</title>
    <link href="http://example.com/2025/03/07/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/11.%E8%AE%A9Dictionary%E6%94%AF%E6%8C%81%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://example.com/2025/03/07/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/11.%E8%AE%A9Dictionary%E6%94%AF%E6%8C%81%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2025-03-07T04:25:45.000Z</published>
    <updated>2025-03-07T05:16:17.344Z</updated>
    
    <content type="html"><![CDATA[<p>思考如何让Dictionary支持xml序列和反序列化？<br />我们没办法修改C#自带的类<br />那我们可以重写一个类 继承Dictionary 然后让这个类继承序列化拓展接口IXmlSerializable<br />实现里面的序列化和反序列化方法即可</p><p>自定义序列化Dictionary</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SerializerDictionary</span>&lt;<span class="title">TKey</span>, <span class="title">TValue</span>&gt; : <span class="title">Dictionary</span>&lt;<span class="title">TKey</span>, <span class="title">TValue</span>&gt;, <span class="title">IXmlSerializable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> XmlSchema <span class="title">GetSchema</span>()</span> =&gt; <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ReadXml</span>(<span class="params">XmlReader reader</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        XmlSerializer keySerializer = <span class="keyword">new</span> XmlSerializer(<span class="keyword">typeof</span>(TKey));</span><br><span class="line">        XmlSerializer valueSerializer = <span class="keyword">new</span> XmlSerializer(<span class="keyword">typeof</span>(TValue));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.Clear();</span><br><span class="line">        <span class="built_in">bool</span> isEmpty = reader.IsEmptyElement;  <span class="comment">// 检查是否是空元素</span></span><br><span class="line"></span><br><span class="line">        reader.ReadStartElement();    <span class="comment">// 跳过根节点， 读到根节点&lt;root&gt;下面的第一个节点</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isEmpty) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (reader.NodeType != XmlNodeType.EndElement)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 反序列化键</span></span><br><span class="line">            TKey key = (TKey)keySerializer.Deserialize(reader);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 反序列化值</span></span><br><span class="line">            TValue <span class="keyword">value</span> = (TValue)valueSerializer.Deserialize(reader);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.Add(key, <span class="keyword">value</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        reader.ReadEndElement();  <span class="comment">// 消费结束标签</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">WriteXml</span>(<span class="params">XmlWriter writer</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        XmlSerializer keySerializer = <span class="keyword">new</span> XmlSerializer(<span class="keyword">typeof</span>(TKey));</span><br><span class="line">        XmlSerializer valueSerializer = <span class="keyword">new</span> XmlSerializer(<span class="keyword">typeof</span>(TValue));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (KeyValuePair&lt;TKey, TValue&gt; pair <span class="keyword">in</span> <span class="keyword">this</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            keySerializer.Serialize(writer, pair.Key);</span><br><span class="line">            valueSerializer.Serialize(writer, pair.Value);  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> SerializerDictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt; dic;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> path = <span class="string">$&quot;<span class="subst">&#123;Application.persistentDataPath&#125;</span>/Test.xml&quot;</span>;</span><br><span class="line">        print(path);</span><br><span class="line"></span><br><span class="line">        dic = <span class="keyword">new</span> SerializerDictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;();</span><br><span class="line">        dic[<span class="string">&quot;nihao&quot;</span>] = <span class="number">1</span>;</span><br><span class="line">        dic[<span class="string">&quot;世界&quot;</span>] = <span class="number">2</span>;</span><br><span class="line">        XmlSerializer serializer = <span class="keyword">new</span> XmlSerializer(<span class="keyword">typeof</span>(SerializerDictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;));</span><br><span class="line">        <span class="keyword">using</span> (StreamWriter sw = <span class="keyword">new</span> StreamWriter(path))</span><br><span class="line">        &#123;</span><br><span class="line">            serializer.Serialize(sw, dic);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        XmlSerializer serializer2 = <span class="keyword">new</span> XmlSerializer(<span class="keyword">typeof</span>(SerializerDictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;));</span><br><span class="line">        SerializerDictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt; newDic = <span class="keyword">new</span> SerializerDictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;();</span><br><span class="line">        <span class="keyword">using</span> (StreamReader r = <span class="keyword">new</span> StreamReader(path))</span><br><span class="line">        &#123;</span><br><span class="line">            newDic = serializer2.Deserialize(r) <span class="keyword">as</span> SerializerDictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成的xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">SerializerDictionaryOfStringInt32</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">string</span>&gt;</span>nihao<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">int</span>&gt;</span>1<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">string</span>&gt;</span>世界<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">int</span>&gt;</span>2<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">SerializerDictionaryOfStringInt32</span>&gt;</span></span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;思考如何让Dictionary支持xml序列和反序列化？&lt;br /&gt;
我们没办法修改C#自带的类&lt;br /&gt;
那我们可以重写一个类 继承Dictionary 然后让这个类继承序列化拓展接口IXmlSerializable&lt;br /&gt;
实现里面的序列化和反序列化方法即可&lt;/p</summary>
      
    
    
    
    <category term="数据" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE/"/>
    
    <category term="数据持久化" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    
    <category term="XML" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/"/>
    
    <category term="XML基础知识" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="数据" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE/"/>
    
    <category term="数据持久化" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    
    <category term="XML" scheme="http://example.com/tags/XML/"/>
    
    <category term="XML基础知识" scheme="http://example.com/tags/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>10.IXmlSerializable接口</title>
    <link href="http://example.com/2025/03/06/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/10.IXmlSerializable%E6%8E%A5%E5%8F%A3/"/>
    <id>http://example.com/2025/03/06/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/10.IXmlSerializable%E6%8E%A5%E5%8F%A3/</id>
    <published>2025-03-06T11:29:51.000Z</published>
    <updated>2025-03-07T05:06:27.217Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ixmlserializable是什么"><a class="markdownIt-Anchor" href="#ixmlserializable是什么"></a> IXmlSerializable是什么</h1><p>C# 的 <code>XmlSerializer</code> 接口提供了可拓展内容，可以让一些不能被序列化和反序列化的特殊类能够被处理。通过让特殊类继承 <code>IXmlSerializable</code> 接口并实现其中的方法，就能实现这一点。例如，字典就不能直接序列化，但可以通过自定义拓展让其序列化。</p><h1 id="自定义序列化实现ixmlserializable接口"><a class="markdownIt-Anchor" href="#自定义序列化实现ixmlserializable接口"></a> 自定义序列化（实现IXmlSerializable接口）</h1><h2 id="readxml-方法中-xmlreader-的常用属性和方法"><a class="markdownIt-Anchor" href="#readxml-方法中-xmlreader-的常用属性和方法"></a> <code>ReadXml</code> 方法中 <code>XmlReader</code> 的常用属性和方法</h2><p><strong>属性</strong><br /><strong><code>Name</code></strong> ：获取当前节点的名称。<br /><strong><code>NodeType</code></strong> ：获取当前节点的类型（如元素、文本、注释等）。<br /><strong><code>Value</code></strong>  ：获取当前节点的值。</p><p><strong>方法</strong><br /><strong><code>ReadStartElement</code></strong> ：读取当前元素的开始标记，并将读取器推进到下一个节点。<br /><strong><code>ReadElementContentAsString</code></strong> ：读取当前元素的内容并将其作为字符串返回，同时将读取器推进到下一个节点<br /><strong><code>ReadElementContentAsInt</code></strong> ：读取当前元素的内容并将其转换为整数返回，同时将读取器推进到下一个节点。<br /><strong><code>ReadEndElement</code></strong> ：读取当前元素的结束标记，并将读取器推进到下一个节点。<br /><strong><code>ReadToFollowing</code></strong> ：将读取器推进到具有指定名称的下一个元素。eg:<code>reader.ReadToFollowing(&quot;Person&quot;);</code></p><h2 id="writexml-方法中-xmlwriter-的常用属性和方法"><a class="markdownIt-Anchor" href="#writexml-方法中-xmlwriter-的常用属性和方法"></a> <code>WriteXml</code> 方法中 <code>XmlWriter</code> 的常用属性和方法</h2><p><strong>属性</strong><br /><strong><code>Settings</code></strong> ：获取用于创建 <code>XmlWriter</code> 的 <code>XmlWriterSettings</code> 对象，可用于控制 XML 输出的格式，如缩进、编码等。</p><p><strong>方法</strong><br /><strong><code>WriteStartElement</code></strong> ：写入指定名称的元素开始标记。<br /><strong><code>WriteElementString</code></strong> ：写入包含指定值的元素。<br /><strong><code>WriteAttributeString</code></strong> ：写入包含指定值的属性。<br /><strong><code>WriteEndElement</code></strong> ：写入当前元素的结束标记。<br /><strong><code>WriteString</code></strong> ：写入指定的文本内容。<br /><strong><code>WriteWhitespace</code></strong> ：写入空白字符，可用于格式化 XML 输出。</p><h2 id="writerwriteattributestring-和-reader"><a class="markdownIt-Anchor" href="#writerwriteattributestring-和-reader"></a> <code>writer.WriteAttributeString</code> 和 <code>reader[&quot;&quot;]</code></h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestClass</span> : <span class="title">IXmlSerializable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestClass</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">int</span> age</span>)</span> =&gt; (Name, Age) = (name, age);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> XmlSchema <span class="title">GetSchema</span>()</span> =&gt; <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ReadXml</span>(<span class="params">XmlReader reader</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 读写规则要同步</span></span><br><span class="line">        <span class="keyword">this</span>.Name = reader[<span class="string">&quot;这里填属性的名字&quot;</span>];</span><br><span class="line">        <span class="keyword">this</span>.Age = <span class="built_in">int</span>.Parse(reader[<span class="string">&quot;Age要tostring&quot;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">WriteXml</span>(<span class="params">XmlWriter writer</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        writer.WriteAttributeString(<span class="string">&quot;这里填属性的名字&quot;</span>, <span class="keyword">this</span>.Name);</span><br><span class="line">        writer.WriteAttributeString(<span class="string">&quot;Age要tostring&quot;</span>, <span class="keyword">this</span>.Age.ToString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestClass</span>()</span> &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>序列化后如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TestClass</span> <span class="attr">这里填属性的名字</span>=<span class="string">&quot;名字&quot;</span> <span class="attr">Age要tostring</span>=<span class="string">&quot;18&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 直接就在根节点上面写了--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="readerread-和-writerwriteelementstring"><a class="markdownIt-Anchor" href="#readerread-和-writerwriteelementstring"></a> reader.Read() 和 writer.WriteElementString</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestClass</span> : <span class="title">IXmlSerializable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestClass</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">int</span> age</span>)</span> =&gt; (Name, Age) = (name, age);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> XmlSchema <span class="title">GetSchema</span>()</span> =&gt; <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ReadXml</span>(<span class="params">XmlReader reader</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 读写规则要同步</span></span><br><span class="line">        <span class="comment">//this.Name = reader[&quot;这里填属性的名字&quot;];</span></span><br><span class="line">        <span class="comment">//this.Age = int.Parse(reader[&quot;Age要tostring&quot;]);</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"><span class="doctag">///</span>/ 读节点什么都没做是默认的根节点</span></span><br><span class="line">        <span class="comment">//reader.Read();      // 是读到根节点的第一个节点 即 &lt;生成的节点名字&gt;</span></span><br><span class="line">        <span class="comment">//reader.Read();      // 是读到第一个节点的值</span></span><br><span class="line">        <span class="comment">//this.Name = reader.Value;</span></span><br><span class="line">        <span class="comment">//reader.Read();      // 是读到第一个节点的结束标签</span></span><br><span class="line">        <span class="comment">//reader.Read();      // 是读到第二个节点的开始标签</span></span><br><span class="line">        <span class="comment">//reader.Read();      // 是读到第二个节点的值</span></span><br><span class="line">        <span class="comment">//this.Age = int.Parse(reader.Value); </span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 或者这样</span></span><br><span class="line">        <span class="keyword">while</span> (reader.Read())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (reader.NodeType == XmlNodeType.Element)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">switch</span> (reader.Name)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;生成的节点名字&quot;</span>:</span><br><span class="line">                        reader.Read();</span><br><span class="line">                        <span class="keyword">this</span>.Name = reader.Value;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;Age&quot;</span>:</span><br><span class="line">                        reader.Read();</span><br><span class="line">                        <span class="keyword">this</span>.Age = <span class="built_in">int</span>.Parse(reader.Value);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">WriteXml</span>(<span class="params">XmlWriter writer</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//writer.WriteAttributeString(&quot;这里填属性的名字&quot;, this.Name);</span></span><br><span class="line">        <span class="comment">//writer.WriteAttributeString(&quot;Age要tostring&quot;, this.Age.ToString());</span></span><br><span class="line"></span><br><span class="line">        writer.WriteElementString(<span class="string">&quot;生成的节点名字&quot;</span>, <span class="keyword">this</span>.Name);</span><br><span class="line">        writer.WriteElementString(<span class="string">&quot;Age&quot;</span>, <span class="keyword">this</span>.Age.ToString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestClass</span>()</span> &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>序列化后如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TestClass</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">生成的节点名字</span>&gt;</span>名字<span class="tag">&lt;/<span class="name">生成的节点名字</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">Age</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">TestClass</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="writerwritestartelement-和-readerreadstartelement"><a class="markdownIt-Anchor" href="#writerwritestartelement-和-readerreadstartelement"></a> writer.WriteStartElement 和 reader.ReadStartElement</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestClass</span> : <span class="title">IXmlSerializable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestClass</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">int</span> age</span>)</span> =&gt; (Name, Age) = (name, age);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> XmlSchema <span class="title">GetSchema</span>()</span> =&gt; <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ReadXml</span>(<span class="params">XmlReader reader</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 读写规则要同步</span></span><br><span class="line">        <span class="comment">//this.Name = reader[&quot;这里填属性的名字&quot;];</span></span><br><span class="line">        <span class="comment">//this.Age = int.Parse(reader[&quot;Age要tostring&quot;]);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span>/ 读节点什么都没做是默认的根节点</span></span><br><span class="line">        <span class="comment">//reader.Read();      // 是读到根节点的第一个节点 即</span></span><br><span class="line">        <span class="comment">//reader.Read();      // 是读到第一个节点的值</span></span><br><span class="line">        <span class="comment">//this.Name = reader.Value;</span></span><br><span class="line">        <span class="comment">//reader.Read();      // 是读到第一个节点的结束标签</span></span><br><span class="line">        <span class="comment">//reader.Read();      // 是读到第二个节点的开始标签</span></span><br><span class="line">        <span class="comment">//reader.Read();      // 是读到第二个节点的值</span></span><br><span class="line">        <span class="comment">//this.Age = int.Parse(reader.Value); </span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 或者这样</span></span><br><span class="line">        <span class="comment">//while (reader.Read())</span></span><br><span class="line">        <span class="comment">//&#123;</span></span><br><span class="line">        <span class="comment">//    if (reader.NodeType == XmlNodeType.Element)</span></span><br><span class="line">        <span class="comment">//    &#123;</span></span><br><span class="line">        <span class="comment">//        switch (reader.Name)</span></span><br><span class="line">        <span class="comment">//        &#123;</span></span><br><span class="line">        <span class="comment">//            case &quot;生成的节点名字&quot;:</span></span><br><span class="line">        <span class="comment">//                reader.Read();</span></span><br><span class="line">        <span class="comment">//                this.Name = reader.Value;</span></span><br><span class="line">        <span class="comment">//                break;</span></span><br><span class="line">        <span class="comment">//            case &quot;Age&quot;:</span></span><br><span class="line">        <span class="comment">//                reader.Read();</span></span><br><span class="line">        <span class="comment">//                this.Age = int.Parse(reader.Value);</span></span><br><span class="line">        <span class="comment">//                break;</span></span><br><span class="line">        <span class="comment">//        &#125;</span></span><br><span class="line">        <span class="comment">//    &#125;</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">        XmlSerializer s = <span class="keyword">new</span> XmlSerializer(<span class="keyword">typeof</span>(<span class="built_in">int</span>));</span><br><span class="line">        <span class="comment">// 先跳过根节点</span></span><br><span class="line">        reader.Read();</span><br><span class="line">        reader.ReadStartElement(<span class="string">&quot;名字int&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.Age = <span class="built_in">int</span>.Parse(s.Deserialize(reader).ToString());</span><br><span class="line">        reader.ReadEndElement();</span><br><span class="line"></span><br><span class="line">        XmlSerializer s2 = <span class="keyword">new</span> XmlSerializer(<span class="keyword">typeof</span>(<span class="built_in">string</span>));</span><br><span class="line">        reader.ReadStartElement(<span class="string">&quot;名字string&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.Name = s2.Deserialize(reader).ToString();</span><br><span class="line">        reader.ReadEndElement();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">WriteXml</span>(<span class="params">XmlWriter writer</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//writer.WriteAttributeString(&quot;这里填属性的名字&quot;, this.Name);</span></span><br><span class="line">        <span class="comment">//writer.WriteAttributeString(&quot;Age要tostring&quot;, this.Age.ToString());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//writer.WriteElementString(&quot;生成的节点名字&quot;, this.Name);</span></span><br><span class="line">        <span class="comment">//writer.WriteElementString(&quot;Age&quot;, this.Age.ToString());</span></span><br><span class="line"></span><br><span class="line">        XmlSerializer s = <span class="keyword">new</span> XmlSerializer(<span class="keyword">typeof</span>(<span class="built_in">int</span>));</span><br><span class="line">        writer.WriteStartElement(<span class="string">&quot;名字int&quot;</span>);</span><br><span class="line">        s.Serialize(writer, <span class="keyword">this</span>.Age);</span><br><span class="line">        writer.WriteEndElement();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        XmlSerializer s2 = <span class="keyword">new</span> XmlSerializer(<span class="keyword">typeof</span>(<span class="built_in">string</span>));</span><br><span class="line">        writer.WriteStartElement(<span class="string">&quot;名字string&quot;</span>);</span><br><span class="line">        s2.Serialize(writer, <span class="keyword">this</span>.Name);</span><br><span class="line">        writer.WriteEndElement();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestClass</span>()</span> &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>序列化后如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TestClass</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">名字int</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">int</span>&gt;</span>18<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">名字int</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">名字string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>名字<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">名字string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">TestClass</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="其它示例"><a class="markdownIt-Anchor" href="#其它示例"></a> 其它示例</h2><p><strong>目标XML格式</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Player</span> <span class="attr">profile</span>=<span class="string">&quot;hero&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Name</span>&gt;</span>Arthur<span class="tag">&lt;/<span class="name">Name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Level</span>&gt;</span>45<span class="tag">&lt;/<span class="name">Level</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Inventory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Item</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span>&gt;</span>Excalibur<span class="tag">&lt;/<span class="name">Item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Item</span> <span class="attr">id</span>=<span class="string">&quot;2&quot;</span>&gt;</span>HolyGrail<span class="tag">&lt;/<span class="name">Item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Inventory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Player</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>对应的C#类实现</strong></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayerData</span> : <span class="title">IXmlSerializable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> ProfileType &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Level &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> List&lt;InventoryItem&gt; Inventory &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="keyword">new</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> XmlSchema? GetSchema() =&gt; <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">WriteXml</span>(<span class="params">XmlWriter writer</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        writer.WriteStartElement(<span class="string">&quot;Player&quot;</span>);</span><br><span class="line">        writer.WriteAttributeString(<span class="string">&quot;profile&quot;</span>, ProfileType);</span><br><span class="line">        </span><br><span class="line">        writer.WriteElementString(<span class="string">&quot;Name&quot;</span>, Name);</span><br><span class="line">        writer.WriteElementString(<span class="string">&quot;Level&quot;</span>, Level.ToString());</span><br><span class="line">        </span><br><span class="line">        writer.WriteStartElement(<span class="string">&quot;Inventory&quot;</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> Inventory)</span><br><span class="line">        &#123;</span><br><span class="line">            writer.WriteStartElement(<span class="string">&quot;Item&quot;</span>);</span><br><span class="line">            writer.WriteAttributeString(<span class="string">&quot;id&quot;</span>, item.Id.ToString());</span><br><span class="line">            writer.WriteString(item.Name);</span><br><span class="line">            writer.WriteEndElement(); <span class="comment">// Item</span></span><br><span class="line">        &#125;</span><br><span class="line">        writer.WriteEndElement(); <span class="comment">// Inventory</span></span><br><span class="line">        </span><br><span class="line">        writer.WriteEndElement(); <span class="comment">// Player</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ReadXml</span>(<span class="params">XmlReader reader</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        ProfileType = reader.GetAttribute(<span class="string">&quot;profile&quot;</span>);</span><br><span class="line">        reader.ReadStartElement(<span class="string">&quot;Player&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        Name = reader.ReadElementContentAsString(<span class="string">&quot;Name&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        Level = reader.ReadElementContentAsInt(<span class="string">&quot;Level&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        reader.ReadStartElement(<span class="string">&quot;Inventory&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (reader.NodeType == XmlNodeType.Element &amp;&amp; reader.LocalName == <span class="string">&quot;Item&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> item = <span class="keyword">new</span> InventoryItem &#123;</span><br><span class="line">                Id = <span class="built_in">int</span>.Parse(reader.GetAttribute(<span class="string">&quot;id&quot;</span>)),</span><br><span class="line">                Name = reader.ReadElementContentAsString()</span><br><span class="line">            &#125;;</span><br><span class="line">            Inventory.Add(item);</span><br><span class="line">        &#125;</span><br><span class="line">        reader.ReadEndElement(); <span class="comment">// Inventory</span></span><br><span class="line">        </span><br><span class="line">        reader.ReadEndElement(); <span class="comment">// Player</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">InventoryItem</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ixmlserializable是什么&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#ixmlserializable是什么&quot;&gt;&lt;/a&gt; IXmlSerializable是什么&lt;/h1&gt;
&lt;p&gt;C# 的 &lt;code&gt;XmlSeriali</summary>
      
    
    
    
    <category term="数据" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE/"/>
    
    <category term="数据持久化" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    
    <category term="XML" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/"/>
    
    <category term="XML基础知识" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="数据" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE/"/>
    
    <category term="数据持久化" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    
    <category term="XML" scheme="http://example.com/tags/XML/"/>
    
    <category term="XML基础知识" scheme="http://example.com/tags/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>9.CSharp中XML反序列化</title>
    <link href="http://example.com/2025/03/06/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/9.CSharp%E4%B8%ADXML%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://example.com/2025/03/06/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/9.CSharp%E4%B8%ADXML%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2025-03-06T11:07:07.000Z</published>
    <updated>2025-03-06T11:29:05.213Z</updated>
    
    <content type="html"><![CDATA[<h1 id="知识回顾-swig2-"><a class="markdownIt-Anchor" href="#知识回顾-swig2-"></a> 知识回顾 <a href="/2025/03/06/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/8.CSharp%E4%B8%ADXML%E5%BA%8F%E5%88%97%E5%8C%96/" title="8.CSharp中XML序列化">序列化</a></h1><h1 id="判断文件是否存在"><a class="markdownIt-Anchor" href="#判断文件是否存在"></a> 判断文件是否存在</h1><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> path = Application.persistentDataPath + <span class="string">&quot;/Lesson1Test.xml&quot;</span>;</span><br><span class="line"><span class="comment">// 存在再进行反序列化的处理，不存在就不能反序列化</span></span><br><span class="line"><span class="keyword">if</span> (File.Exists(path))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 反序列化处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="反序列化"><a class="markdownIt-Anchor" href="#反序列化"></a> 反序列化</h1><p><strong>关键类和语法</strong><br />XmlSerializer<br />StreamReader</p><a href="/2025/03/06/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Csharp/csharp%E7%9A%84using%E8%AF%AD%E5%8F%A5/" title="csharp的using语句">csharp的using语句</a><p><strong>注意</strong><br /><code>public List&lt;int&gt; listInt = new List&lt;int&gt; &#123; 1, 2, 3 &#125;;</code> 反序列化出来的 <code>listInt</code> 会有 {1, 2, 3, 1, 2, 3 };<br />最好不要在读取的类的列表成员变量声明时初始化就赋值</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> PlayerData <span class="title">LoadPlayerData</span>(<span class="params"><span class="built_in">string</span> path</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!File.Exists(path)) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    XmlSerializer serializer = <span class="keyword">new</span> XmlSerializer(<span class="keyword">typeof</span>(PlayerData));</span><br><span class="line">    <span class="keyword">using</span> (StreamReader reader = <span class="keyword">new</span> StreamReader(path))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (PlayerData)serializer.Deserialize(reader);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;知识回顾-swig2-&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#知识回顾-swig2-&quot;&gt;&lt;/a&gt; 知识回顾 &lt;a href=&quot;/2025/03/06/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E</summary>
      
    
    
    
    <category term="数据" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE/"/>
    
    <category term="数据持久化" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    
    <category term="XML" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/"/>
    
    <category term="XML基础知识" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="数据" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE/"/>
    
    <category term="数据持久化" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    
    <category term="XML" scheme="http://example.com/tags/XML/"/>
    
    <category term="XML基础知识" scheme="http://example.com/tags/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>csharp的using语句</title>
    <link href="http://example.com/2025/03/06/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Csharp/csharp%E7%9A%84using%E8%AF%AD%E5%8F%A5/"/>
    <id>http://example.com/2025/03/06/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Csharp/csharp%E7%9A%84using%E8%AF%AD%E5%8F%A5/</id>
    <published>2025-03-06T09:11:17.000Z</published>
    <updated>2025-03-06T09:18:50.454Z</updated>
    
    <content type="html"><![CDATA[<h1 id="using语句"><a class="markdownIt-Anchor" href="#using语句"></a> using语句</h1><p><strong>基本概念</strong><br /><code>using</code> 语句提供了一种简洁的方式来管理实现了 <code>System.IDisposable</code> 接口的对象。实现了 <code>IDisposable</code> 接口的对象通常包含需要手动释放的非托管资源，如文件句柄、数据库连接、网络连接、图形资源等。<code>using</code> 语句会在代码块结束时自动调用对象的 <code>Dispose</code> 方法，从而确保资源被正确释放，避免资源泄漏。</p><p><strong>工作原理</strong><br /><code>using</code> 语句的基本语法如下：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> (ResourceType resource = <span class="keyword">new</span> ResourceType())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 使用资源的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当执行到 <code>using</code> 语句时，会创建 <code>ResourceType</code> 类型的对象并将其赋值给 <code>resource</code> 变量。然后进入 <code>using</code> 语句的代码块，在代码块中可以使用该资源。当代码块执行完毕（无论是正常结束还是因为异常而跳出），<code>using</code> 语句会自动调用 <code>resource</code> 对象的 <code>Dispose</code> 方法，释放其所占用的资源。</p><p>实际上，上述 <code>using</code> 语句等价于以下 <code>try - finally</code> 代码结构：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ResourceType resource = <span class="keyword">new</span> ResourceType();</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 使用资源的代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (resource != <span class="literal">null</span>)</span><br><span class="line">        ((IDisposable)resource).Dispose();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用场景"><a class="markdownIt-Anchor" href="#使用场景"></a> 使用场景</h1><p>一般配合内存占用比较大，有读写操作使用</p><ul><li><strong>文件操作</strong>：在使用 <code>FileStream</code>、<code>StreamReader</code>、<code>StreamWriter</code> 等类进行文件读写时，这些类都实现了 <code>IDisposable</code> 接口，使用 <code>using</code> 语句可以确保文件句柄在使用完毕后被正确关闭。</li><li><strong>数据库连接</strong>：在使用 <code>SqlConnection</code>、<code>MySqlConnection</code> 等数据库连接类时，使用 <code>using</code> 语句可以确保数据库连接在使用完毕后被关闭和释放。</li><li><strong>图形资源</strong>：在使用 <code>Bitmap</code>、<code>Pen</code>、<code>Brush</code> 等图形资源类时，使用 <code>using</code> 语句可以确保图形资源被正确释放。</li></ul><h2 id="文件操作示例"><a class="markdownIt-Anchor" href="#文件操作示例"></a> 文件操作示例</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 使用 using 语句创建 StreamWriter 对象</span></span><br><span class="line">        <span class="keyword">using</span> (StreamWriter writer = <span class="keyword">new</span> StreamWriter(<span class="string">&quot;test.txt&quot;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 向文件中写入内容</span></span><br><span class="line">            writer.WriteLine(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">        &#125; <span class="comment">// 代码块结束，自动调用 writer.Dispose() 方法，关闭文件</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 using 语句创建 StreamReader 对象</span></span><br><span class="line">        <span class="keyword">using</span> (StreamReader reader = <span class="keyword">new</span> StreamReader(<span class="string">&quot;test.txt&quot;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 从文件中读取内容</span></span><br><span class="line">            <span class="built_in">string</span> line = reader.ReadLine();</span><br><span class="line">            Console.WriteLine(line);</span><br><span class="line">        &#125; <span class="comment">// 代码块结束，自动调用 reader.Dispose() 方法，关闭文件</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据库连接示例假设使用-sql-server"><a class="markdownIt-Anchor" href="#数据库连接示例假设使用-sql-server"></a> 数据库连接示例（假设使用 SQL Server）</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Data.SqlClient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> connectionString = <span class="string">&quot;Data Source=YOUR_SERVER;Initial Catalog=YOUR_DATABASE;User ID=YOUR_USER;Password=YOUR_PASSWORD&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 using 语句创建 SqlConnection 对象</span></span><br><span class="line">        <span class="keyword">using</span> (SqlConnection connection = <span class="keyword">new</span> SqlConnection(connectionString))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 打开数据库连接</span></span><br><span class="line">                connection.Open();</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;数据库连接已打开。&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 执行 SQL 查询等操作</span></span><br><span class="line">                <span class="built_in">string</span> query = <span class="string">&quot;SELECT * FROM YourTable&quot;</span>;</span><br><span class="line">                <span class="keyword">using</span> (SqlCommand command = <span class="keyword">new</span> SqlCommand(query, connection))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">using</span> (SqlDataReader reader = command.ExecuteReader())</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">while</span> (reader.Read())</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="comment">// 处理查询结果</span></span><br><span class="line">                            Console.WriteLine(reader[<span class="number">0</span>].ToString());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="comment">// 代码块结束，自动调用 reader.Dispose() 方法，关闭数据读取器</span></span><br><span class="line">                &#125; <span class="comment">// 代码块结束，自动调用 command.Dispose() 方法，释放命令对象</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">$&quot;数据库操作出错: <span class="subst">&#123;ex.Message&#125;</span>&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="comment">// 代码块结束，自动调用 connection.Dispose() 方法，关闭数据库连接</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;using语句&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#using语句&quot;&gt;&lt;/a&gt; using语句&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;基本概念&lt;/strong&gt;&lt;br /&gt;
&lt;code&gt;using&lt;/code&gt; 语句提供了一种简洁的</summary>
      
    
    
    
    <category term="编程语言" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Csharp" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Csharp/"/>
    
    
    <category term="编程语言" scheme="http://example.com/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Csharp" scheme="http://example.com/tags/Csharp/"/>
    
  </entry>
  
  <entry>
    <title>8.CSharp中XML序列化</title>
    <link href="http://example.com/2025/03/06/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/8.CSharp%E4%B8%ADXML%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://example.com/2025/03/06/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/8.CSharp%E4%B8%ADXML%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2025-03-06T08:35:03.000Z</published>
    <updated>2025-03-06T11:34:20.605Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是序列化"><a class="markdownIt-Anchor" href="#什么是序列化"></a> 什么是序列化？</h1><p>将<strong>对象状态</strong>转换为可存储/传输的格式（如XML、JSON、二进制）的过程。<br /><strong>游戏开发典型应用场景：</strong></p><ol><li>玩家存档/读档</li><li>网络数据传输</li><li>配置文件管理（如画质设置、按键绑定）</li><li>对象池的持久化</li></ol><p><strong>关键类和语法</strong><br />XmlSerializer Xml序列化器类：用于序列化对象为XML的关键类<br />StreamWriter 流写入器类：用于存储文件</p><a href="/2025/03/06/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Csharp/csharp%E7%9A%84using%E8%AF%AD%E5%8F%A5/" title="csharp的using语句">csharp的using语句</a>：用于方便流对象释放和销毁<h2 id="streamwriterstreamreader简单介绍"><a class="markdownIt-Anchor" href="#streamwriterstreamreader简单介绍"></a> <code>StreamWriter</code>/<code>StreamReader</code>简单介绍</h2><p><strong>所属命名空间</strong>：<code>System.IO</code><br /><strong>功能</strong>：文本文件的读写操作</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StreamWriterExample</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 定义文件路径</span></span><br><span class="line">        <span class="built_in">string</span> filePath = Application.dataPath + <span class="string">&quot;/example.txt&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 创建一个 StreamWriter 对象，指定文件路径和编码格式</span></span><br><span class="line">            <span class="keyword">using</span> (StreamWriter writer = <span class="keyword">new</span> StreamWriter(filePath, <span class="literal">false</span>, System.Text.Encoding.UTF8))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 写入一行文本</span></span><br><span class="line">                writer.WriteLine(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">                <span class="comment">// 写入另一行文本</span></span><br><span class="line">                writer.WriteLine(<span class="string">&quot;This is a test.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Debug.Log(<span class="string">&quot;文件写入成功！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (System.Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.LogError(<span class="string">&quot;文件写入失败：&quot;</span> + e.Message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="xmlserializer-简单介绍"><a class="markdownIt-Anchor" href="#xmlserializer-简单介绍"></a> XmlSerializer 简单介绍</h2><p><strong>所属命名空间</strong>：<code>System.Xml.Serialization</code><br /><strong>序列化</strong>：当你使用 <code>XmlSerializer</code> 对一个对象进行序列化时，它会反射对象的类型信息，查找对象的公共属性和字段，并根据这些信息生成相应的 XML 元素和属性。序列化过程会将对象的属性值转换为 XML 文本，然后将这些 XML 文本写入到指定的流（如文件流、内存流等）中。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 XmlSerializer 对象，指定要序列化的类型</span></span><br><span class="line">XmlSerializer serializer = <span class="keyword">new</span> XmlSerializer(<span class="keyword">typeof</span>(Person));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个 StreamWriter 对象，用于将 XML 数据写入文件</span></span><br><span class="line"><span class="keyword">using</span> (StreamWriter writer = <span class="keyword">new</span> StreamWriter(filePath))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 执行序列化操作 (第一个参数是文件流对象，第二个是想要序列化的对象)</span></span><br><span class="line">    serializer.Serialize(writer, person);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="xml序列化"><a class="markdownIt-Anchor" href="#xml序列化"></a> XML序列化</h1><p><strong>注意：</strong></p><ol><li>只能序列化公共成员</li><li>不支持字典序列化</li><li>stream相关和using相关</li><li>序列化时，对象中的引用成员为空，那么序列化后的xml里面是看不到该字段的</li></ol><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Serializable</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayerData</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">XmlAttribute(<span class="string">&quot;id&quot;</span>)</span>]  <span class="comment">// 作为XML属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> PlayerID;</span><br><span class="line">    </span><br><span class="line">    [<span class="meta">XmlElement(<span class="string">&quot;name&quot;</span>)</span>]  <span class="comment">// 作为XML元素 节点名为name</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> PlayerName;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Vector3 Position;  <span class="comment">// 需要特殊处理的结构体</span></span><br><span class="line">    </span><br><span class="line">    [<span class="meta">XmlIgnore</span>]  <span class="comment">// 忽略不需要序列化的字段</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> IsDirty;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">XmlArray(<span class="string">&quot;IntList&quot;</span>)</span>]</span><br><span class="line">    [<span class="meta">XmlArrayItem(<span class="string">&quot;Int32&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> List&lt;<span class="built_in">int</span>&gt; listInt = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt; &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SavePlayerData</span>(<span class="params">PlayerData data, <span class="built_in">string</span> path</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    XmlSerializer serializer = <span class="keyword">new</span> XmlSerializer(<span class="keyword">typeof</span>(PlayerData));</span><br><span class="line">    <span class="keyword">using</span> (StreamWriter writer = <span class="keyword">new</span> StreamWriter(path))</span><br><span class="line">    &#123;</span><br><span class="line">        serializer.Serialize(writer, data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是序列化&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#什么是序列化&quot;&gt;&lt;/a&gt; 什么是序列化？&lt;/h1&gt;
&lt;p&gt;将&lt;strong&gt;对象状态&lt;/strong&gt;转换为可存储/传输的格式（如XML、JSON、二进制）的过程。&lt;br /&gt;</summary>
      
    
    
    
    <category term="数据" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE/"/>
    
    <category term="数据持久化" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    
    <category term="XML" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/"/>
    
    <category term="XML基础知识" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="数据" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE/"/>
    
    <category term="数据持久化" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    
    <category term="XML" scheme="http://example.com/tags/XML/"/>
    
    <category term="XML基础知识" scheme="http://example.com/tags/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>7.XML总结</title>
    <link href="http://example.com/2025/03/06/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/7.XML%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2025/03/06/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/7.XML%E6%80%BB%E7%BB%93/</id>
    <published>2025-03-06T08:31:57.000Z</published>
    <updated>2025-03-06T08:32:33.808Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2025/03/06/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/7.XML%E6%80%BB%E7%BB%93/file-20250306163202847.png" alt="" /></p><p><img src="/2025/03/06/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/7.XML%E6%80%BB%E7%BB%93/file-20250306163224731.png" alt="" /><br /><img src="/2025/03/06/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/7.XML%E6%80%BB%E7%BB%93/file-20250306163231778.png" alt="" /></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2025/03/06/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/7.XML%</summary>
      
    
    
    
    <category term="数据" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE/"/>
    
    <category term="数据持久化" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    
    <category term="XML" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/"/>
    
    <category term="XML基础知识" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="数据" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE/"/>
    
    <category term="数据持久化" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    
    <category term="XML" scheme="http://example.com/tags/XML/"/>
    
    <category term="XML基础知识" scheme="http://example.com/tags/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>6.CSharp存储XML文件</title>
    <link href="http://example.com/2025/03/06/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/6.CSharp%E5%AD%98%E5%82%A8XML%E6%96%87%E4%BB%B6/"/>
    <id>http://example.com/2025/03/06/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/6.CSharp%E5%AD%98%E5%82%A8XML%E6%96%87%E4%BB%B6/</id>
    <published>2025-03-06T07:35:19.000Z</published>
    <updated>2025-03-06T08:30:01.708Z</updated>
    
    <content type="html"><![CDATA[<h1 id="xml决定存储在哪个文件夹下"><a class="markdownIt-Anchor" href="#xml决定存储在哪个文件夹下"></a> Xml决定存储在哪个文件夹下</h1><p>注意：存储xml文件 在Unity中<strong>一定是使用各平台都可读可写可找到的<a href="/2025/03/04/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%9F%BA%E7%A1%80/11.%E7%89%B9%E6%AE%8A%E6%96%87%E4%BB%B6%E5%A4%B9/" title="11.特殊文件夹">路径</a></strong></p><ul><li>Resources 可读 不可写 打包加密后通过路径找不到 ×</li><li>Application.streamingAssetsPath 可读 PC端可写 但是其他平台不可写 打包加密后通过路径找得到 可以存些不会改的xml文件 ×</li><li>Application.dataPath 编辑器上操作看起来没什么问题 但是打包后找不到 ×</li><li><code>Application.persistentDataPath</code> 可读可写 各个平台找得到 √</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> path = Application.persistentDataPath + <span class="string">&quot;/player_data.xml&quot;</span>;</span><br><span class="line">print(Application.persistentDataPath);</span><br></pre></td></tr></table></figure><h1 id="存储xml文件"><a class="markdownIt-Anchor" href="#存储xml文件"></a> 存储XML文件</h1><h2 id="手动构建xml文档"><a class="markdownIt-Anchor" href="#手动构建xml文档"></a> 手动构建XML文档</h2><p><strong>具体的五个步骤</strong>：</p><ol><li>创建XmlDocument文档对象</li><li>添加固定版本信息</li><li>添加根节点</li><li>为根节点添加子节点</li><li>保存<br /><strong>适用场景</strong>：简单配置、快速原型开发</li></ol><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建XML文档对象</span></span><br><span class="line">XmlDocument doc = <span class="keyword">new</span> XmlDocument();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这一句代码 相当于就是创建&lt;?xmlDocument version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;这句内容</span></span><br><span class="line">XmlDeclaration xmlDec = xmlDocument.CreateXmlDeclaration(<span class="string">&quot;1.0&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建根节点</span></span><br><span class="line">XmlElement root = doc.CreateElement(<span class="string">&quot;PlayerData&quot;</span>);</span><br><span class="line">doc.AppendChild(root);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加基础属性</span></span><br><span class="line">XmlElement player = doc.CreateElement(<span class="string">&quot;Player&quot;</span>);</span><br><span class="line">player.SetAttribute(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;1001&quot;</span>);</span><br><span class="line">player.SetAttribute(<span class="string">&quot;class&quot;</span>, <span class="string">&quot;Warrior&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加子节点</span></span><br><span class="line"><span class="comment">// HP</span></span><br><span class="line">XmlElement hpNode = doc.CreateElement(<span class="string">&quot;HP&quot;</span>);</span><br><span class="line">hpNode.InnerText = <span class="string">&quot;500&quot;</span>;</span><br><span class="line"><span class="comment">// Atk</span></span><br><span class="line">XmlElement atkElement = xmlDoc.CreateElement(<span class="string">&quot;Atk&quot;</span>);</span><br><span class="line">atkElement.InnerText = <span class="string">&quot;200&quot;</span>;</span><br><span class="line"></span><br><span class="line">player.AppendChild(hpNode);</span><br><span class="line">player.AppendChild(atkElement);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存到文件</span></span><br><span class="line">doc.Save(path); <span class="comment">// player_data.xml</span></span><br></pre></td></tr></table></figure><p>生成的结果</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">PlayerData</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Player</span> <span class="attr">id</span>=<span class="string">&quot;1001&quot;</span> <span class="attr">class</span>=<span class="string">&quot;Warrior&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">HP</span>&gt;</span>500<span class="tag">&lt;/<span class="name">HP</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Atk</span>&gt;</span>200<span class="tag">&lt;/<span class="name">Atk</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Player</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">PlayerData</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="修改xml文件"><a class="markdownIt-Anchor" href="#修改xml文件"></a> 修改XML文件</h1><p>判断文件是否存在</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//File类中的Exists方法 判断路径是否存在</span></span><br><span class="line"><span class="keyword">if</span> (File.Exists(path))</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>加载后利用学过的方法修改xml文件</strong></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 XmlDocument 对象</span></span><br><span class="line">XmlDocument xmlDoc = <span class="keyword">new</span> XmlDocument();</span><br><span class="line"><span class="comment">// 加载 XML 文件</span></span><br><span class="line">xmlDoc.Load(<span class="string">&quot;player_data.xml&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>添加节点</strong></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设已经加载了 XML 文件到 xmlDoc 中</span></span><br><span class="line"><span class="comment">// 获取根节点</span></span><br><span class="line">XmlElement root = xmlDoc.DocumentElement;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建新的元素节点</span></span><br><span class="line">XmlElement newElement = xmlDoc.CreateElement(<span class="string">&quot;newNode&quot;</span>);</span><br><span class="line"><span class="comment">// 设置元素节点的文本内容</span></span><br><span class="line">newElement.InnerText = <span class="string">&quot;New Node Content&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将新节点添加到根节点下</span></span><br><span class="line">root.AppendChild(newElement);</span><br></pre></td></tr></table></figure><p><strong>删除节点</strong></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设已经加载了 XML 文件到 xmlDoc 中</span></span><br><span class="line"><span class="comment">// 使用 XPath 选择要删除的节点</span></span><br><span class="line">XmlNode nodeToDelete = xmlDoc.SelectSingleNode(<span class="string">&quot;//Atk&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (nodeToDelete != <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 获取父节点</span></span><br><span class="line">    XmlNode parentNode = nodeToDelete.ParentNode;</span><br><span class="line">    <span class="comment">// 从父节点中移除该节点</span></span><br><span class="line">    parentNode.RemoveChild(nodeToDelete);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="练习"><a class="markdownIt-Anchor" href="#练习"></a> 练习</h1><p>定义一个名为 SaveData 的公共方法，参数为文件名字符串 fileName</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个名为 SaveData 的公共方法，参数为文件名字符串 fileName</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SaveData</span>(<span class="params"><span class="built_in">string</span> fileName</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//决定存储路径</span></span><br><span class="line">    <span class="built_in">string</span> path = Application.persistentDataPath + <span class="string">&quot;/&quot;</span> + fileName + <span class="string">&quot;.xml&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出该XML文档将保存在何处。</span></span><br><span class="line">    Debug.Log(Application.persistentDataPath);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化5步操作。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.创建XmlDocument对象。稍后它将包含所需的Xml数据。</span></span><br><span class="line">    XmlDocument xml = <span class="keyword">new</span> XmlDocument();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.使用CreateXmlDeclaration()方法创建XmlDeclaration对象声明文档类型和版本。</span></span><br><span class="line">    XmlDeclaration xmlDec = xml.CreateXmlDeclaration(<span class="string">&quot;1.0&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="comment">//将XmlDeclaration对象添加到XmlDocument对象中。</span></span><br><span class="line">    <span class="comment">//这将把该声明作为XML文件的第一行。</span></span><br><span class="line">    xml.AppendChild(xmlDec);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.添加根节点</span></span><br><span class="line">    <span class="comment">//使用CreateElement()方法，创建一个根节点XmlElement对象并命名为“PlayerInfo”。</span></span><br><span class="line">    XmlElement playerInfo = xml.CreateElement(<span class="string">&quot;PlayerInfo&quot;</span>);</span><br><span class="line">    <span class="comment">//向XmlDocument对象添加根节点XmlElement对象“playerInfo”</span></span><br><span class="line">    xml.AppendChild(playerInfo);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.添加子节点 或者 属性相关</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用CreateElement方法创建Xml子项XmlElement对象并设置它们的InnerText值。</span></span><br><span class="line">    <span class="comment">//XmlElement对象表示不带数据的标记或元素。</span></span><br><span class="line">    XmlElement name = xml.CreateElement(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    name.InnerText = <span class="keyword">this</span>.name;</span><br><span class="line">    playerInfo.AppendChild(name);</span><br><span class="line"></span><br><span class="line">    XmlElement atk = xml.CreateElement(<span class="string">&quot;atk&quot;</span>);</span><br><span class="line">    atk.InnerText = <span class="keyword">this</span>.atk.ToString();</span><br><span class="line">    playerInfo.AppendChild(atk);</span><br><span class="line"></span><br><span class="line">    XmlElement def = xml.CreateElement(<span class="string">&quot;def&quot;</span>);</span><br><span class="line">    def.InnerText = <span class="keyword">this</span>.def.ToString();</span><br><span class="line">    playerInfo.AppendChild(def);</span><br><span class="line"></span><br><span class="line">    XmlElement moveSpeed = xml.CreateElement(<span class="string">&quot;moveSpeed&quot;</span>);</span><br><span class="line">    moveSpeed.InnerText = <span class="keyword">this</span>.moveSpeed.ToString();</span><br><span class="line">    playerInfo.AppendChild(moveSpeed);</span><br><span class="line"></span><br><span class="line">    XmlElement roundSpeed = xml.CreateElement(<span class="string">&quot;roundSpeed&quot;</span>);</span><br><span class="line">    roundSpeed.InnerText = <span class="keyword">this</span>.roundSpeed.ToString();</span><br><span class="line">    playerInfo.AppendChild(roundSpeed);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建XmlElement对象表示装备与其属性</span></span><br><span class="line">    XmlElement weapon = xml.CreateElement(<span class="string">&quot;weapon&quot;</span>);</span><br><span class="line"></span><br><span class="line">    XmlElement id = xml.CreateElement(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    id.InnerText = <span class="keyword">this</span>.weapon.id.ToString();</span><br><span class="line">    weapon.AppendChild(id);</span><br><span class="line"></span><br><span class="line">    XmlElement num = xml.CreateElement(<span class="string">&quot;num&quot;</span>);</span><br><span class="line">    num.InnerText = <span class="keyword">this</span>.weapon.num.ToString();</span><br><span class="line">    weapon.AppendChild(num);</span><br><span class="line"></span><br><span class="line">    playerInfo.AppendChild(weapon);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建XmlAttribute对象表示一个整数列表（listInt）</span></span><br><span class="line">    XmlElement listInt = xml.CreateElement(<span class="string">&quot;listInt&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.listInt.Count; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//使用CreateElement方法创建名为“int”的子节点，设置InnerText值并添加到根节点中的列表项。</span></span><br><span class="line">        XmlElement intNode = xml.CreateElement(<span class="string">&quot;int&quot;</span>);</span><br><span class="line">        intNode.InnerText = <span class="keyword">this</span>.listInt[i].ToString();</span><br><span class="line">        listInt.AppendChild(intNode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    playerInfo.AppendChild(listInt);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构建名为$itemList的XmlElement对象，该对象将保存所有的Item项目 .</span></span><br><span class="line">    XmlElement itemList = xml.CreateElement(<span class="string">&quot;itemList&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.itemList.Count; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//使用CreateElement方法分别在itemList根节点下创建三个Xml子项&lt;Element&gt;对象。</span></span><br><span class="line">        XmlElement itemNode = xml.CreateElement(<span class="string">&quot;Item&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//谁每个XmlElement对象的ID和Num属性各自包含了itemList中的Item对象的ID属性和Num属性。</span></span><br><span class="line">        itemNode.SetAttribute(<span class="string">&quot;id&quot;</span>, <span class="keyword">this</span>.itemList[i].id.ToString());</span><br><span class="line">        itemNode.SetAttribute(<span class="string">&quot;num&quot;</span>, <span class="keyword">this</span>.itemList[i].num.ToString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将三个XmlElement对象都添加到itemList节点之下。</span></span><br><span class="line">        itemList.AppendChild(itemNode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    playerInfo.AppendChild(itemList);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个名为itemDict的XmlElement对象，该对象将保存所有Item相关数据</span></span><br><span class="line">    XmlElement itemDic = xml.CreateElement(<span class="string">&quot;itemDic&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="built_in">int</span> key <span class="keyword">in</span> <span class="keyword">this</span>.itemDic.Keys)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//分别实例化intNode和itemNode对象来存储Dictionary&lt;int,Item&gt;对象的键值对数据。</span></span><br><span class="line">        XmlElement intNode = xml.CreateElement(<span class="string">&quot;int&quot;</span>);</span><br><span class="line">        intNode.InnerText = key.ToString();   <span class="comment">//key作为标记内部的InnerText值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//itemNode的ID属性和Num属性包含字典项的Id属性和Num属性。</span></span><br><span class="line">        XmlElement itemNode = xml.CreateElement(<span class="string">&quot;Item&quot;</span>);</span><br><span class="line">        itemNode.SetAttribute(<span class="string">&quot;id&quot;</span>, <span class="keyword">this</span>.itemDic[key].id.ToString());</span><br><span class="line">        itemNode.SetAttribute(<span class="string">&quot;num&quot;</span>, <span class="keyword">this</span>.itemDic[key].num.ToString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加这两个XmlElement对象到XmlDocument对象中。</span></span><br><span class="line">        itemDic.AppendChild(intNode);</span><br><span class="line">        itemDic.AppendChild(itemNode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将此XmlElement对象添加到根XmlElement对象之下</span></span><br><span class="line">    playerInfo.AppendChild(itemDic);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.使用XmlDocument类的Save()方法将生成的XML文本与指定路径path的文件进行存储。</span></span><br><span class="line">    xml.Save(path);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;xml决定存储在哪个文件夹下&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#xml决定存储在哪个文件夹下&quot;&gt;&lt;/a&gt; Xml决定存储在哪个文件夹下&lt;/h1&gt;
&lt;p&gt;注意：存储xml文件 在Unity中&lt;strong&gt;一定是使用各平台都可</summary>
      
    
    
    
    <category term="数据" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE/"/>
    
    <category term="数据持久化" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    
    <category term="XML" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/"/>
    
    <category term="XML基础知识" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="数据" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE/"/>
    
    <category term="数据持久化" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    
    <category term="XML" scheme="http://example.com/tags/XML/"/>
    
    <category term="XML基础知识" scheme="http://example.com/tags/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>5.CSharp读取XML文件</title>
    <link href="http://example.com/2025/03/06/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/5.CSharp%E8%AF%BB%E5%8F%96XML%E6%96%87%E4%BB%B6/"/>
    <id>http://example.com/2025/03/06/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/5.CSharp%E8%AF%BB%E5%8F%96XML%E6%96%87%E4%BB%B6/</id>
    <published>2025-03-06T03:16:38.000Z</published>
    <updated>2025-03-06T07:34:53.779Z</updated>
    
    <content type="html"><![CDATA[<p>在 C# 中操作 XML 主要有 <strong>三种常用方式</strong>：<code>XmlDocument</code>（DOM 模式）、<code>XmlTextReader/XmlTextWriter</code>（流式读写）和 <strong>LINQ to XML</strong>。</p><table><thead><tr><th><strong>特性</strong></th><th>XmlDocument (DOM)</th><th>XmlTextReader</th><th>LINQ to XML</th></tr></thead><tbody><tr><td><strong>内存占用</strong></td><td>高（全加载到内存）</td><td>低（流式读取）</td><td>中等</td></tr><tr><td><strong>读写灵活性</strong></td><td>高（可随意修改节点）</td><td>只读</td><td>高（支持增删改查）</td></tr><tr><td><strong>语法复杂度</strong></td><td>中等（需手动操作节点）</td><td>高（需处理读取状态）</td><td>低（类似 SQL 查询）</td></tr><tr><td><strong>适用场景</strong></td><td>小文件、需频繁修改结构</td><td>超大文件、只读</td><td>大多数常规场景（推荐）</td></tr><tr><td><strong>Unity 兼容性</strong></td><td>全平台支持</td><td>全平台支持</td><td>全平台支持</td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><h1 id="xmldocumentxml文档类"><a class="markdownIt-Anchor" href="#xmldocumentxml文档类"></a> <code>XmlDocument</code>Xml文档类</h1><p><code>XmlDocument</code> 是一个表示 XML 文档的类，它提供了一种基于文档对象模型（DOM）的方式来处理 XML 数据。DOM 模型将整个 XML 文档加载到内存中，形成一个树形结构，你可以通过该结构方便地访问、修改和操作 XML 文档的各个部分，如元素、属性、文本节点等。<br /><strong>主要属性</strong></p><ul><li><strong><code>DocumentElement</code></strong>：获取 XML 文档的根元素。</li><li><strong><code>ChildNodes</code></strong>：获取文档的所有子节点。</li><li><strong><code>FirstChild</code></strong>：获取文档的第一个子节点。</li><li><strong><code>LastChild</code></strong>：获取文档的最后一个子节点。</li></ul><p><strong>主要方法</strong></p><ul><li><strong><code>Load(string filename)</code></strong>：从指定的文件中加载 XML 文档。</li><li><strong><code>LoadXml(string xml)</code></strong>：从字符串中加载 XML 数据。</li><li><strong><code>Save(string filename)</code></strong>：将 XML 文档保存到指定的文件中。</li><li><strong><code>CreateElement(string name)</code></strong>：创建一个具有指定名称的新元素。</li><li><strong><code>CreateAttribute(string name)</code></strong>：创建一个具有指定名称的新属性。</li><li><strong><code>SelectSingleNode(string xpath)</code></strong>：使用 XPath 表达式选择单个节点。</li><li><strong><code>SelectNodes(string xpath)</code></strong>：使用 XPath 表达式选择多个节点。</li></ul><h1 id="xmlnode节点信息类"><a class="markdownIt-Anchor" href="#xmlnode节点信息类"></a> <code>XmlNode</code>节点信息类</h1><p><strong>主要属性</strong></p><ul><li><strong><code>Name</code></strong>：获取节点的名称。</li><li><strong><code>InnerText</code></strong>：获取或设置节点及其所有子节点的串联值。对于元素节点，它会返回该元素内所有文本节点的文本内容。</li><li><strong><code>NodeType</code></strong>：获取节点的类型，例如元素节点（<code>XmlNodeType.Element</code>）、属性节点（<code>XmlNodeType.Attribute</code>）、文本节点（<code>XmlNodeType.Text</code>）等。</li><li><strong><code>ParentNode</code></strong>：获取该节点的父节点。</li><li><strong><code>ChildNodes</code></strong>：获取该节点的所有子节点，返回一个 <code>XmlNodeList</code> 对象。</li></ul><p><strong>主要方法</strong></p><ul><li><strong><code>AppendChild(XmlNode newChild)</code></strong>：将指定的节点添加到该节点的子节点列表的末尾。</li><li><strong><code>RemoveChild(XmlNode oldChild)</code></strong>：从该节点的子节点列表中移除指定的子节点。</li><li><strong><code>SelectSingleNode(string xpath)</code></strong>：使用 XPath 表达式选择单个子节点。</li><li><strong><code>SelectNodes(string xpath)</code></strong>：使用 XPath 表达式选择多个子节点，返回一个 <code>XmlNodeList</code> 对象。</li></ul><h1 id="xpath-表达式"><a class="markdownIt-Anchor" href="#xpath-表达式"></a> XPath 表达式</h1><p><strong>一句话定义</strong>：  XPath 是一种用于在 XML/HTML 文档中精准定位节点的查询语言。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">GameSkills</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 战士技能 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Skill</span> <span class="attr">category</span>=<span class="string">&quot;melee&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Name</span>&gt;</span>旋风斩<span class="tag">&lt;/<span class="name">Name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Damage</span>&gt;</span>120<span class="tag">&lt;/<span class="name">Damage</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Cooldown</span>&gt;</span>8<span class="tag">&lt;/<span class="name">Cooldown</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Effect</span>&gt;</span>AOE<span class="tag">&lt;/<span class="name">Effect</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Skill</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 法师技能 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Skill</span> <span class="attr">category</span>=<span class="string">&quot;magic&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Name</span>&gt;</span>火球术<span class="tag">&lt;/<span class="name">Name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Damage</span>&gt;</span>200<span class="tag">&lt;/<span class="name">Damage</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Cooldown</span>&gt;</span>5<span class="tag">&lt;/<span class="name">Cooldown</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Requires</span>&gt;</span>法杖<span class="tag">&lt;/<span class="name">Requires</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Skill</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">GameSkills</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="路径表达式"><a class="markdownIt-Anchor" href="#路径表达式"></a> 路径表达式</h2><table><thead><tr><th>类型</th><th>符号</th><th>作用</th><th>游戏案例</th></tr></thead><tbody><tr><td><strong>绝对路径</strong></td><td><code>/</code></td><td>从根节点开始</td><td><code>/GameSkills/Skill</code> → 所有Skill节点</td></tr><tr><td><strong>相对路径</strong></td><td><code>//</code></td><td>任意层级查找</td><td><code>//Damage</code> → 所有伤害数值节点</td></tr><tr><td><strong>当前节点</strong></td><td><code>.</code></td><td>当前上下文节点</td><td><code>./Name</code> → 当前Skill下的名字</td></tr><tr><td><strong>父节点</strong></td><td><code>..</code></td><td>返回上级节点</td><td><code>Cooldown/..</code> → 包含冷却时间的Skill节点</td></tr></tbody></table><p><strong>游戏示例</strong>：快速找到火球术的伤害值</p><figure class="highlight xpath"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/GameSkills/Skill[Name=<span class="string">&#x27;火球术&#x27;</span>]/Damage</span><br></pre></td></tr></table></figure><h2 id="节点选择"><a class="markdownIt-Anchor" href="#节点选择"></a> 节点选择</h2><table><thead><tr><th>语法</th><th>作用</th><th>游戏案例</th></tr></thead><tbody><tr><td><code>element</code></td><td>标签名选择</td><td><code>Skill</code> → 所有技能节点</td></tr><tr><td><code>*</code></td><td>通配符匹配任何元素</td><td><code>//*[@category]</code> → 带category属性的节点</td></tr><tr><td><code>@attr</code></td><td>属性选择器</td><td><code>//Skill[@category='magic']</code> → 魔法类技能</td></tr><tr><td><code>text()</code></td><td>获取文本内容</td><td><code>//Name/text()</code> → “旋风斩”, “火球术”</td></tr><tr><td><code>node()</code></td><td>匹配任何类型节点</td><td><code>//Effect/node()</code> → 包含文本和子节点</td></tr></tbody></table><p><strong>游戏示例</strong>：找出需要法杖的技能名称</p><figure class="highlight xpath"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//Skill[Requires=<span class="string">&#x27;法杖&#x27;</span>]/Name</span><br></pre></td></tr></table></figure><h2 id="谓词predicates"><a class="markdownIt-Anchor" href="#谓词predicates"></a> 谓词（Predicates）</h2><p><strong>用方括号 [ ] 过滤节点</strong></p><table><thead><tr><th>表达式</th><th>含义</th><th>游戏案例</th></tr></thead><tbody><tr><td><code>[1]</code></td><td>位置索引（从1开始）</td><td><code>/GameSkills/Skill[1]</code> → 第一个技能节点</td></tr><tr><td><code>[last()]</code></td><td>最后一个元素</td><td><code>//Skill[last()]</code> → 法师技能节点</td></tr><tr><td><code>[Damage &gt; 150]</code></td><td>数值比较</td><td>筛选伤害&gt;150的技能</td></tr><tr><td><code>[contains(Name, '火')]</code></td><td>文本包含</td><td>名称含「火」的技能</td></tr></tbody></table><p><strong>游戏示例</strong>：找冷却时间≥5的物理技能</p><figure class="highlight xpath"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//Skill[@category=<span class="string">&#x27;melee&#x27;</span> <span class="keyword">and</span> Cooldown &gt;=<span class="number">5</span>]</span><br></pre></td></tr></table></figure><h1 id="读取xml文件信息"><a class="markdownIt-Anchor" href="#读取xml文件信息"></a> 读取XMl文件信息</h1><p>读取放在<code>Resources</code>文件夹和<code>StreamingAssets</code>文件夹的<strong>TestXml.xml</strong></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">XmlDocument xmlDocument = <span class="keyword">new</span> XmlDocument();</span><br><span class="line"></span><br><span class="line"><span class="comment">//加载存放在Resorces文件夹下的xml文件 类型是TextAsset</span></span><br><span class="line">TextAsset textAsset = Resources.Load&lt;TextAsset&gt;(<span class="string">&quot;TestXml&quot;</span>);</span><br><span class="line">print(textAsset.text);<span class="comment">//可以输出xml文本</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//XmlDocument类中的LoadXml方法 能够翻译字符串为xml对象</span></span><br><span class="line">xmlDocument.LoadXml(textAsset.text);</span><br></pre></td></tr></table></figure><p>XML文件要在StreamingAssets文件夹下 因为StreamingAssets不会被压缩加密 Resources文件夹会</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//XmlDocument类中的Load方法 传入xml文件的路径直接加载xml</span></span><br><span class="line">xmlDocument.Load(Application.streamingAssetsPath + <span class="string">&quot;/TestXml.xml&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="读取元素和属性信息"><a class="markdownIt-Anchor" href="#读取元素和属性信息"></a> 读取元素和属性信息</h1><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//XmlDocument中的SelectSingleNode方法 获取xml当中的根节点</span></span><br><span class="line">XmlNode root = xmlDocument.SelectSingleNode(<span class="string">&quot;Root&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//XmlNode中的SelectSingleNode方法 再通过根节点 去获取下面的子节点</span></span><br><span class="line">XmlNode nodeName = root.SelectSingleNode(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(nodeName.InnerText);</span><br><span class="line">XmlNode nodeAge = root.SelectSingleNode(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">print(nodeAge.InnerText);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>获取属性信息</strong></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">XmlNode nodeItem = root.SelectSingleNode(<span class="string">&quot;Item&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//XmlNode中的Attributes用中括号传入对应属性名字后.出Value  直接中括号获取信息</span></span><br><span class="line">print(nodeItem.Attributes[<span class="string">&quot;id&quot;</span>].Value);<span class="comment">//1</span></span><br><span class="line">print(nodeItem.Attributes[<span class="string">&quot;num&quot;</span>].Value);<span class="comment">//10</span></span><br></pre></td></tr></table></figure><p><strong>获取所有同一名字节点</strong></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//XmlNodeList中的SelectNodes方法 获取一个节点下的同名节点的方法</span></span><br><span class="line">XmlNodeList friendList = root.SelectNodes(<span class="string">&quot;Friend&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历所有节点</span></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; friendList.Count; i++)</span><br><span class="line">&#123;</span><br><span class="line">    print(friendList[i].SelectSingleNode(<span class="string">&quot;name&quot;</span>).InnerText);</span><br><span class="line">    print(friendList[i].SelectSingleNode(<span class="string">&quot;age&quot;</span>).InnerText);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>读取XML文件<ul><li><code>XmlDocument xmlDocument = new XmlDocument();</code></li><li>读取文本方式1-<code>xmlDocument.LoadXml(传入xml文本字符串)</code></li><li>读取文本方式2-<code>xmlDocument.Load(传入路径)</code></li></ul></li><li>读取元素和属性<ul><li>获取单个节点 : <code>XmlNode node = xmlDocument.SelectSingleNode(节点名)</code></li><li>获取多个节点 : <code>XmlNodeList nodeList = xmlDocument.SelectNodes(节点名)</code></li><li>获取节点元素内容：<code>node.InnerText</code></li><li>获取节点元素属性：<ul><li><code>item.Attributes[“属性名”].Value</code></li><li><code>item.Attributes.GetNamedItem(“属性名”).Value</code></li></ul></li><li>通过迭代器遍历或者循环遍历XmlNodeList对象可以获取到各单个元素节点</li></ul></li></ol><h1 id="练习"><a class="markdownIt-Anchor" href="#练习"></a> 练习</h1><p><strong>有一个玩家数据类，请为该类写一个方法结合XML读取知识点，将XML中数据读取到PlayerInfo的一个对象中</strong><br /><img src="/2025/03/06/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/5.CSharp%E8%AF%BB%E5%8F%96XML%E6%96%87%E4%BB%B6/file-20250306150429321.png" alt="" /><br /><strong>PlayerInfo.cs</strong></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Xml;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Item</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> id;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayerInfo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> atk;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> def;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> moveSpeed;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> roundSpeed;</span><br><span class="line">    <span class="keyword">public</span> Item weapon;</span><br><span class="line">    <span class="keyword">public</span> List&lt;<span class="built_in">int</span>&gt; listInt;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Item&gt; itemList;</span><br><span class="line">    <span class="keyword">public</span> Dictionary&lt;<span class="built_in">int</span>, Item&gt; itemDic;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LoadData</span>(<span class="params"><span class="built_in">string</span> fileName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> path = Application.persistentDataPath + <span class="string">&quot;/&quot;</span> + fileName + <span class="string">&quot;.xml&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!File.Exists(path))</span><br><span class="line">        &#123;</span><br><span class="line">            path = Application.streamingAssetsPath + <span class="string">&quot;/&quot;</span> + fileName + <span class="string">&quot;.xml&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加载 XML 文件信息</span></span><br><span class="line">        XmlDocument xml = <span class="keyword">new</span> XmlDocument();</span><br><span class="line">        <span class="comment">//加载</span></span><br><span class="line">        xml.Load(path);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加载根节点才能加载后面的内容</span></span><br><span class="line">        XmlNode playerInfo = xml.SelectSingleNode(<span class="string">&quot;PlayerInfo&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过根节点去加载具体的信息</span></span><br><span class="line">        <span class="keyword">this</span>.name = playerInfo.SelectSingleNode(<span class="string">&quot;name&quot;</span>).InnerText;</span><br><span class="line">        <span class="keyword">this</span>.atk = <span class="built_in">int</span>.Parse(playerInfo.SelectSingleNode(<span class="string">&quot;atk&quot;</span>).InnerText);</span><br><span class="line">        <span class="keyword">this</span>.def = <span class="built_in">int</span>.Parse(playerInfo.SelectSingleNode(<span class="string">&quot;def&quot;</span>).InnerText);</span><br><span class="line">        <span class="keyword">this</span>.moveSpeed = <span class="built_in">float</span>.Parse(playerInfo.SelectSingleNode(<span class="string">&quot;moveSpeed&quot;</span>).InnerText);</span><br><span class="line">        <span class="keyword">this</span>.roundSpeed = <span class="built_in">float</span>.Parse(playerInfo.SelectSingleNode(<span class="string">&quot;roundSpeed&quot;</span>).InnerText);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加载武器信息节点</span></span><br><span class="line">        XmlNode weaponNode = playerInfo.SelectSingleNode(<span class="string">&quot;weapon&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.weapon = <span class="keyword">new</span> Item();</span><br><span class="line">        <span class="keyword">this</span>.weapon.id = <span class="built_in">int</span>.Parse(weaponNode.SelectSingleNode(<span class="string">&quot;id&quot;</span>).InnerText);</span><br><span class="line">        <span class="keyword">this</span>.weapon.num = <span class="built_in">int</span>.Parse(weaponNode.SelectSingleNode(<span class="string">&quot;num&quot;</span>).InnerText);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加载整数列表节点</span></span><br><span class="line">        XmlNode listIntNode = playerInfo.SelectSingleNode(<span class="string">&quot;listInt&quot;</span>);</span><br><span class="line">        XmlNodeList intList = listIntNode.SelectNodes(<span class="string">&quot;int&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.listInt = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; intList.Count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.listInt.Add(<span class="built_in">int</span>.Parse(intList[i].InnerText));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加载物品列表节点</span></span><br><span class="line">        XmlNode itemListNode = playerInfo.SelectSingleNode(<span class="string">&quot;itemList&quot;</span>);</span><br><span class="line">        XmlNodeList items = itemListNode.SelectNodes(<span class="string">&quot;Item&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.itemList = <span class="keyword">new</span> List&lt;Item&gt;();</span><br><span class="line">        <span class="keyword">foreach</span> (XmlNode item <span class="keyword">in</span> items)</span><br><span class="line">        &#123;</span><br><span class="line">            Item item2 = <span class="keyword">new</span> Item();</span><br><span class="line">            item2.id = <span class="built_in">int</span>.Parse(item.Attributes[<span class="string">&quot;id&quot;</span>].Value);</span><br><span class="line">            item2.num = <span class="built_in">int</span>.Parse(item.Attributes[<span class="string">&quot;num&quot;</span>].Value);</span><br><span class="line">            <span class="keyword">this</span>.itemList.Add(item2);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加载物品字典节点</span></span><br><span class="line">        XmlNode itemDicNode = playerInfo.SelectSingleNode(<span class="string">&quot;itemDic&quot;</span>);</span><br><span class="line">        XmlNodeList keyInt = itemDicNode.SelectNodes(<span class="string">&quot;int&quot;</span>);</span><br><span class="line">        XmlNodeList valueItem = itemDicNode.SelectNodes(<span class="string">&quot;Item&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.itemDic = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">int</span>, Item&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; keyInt.Count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> key = <span class="built_in">int</span>.Parse(keyInt[i].InnerText);</span><br><span class="line">            Item <span class="keyword">value</span> = <span class="keyword">new</span> Item();</span><br><span class="line">            <span class="keyword">value</span>.id = <span class="built_in">int</span>.Parse(valueItem[i].Attributes[<span class="string">&quot;id&quot;</span>].Value);</span><br><span class="line">            <span class="keyword">value</span>.num = <span class="built_in">int</span>.Parse(valueItem[i].Attributes[<span class="string">&quot;num&quot;</span>].Value);</span><br><span class="line">            <span class="keyword">this</span>.itemDic.Add(key, <span class="keyword">value</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Test.cs</strong></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        PlayerInfo p = <span class="keyword">new</span> PlayerInfo();</span><br><span class="line">        p.LoadData(<span class="string">&quot;PlayerInfo&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在 C# 中操作 XML 主要有 &lt;strong&gt;三种常用方式&lt;/strong&gt;：&lt;code&gt;XmlDocument&lt;/code&gt;（DOM 模式）、&lt;code&gt;XmlTextReader/XmlTextWriter&lt;/code&gt;（流式读写）和 &lt;strong&gt;LINQ to</summary>
      
    
    
    
    <category term="数据" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE/"/>
    
    <category term="数据持久化" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    
    <category term="XML" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/"/>
    
    <category term="XML基础知识" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="数据" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE/"/>
    
    <category term="数据持久化" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    
    <category term="XML" scheme="http://example.com/tags/XML/"/>
    
    <category term="XML基础知识" scheme="http://example.com/tags/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>4.XML文件存放的位置</title>
    <link href="http://example.com/2025/03/06/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/4.XML%E6%96%87%E4%BB%B6%E5%AD%98%E6%94%BE%E7%9A%84%E4%BD%8D%E7%BD%AE/"/>
    <id>http://example.com/2025/03/06/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/4.XML%E6%96%87%E4%BB%B6%E5%AD%98%E6%94%BE%E7%9A%84%E4%BD%8D%E7%BD%AE/</id>
    <published>2025-03-06T03:09:36.000Z</published>
    <updated>2025-03-06T03:15:38.914Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2025/03/06/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/4.XML%E6%96%87%E4%BB%B6%E5%AD%98%E6%94%BE%E7%9A%84%E4%BD%8D%E7%BD%AE/file-20250306111106544.png" alt="" /></p><p>回顾<a href="/2025/03/04/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%9F%BA%E7%A1%80/11.%E7%89%B9%E6%AE%8A%E6%96%87%E4%BB%B6%E5%A4%B9/" title="11.特殊文件夹">特殊文件夹</a></p><p>只读不写的XML文件可以放在<code>Resources</code>或者<code>StreamingAssets </code>文件夹下<br />动态存储的XML文件放在<code>Application.persistentDataPath </code>路径下<br />创建Resources和StreamAssets文件夹，放入相同的测试XML文件</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2025/03/06/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/4.XML%</summary>
      
    
    
    
    <category term="数据" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE/"/>
    
    <category term="数据持久化" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    
    <category term="XML" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/"/>
    
    <category term="XML基础知识" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="数据" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE/"/>
    
    <category term="数据持久化" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    
    <category term="XML" scheme="http://example.com/tags/XML/"/>
    
    <category term="XML基础知识" scheme="http://example.com/tags/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>3.XML属性</title>
    <link href="http://example.com/2025/03/06/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/3.XML%E5%B1%9E%E6%80%A7/"/>
    <id>http://example.com/2025/03/06/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/3.XML%E5%B1%9E%E6%80%A7/</id>
    <published>2025-03-06T02:48:24.000Z</published>
    <updated>2025-03-06T03:04:32.329Z</updated>
    
    <content type="html"><![CDATA[<h1 id="属性语法"><a class="markdownIt-Anchor" href="#属性语法"></a> 属性语法</h1><p><img src="/2025/03/06/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/3.XML%E5%B1%9E%E6%80%A7/file-20250306104832957.png" alt="" /><br /><strong>作用</strong>：为元素附加额外信息。<br /><strong>规则</strong>：</p><ul><li>属性值必须用引号包裹（单引号或双引号）。</li><li>同一元素不能有重复属性名。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Student</span> <span class="attr">id</span>=<span class="string">&quot;101&quot;</span> <span class="attr">class</span>=<span class="string">&quot;A班&quot;</span>&gt;</span>  <span class="comment">&lt;!-- id 和 class 是属性 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Name</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">Name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Student</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="和元素节点区别"><a class="markdownIt-Anchor" href="#和元素节点区别"></a> 和元素节点区别</h1><p><img src="/2025/03/06/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/3.XML%E5%B1%9E%E6%80%A7/file-20250306105214598.png" alt="" /></p><ul><li><strong>用元素</strong>：当数据是<strong>核心内容</strong>或<strong>需要嵌套</strong>时。</li><li><strong>用属性</strong>：当数据是<strong>次要信息</strong>或<strong>简单键值对</strong>。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 元素表示法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Student</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Id</span>&gt;</span>101<span class="tag">&lt;/<span class="name">Id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Name</span>&gt;</span>王五<span class="tag">&lt;/<span class="name">Name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Student</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 属性表示法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Student</span> <span class="attr">id</span>=<span class="string">&quot;101&quot;</span> <span class="attr">name</span>=<span class="string">&quot;王五&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2025/03/06/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/3.XML%E5%B1%9E%E6%80%A7/file-20250306105935001.png" alt="" /></p><h1 id="练习"><a class="markdownIt-Anchor" href="#练习"></a> 练习</h1><p><img src="/2025/03/06/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/3.XML%E5%B1%9E%E6%80%A7/file-20250306110232832.png" alt="" /><br /><strong>请把上面的类结构用XML文档的形式翻译过来</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PlayerInfo</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--自己定一个xml代表 类对象数据的规则</span></span><br><span class="line"><span class="comment">    我们的元素节点名 就用我们的变量名命名</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>你爹<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">atk</span>&gt;</span>10<span class="tag">&lt;/<span class="name">atk</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">def</span>&gt;</span>5<span class="tag">&lt;/<span class="name">def</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">moveSpeed</span>&gt;</span>20<span class="tag">&lt;/<span class="name">moveSpeed</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">roundSpeed</span>&gt;</span>20<span class="tag">&lt;/<span class="name">roundSpeed</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">weapon</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>1<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">num</span>&gt;</span>1<span class="tag">&lt;/<span class="name">num</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">weapon</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--当出现没有变量名的数据时 我们就用变量类型名命名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listInt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">int</span>&gt;</span>1<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">int</span>&gt;</span>2<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">int</span>&gt;</span>3<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listInt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">itemList</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Item</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span> <span class="attr">num</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Item</span> <span class="attr">id</span>=<span class="string">&quot;2&quot;</span> <span class="attr">num</span>=<span class="string">&quot;20&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Item</span> <span class="attr">id</span>=<span class="string">&quot;3&quot;</span> <span class="attr">num</span>=<span class="string">&quot;30&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Item</span> <span class="attr">id</span>=<span class="string">&quot;4&quot;</span> <span class="attr">num</span>=<span class="string">&quot;40&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">itemList</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">itemDic</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">int</span>&gt;</span>1<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Item</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span> <span class="attr">num</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">int</span>&gt;</span>2<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Item</span> <span class="attr">id</span>=<span class="string">&quot;2&quot;</span> <span class="attr">num</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">int</span>&gt;</span>3<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Item</span> <span class="attr">id</span>=<span class="string">&quot;3&quot;</span> <span class="attr">num</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 另一种写法 但是建议大家都统一</span></span><br><span class="line"><span class="comment">        &lt;int&gt;4&lt;/int&gt;</span></span><br><span class="line"><span class="comment">        &lt;Item&gt;</span></span><br><span class="line"><span class="comment">            &lt;id&gt;4&lt;/id&gt;</span></span><br><span class="line"><span class="comment">            &lt;num&gt;1&lt;/num&gt;</span></span><br><span class="line"><span class="comment">        &lt;/Item&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">itemDic</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">PlayerInfo</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;属性语法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#属性语法&quot;&gt;&lt;/a&gt; 属性语法&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/2025/03/06/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%</summary>
      
    
    
    
    <category term="数据" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE/"/>
    
    <category term="数据持久化" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    
    <category term="XML" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/"/>
    
    <category term="XML基础知识" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="数据" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE/"/>
    
    <category term="数据持久化" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    
    <category term="XML" scheme="http://example.com/tags/XML/"/>
    
    <category term="XML基础知识" scheme="http://example.com/tags/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>2.XML基础语法</title>
    <link href="http://example.com/2025/03/06/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2.XML%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>http://example.com/2025/03/06/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2.XML%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</id>
    <published>2025-03-06T02:29:32.000Z</published>
    <updated>2025-03-06T02:56:22.525Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2025/03/06/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2.XML%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/file-20250306104637037.png" alt="" /><br /><img src="/2025/03/06/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2.XML%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/file-20250306103025461.png" alt="" /></p><h1 id="注释"><a class="markdownIt-Anchor" href="#注释"></a> 注释</h1><p><img src="/2025/03/06/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2.XML%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/file-20250306103203211.png" alt="" /></p><h1 id="固定内容"><a class="markdownIt-Anchor" href="#固定内容"></a> 固定内容</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--XML 声明（可选）：定义版本和编码--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--version代表版本 encoding代表编码格式--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">编码格式就 是读取文件时 解析字符串使用的编码是什么</span></span><br><span class="line"><span class="comment">编码格式：不同的字符 在内存中的二进制是不一样的 每个字符对应一个数字</span></span><br><span class="line"><span class="comment">不同的编码格式 字符 对应的 二进制 是不一样的</span></span><br><span class="line"><span class="comment">举个例子</span></span><br><span class="line"><span class="comment">ASCII:A-11</span></span><br><span class="line"><span class="comment">UTF-8:A-21</span></span><br><span class="line"><span class="comment">乱码的出现就是因为用来不同的编码格式解析文本内容</span></span><br><span class="line"><span class="comment">由于字符和对应的二进制不匹配 就会出现乱码</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">&lt;? xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;</span><br></pre></td></tr></table></figure><h1 id="基本语法"><a class="markdownIt-Anchor" href="#基本语法"></a> 基本语法</h1><p><img src="/2025/03/06/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2.XML%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/file-20250306104357043.png" alt="" /><br /><img src="/2025/03/06/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2.XML%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/file-20250306104532481.png" alt="" /></p><ul><li><strong>根元素</strong>：唯一的最外层标签。</li><li><strong>子元素</strong>：嵌套在根元素内部。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span>  <span class="comment">&lt;!-- 声明 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">School</span>&gt;</span>                                <span class="comment">&lt;!-- 根元素 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Student</span> <span class="attr">id</span>=<span class="string">&quot;101&quot;</span>&gt;</span>                   <span class="comment">&lt;!-- 子元素 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Name</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">Name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">Age</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">School</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="xml-命名规则"><a class="markdownIt-Anchor" href="#xml-命名规则"></a> <strong>XML 命名规则</strong></h1><p>标签和属性名基本遵守C#中的变量命名规则：</p><ol><li>以字母或下划线开头。</li><li>不能包含空格。</li><li>避免使用特殊符号（如 <code>!@$%</code>）。</li><li>区分大小写（推荐全小写或驼峰式）。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h1 id="特殊字符转义"><a class="markdownIt-Anchor" href="#特殊字符转义"></a> <strong>特殊字符转义</strong></h1><p>当内容包含 <code>&lt;</code>、<code>&gt;</code>、<code>&amp;</code> 等符号时，需用转义符：</p><table><thead><tr><th>字符</th><th>转义符</th></tr></thead><tbody><tr><td><code>&lt;</code></td><td><code>&amp;lt;</code></td></tr><tr><td><code>&gt;</code></td><td><code>&amp;gt;</code></td></tr><tr><td><code>&amp;</code></td><td><code>&amp;amp;</code></td></tr><tr><td><code>&quot;</code></td><td><code>&amp;quot;</code></td></tr><tr><td><code>'</code></td><td><code>&amp;apos;</code></td></tr></tbody></table><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Formula</span>&gt;</span>3 <span class="symbol">&amp;lt;</span> 5<span class="tag">&lt;/<span class="name">Formula</span>&gt;</span>  <span class="comment">&lt;!-- 显示为 3 &lt; 5 --&gt;</span></span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2025/03/06/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2.XML%</summary>
      
    
    
    
    <category term="数据" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE/"/>
    
    <category term="数据持久化" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    
    <category term="XML" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/"/>
    
    <category term="XML基础知识" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="数据" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE/"/>
    
    <category term="数据持久化" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    
    <category term="XML" scheme="http://example.com/tags/XML/"/>
    
    <category term="XML基础知识" scheme="http://example.com/tags/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>1.XML基础知识概述</title>
    <link href="http://example.com/2025/03/06/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1.XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%A6%82%E8%BF%B0/"/>
    <id>http://example.com/2025/03/06/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1.XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%A6%82%E8%BF%B0/</id>
    <published>2025-03-06T02:09:16.000Z</published>
    <updated>2025-03-06T02:28:46.003Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2025/03/06/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1.XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%A6%82%E8%BF%B0/file-20250306101008087.png" alt="" /><br /><img src="/2025/03/06/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1.XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%A6%82%E8%BF%B0/file-20250306101002528.png" alt="" /><br /><img src="/2025/03/06/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1.XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%A6%82%E8%BF%B0/file-20250306101046007.png" alt="" /></p><p><img src="/2025/03/06/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1.XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%A6%82%E8%BF%B0/file-20250306101027214.png" alt="" /></p><p><img src="/2025/03/06/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1.XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%A6%82%E8%BF%B0/file-20250306101124321.png" alt="" /></p><p><img src="/2025/03/06/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1.XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%A6%82%E8%BF%B0/file-20250306102506338.png" alt="" /></p><p><img src="/2025/03/06/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1.XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%A6%82%E8%BF%B0/file-20250306102536843.png" alt="" /></p><p><img src="/2025/03/06/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1.XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%A6%82%E8%BF%B0/file-20250306102843968.png" alt="" /></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2025/03/06/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1.XML%</summary>
      
    
    
    
    <category term="数据" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE/"/>
    
    <category term="数据持久化" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    
    <category term="XML" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/"/>
    
    <category term="XML基础知识" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/XML/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="数据" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE/"/>
    
    <category term="数据持久化" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    
    <category term="XML" scheme="http://example.com/tags/XML/"/>
    
    <category term="XML基础知识" scheme="http://example.com/tags/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>1.NGUI基础知识概述</title>
    <link href="http://example.com/2025/03/05/UI%E7%B3%BB%E7%BB%9F/NGUI/NGUI%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1.NGUI%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%A6%82%E8%BF%B0/"/>
    <id>http://example.com/2025/03/05/UI%E7%B3%BB%E7%BB%9F/NGUI/NGUI%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1.NGUI%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%A6%82%E8%BF%B0/</id>
    <published>2025-03-05T09:12:05.000Z</published>
    <updated>2025-03-07T05:49:21.922Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2025/03/05/UI%E7%B3%BB%E7%BB%9F/NGUI/NGUI%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1.NGUI%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%A6%82%E8%BF%B0/file-20250307133830276.png" alt="" /></p><p><img src="/2025/03/05/UI%E7%B3%BB%E7%BB%9F/NGUI/NGUI%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1.NGUI%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%A6%82%E8%BF%B0/file-20250307134014136.png" alt="" /></p><p><img src="/2025/03/05/UI%E7%B3%BB%E7%BB%9F/NGUI/NGUI%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1.NGUI%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%A6%82%E8%BF%B0/file-20250307134101521.png" alt="" /></p><p><img src="/2025/03/05/UI%E7%B3%BB%E7%BB%9F/NGUI/NGUI%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1.NGUI%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%A6%82%E8%BF%B0/file-20250307134402428.png" alt="" /></p><p><img src="/2025/03/05/UI%E7%B3%BB%E7%BB%9F/NGUI/NGUI%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1.NGUI%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%A6%82%E8%BF%B0/file-20250307134920103.png" alt="" /></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2025/03/05/UI%E7%B3%BB%E7%BB%9F/NGUI/NGUI%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1.NGUI%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%A6</summary>
      
    
    
    
    <category term="UI系统" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="NGUI" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/NGUI/"/>
    
    <category term="NGUI基础知识" scheme="http://example.com/categories/UI%E7%B3%BB%E7%BB%9F/NGUI/NGUI%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="UI系统" scheme="http://example.com/tags/UI%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="NGUI" scheme="http://example.com/tags/NGUI/"/>
    
    <category term="NGUI基础知识" scheme="http://example.com/tags/NGUI%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>19.unity基础总结</title>
    <link href="http://example.com/2025/03/05/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%9F%BA%E7%A1%80/19.unity%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2025/03/05/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%9F%BA%E7%A1%80/19.unity%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/</id>
    <published>2025-03-05T08:55:39.000Z</published>
    <updated>2025-03-05T09:09:05.873Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2025/03/05/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%9F%BA%E7%A1%80/19.unity%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/file-20250305165545976.png" alt="" /></p><p><img src="/2025/03/05/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%9F%BA%E7%A1%80/19.unity%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/file-20250305165815723.png" alt="" /></p><p><img src="/2025/03/05/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%9F%BA%E7%A1%80/19.unity%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/file-20250305165849997.png" alt="" /></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2025/03/05/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%9F%BA%E7%A1%80/19.unity%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/fil</summary>
      
    
    
    
    <category term="游戏引擎" scheme="http://example.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/"/>
    
    <category term="unity" scheme="http://example.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/"/>
    
    <category term="unity基础" scheme="http://example.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="游戏引擎" scheme="http://example.com/tags/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/"/>
    
    <category term="unity" scheme="http://example.com/tags/unity/"/>
    
    <category term="unity基础" scheme="http://example.com/tags/unity%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>18.射线检测</title>
    <link href="http://example.com/2025/03/05/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%9F%BA%E7%A1%80/18.%E5%B0%84%E7%BA%BF%E6%A3%80%E6%B5%8B/"/>
    <id>http://example.com/2025/03/05/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%9F%BA%E7%A1%80/18.%E5%B0%84%E7%BA%BF%E6%A3%80%E6%B5%8B/</id>
    <published>2025-03-05T07:40:00.000Z</published>
    <updated>2025-03-05T08:56:35.551Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是射线检测"><a class="markdownIt-Anchor" href="#什么是射线检测"></a> 什么是射线检测</h1><ul><li>物理系统中</li><li>目前我们学习的物体相交判断</li><li><strong>碰撞检测</strong> - 必备条件 - 1刚体 2碰撞器</li><li><strong>范围检测</strong> - 必备条件 - 碰撞器</li></ul><p>如果想要做这样的碰撞检测呢？</p><ul><li>鼠标选择场景上一物体</li><li>FPS射击游戏（无弹道-不产生实际的子弹对象进行移动）</li><li>等等 需要判断一条线和物体的碰撞情况</li></ul><p>射线检测 就是来解决这些问题的</p><ul><li>它可以在指定点发射一个指定方向的射线</li><li>判断该射线与哪些碰撞器相交，得到对应对象</li><li>结合物理系统进行射线碰撞判断</li></ul><p>注意：</p><ul><li>距离、层级两个参数都是int类型</li><li>当我们传入参数时，一定要明确传入的参数代表的是距离还是层级</li></ul><h1 id="ray射线类"><a class="markdownIt-Anchor" href="#ray射线类"></a> Ray射线类</h1><p>一条起点为坐标(1,0,0) 方向为世界坐标Z轴正方向的射线<br /><strong>参数</strong>：</p><ul><li>origin 起点</li><li>direction 方向</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ray ray2 = <span class="keyword">new</span> Ray(Vector3.right, Vector3.forward);</span><br></pre></td></tr></table></figure><h1 id="camerascreenpointtoray方法-摄像机发射出的射线"><a class="markdownIt-Anchor" href="#camerascreenpointtoray方法-摄像机发射出的射线"></a> Camera.ScreenPointToRay方法 摄像机发射出的射线</h1><ul><li>返回从摄像机通过屏幕点的光线</li><li>得到一条从屏幕位置作为起点，摄像机视口方向为方向的射线</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ray ray3 = Camera.main.ScreenPointToRay(Input.mousePosition);</span><br></pre></td></tr></table></figure><h1 id="physicsraycast方法"><a class="markdownIt-Anchor" href="#physicsraycast方法"></a> Physics.Raycast方法</h1><h2 id="是否碰撞到对象"><a class="markdownIt-Anchor" href="#是否碰撞到对象"></a> 是否碰撞到对象</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回值：bool 是否碰撞到对象</span></span><br><span class="line"><span class="comment">//参数一：射线 </span></span><br><span class="line"><span class="comment">//参数二: 检测的最大距离 超出这个距离不检测 </span></span><br><span class="line"><span class="comment">//参数三：检测指定层级（不填检测所有层） </span></span><br><span class="line"><span class="comment">//参数四：是否忽略触发器</span></span><br><span class="line"><span class="keyword">if</span> (Physics.Raycast(ray, <span class="number">1000</span>, <span class="number">1</span> &lt;&lt; LayerMask.NameToLayer(<span class="string">&quot;Monster&quot;</span>), QueryTriggerInteraction.UseGlobal)) &#123; print(<span class="string">&quot;碰撞到了对象&quot;</span>); &#125;</span><br></pre></td></tr></table></figure><h2 id="获取相交单个物体信息-raycasthit结构体"><a class="markdownIt-Anchor" href="#获取相交单个物体信息-raycasthit结构体"></a> 获取相交单个物体信息 RaycastHit结构体</h2><p><strong>常用属性</strong>：<br /><code>collider</code></p><ul><li><strong>类型</strong>：<code>Collider</code></li><li><strong>说明</strong>：该属性返回与射线相交的碰撞体对象。通过这个属性，你可以访问碰撞体所在的游戏对象及其相关组件。</li></ul><p><code>point</code></p><ul><li><strong>类型</strong>：<code>Vector3</code></li><li><strong>说明</strong>：该属性表示射线与碰撞体相交的点的世界坐标。在很多场景中，比如在碰撞点生成特效，被子弹打中飙血，墙壁被打贴图</li></ul><p><code>distance</code></p><ul><li><strong>类型</strong>：<code>float</code></li><li><strong>说明</strong>：该属性表示从射线的起点到碰撞点的距离。可以用于判断射线与物体相交的远近。</li></ul><p><code>normal</code></p><ul><li><strong>类型</strong>：<code>Vector3</code></li><li><strong>说明</strong>：该属性表示碰撞点处碰撞体表面的法线向量。法线向量在很多场景中都有重要作用，比如反射效果、物体表面的朝向，射击游戏特效计算相关等。</li></ul><p><code>transform</code></p><ul><li><strong>类型</strong>：<code>Transform</code></li><li><strong>说明</strong>：该属性返回与射线相交的碰撞体所附着的游戏对象的 <code>Transform</code> 组件。</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">RaycastHit raycastHitInfo;</span><br><span class="line"><span class="comment">//返回值：bool 是否碰撞到对象</span></span><br><span class="line"><span class="comment">//参数一：射线</span></span><br><span class="line"><span class="comment">//参数二：RaycastHit是结构体 是值类型 Unity会通过out 关键在 在函数内部处理后 得到碰撞数据后返回到该参数中</span></span><br><span class="line"><span class="comment">//参数三：距离</span></span><br><span class="line"><span class="comment">//参数四：检测指定层级（不填检测所有层）</span></span><br><span class="line"><span class="comment">//参数五：是否忽略触发器 UseGlobal-使用全局设置 </span></span><br><span class="line"><span class="keyword">if</span> (Physics.Raycast(ray4, <span class="keyword">out</span> raycastHitInfo, <span class="number">1000</span>, <span class="number">1</span> &lt;&lt; LayerMask.NameToLayer(<span class="string">&quot;Monster&quot;</span>), QueryTriggerInteraction.UseGlobal))</span><br><span class="line">&#123;</span><br><span class="line">    print(<span class="string">&quot;碰撞到了物体 得到了信息&quot;</span>);</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;碰撞到物体的名字&quot;</span> + raycastHitInfo.collider.gameObject.name);</span><br><span class="line"></span><br><span class="line">    print(raycastHitInfo.point);</span><br><span class="line"></span><br><span class="line">    print(raycastHitInfo.normal);</span><br><span class="line"></span><br><span class="line">    print(raycastHitInfo.transform.position);</span><br><span class="line"></span><br><span class="line">    print(raycastHitInfo.distance);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取相交多个物体信息-raycasthit"><a class="markdownIt-Anchor" href="#获取相交多个物体信息-raycasthit"></a> 获取相交多个物体信息 <code>RaycastHit[]</code></h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回值：RaycastHit[] 碰撞到对象</span></span><br><span class="line"><span class="comment">//参数一：射线</span></span><br><span class="line"><span class="comment">//参数二：距离</span></span><br><span class="line"><span class="comment">//参数三：检测指定层级（不填检测所有层）</span></span><br><span class="line"><span class="comment">//参数四：是否忽略触发器</span></span><br><span class="line"><span class="comment">//Physics.RaycastAll方法传入RaycastHit数组对象可以得到多个碰到的对象</span></span><br><span class="line">RaycastHit[] raycastHitInfos = Physics.RaycastAll(ray4, <span class="number">1000</span>, <span class="number">1</span> &lt;&lt; LayerMask.NameToLayer(<span class="string">&quot;Monster&quot;</span>), QueryTriggerInteraction.UseGlobal);</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; raycastHitInfos.Length; i++)</span><br><span class="line">&#123;</span><br><span class="line">    print(<span class="string">&quot;碰到的所有物体 名字分别是&quot;</span> + raycastHitInfos[i].collider.gameObject.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="练习"><a class="markdownIt-Anchor" href="#练习"></a> 练习</h1><h2 id="子弹打墙"><a class="markdownIt-Anchor" href="#子弹打墙"></a> 子弹打墙</h2><p>实现鼠标点击场景上一面墙，在点击的位置创建子弹特效和弹孔</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 将鼠标在屏幕上的位置通过主相机转换为世界坐标系中的一条视线射线并赋值给 ray1。</span></span><br><span class="line">    Ray ray1 = Camera.main.ScreenPointToRay(Input.mousePosition);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过 Debug.DrawRay 方法可将检测到的射线绘制出来以便调试查看（仅在编辑模式下生效）。</span></span><br><span class="line">    Debug.DrawRay(ray1.origin, ray1.direction);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Input.GetMouseButtonDown(<span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Physics.Raycast(Camera.main.ScreenPointToRay(Input.mousePosition), <span class="keyword">out</span> info, <span class="number">1000</span>, <span class="number">1</span> &lt;&lt; LayerMask.NameToLayer(<span class="string">&quot;Monster&quot;</span>)))</span><br><span class="line">        &#123;</span><br><span class="line">            GameObject obj = Instantiate(Resources.Load&lt;GameObject&gt;(<span class="string">&quot;Effect/HitEff&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设定打击特效在发生碰撞的物体前方偏移 0.2 米处</span></span><br><span class="line">            obj.transform.position = info.point + info.normal * <span class="number">0.2f</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 根据表面法线调整特效的朝向角度，以适应目标物体产生视觉效果。</span></span><br><span class="line">            obj.transform.rotation = Quaternion.LookRotation(info.normal);</span><br><span class="line"></span><br><span class="line">            Destroy(obj, <span class="number">0.8f</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 特效 DDD </span></span><br><span class="line">            obj = Instantiate(Resources.Load&lt;GameObject&gt;(<span class="string">&quot;Effect/DDD&quot;</span>));</span><br><span class="line"></span><br><span class="line">            obj.transform.position = info.point + info.normal * <span class="number">0.2f</span>;</span><br><span class="line"></span><br><span class="line">            obj.transform.rotation = Quaternion.LookRotation(info.normal);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="鼠标长按物体移动"><a class="markdownIt-Anchor" href="#鼠标长按物体移动"></a> 鼠标长按物体移动</h2><p>场景上有一个平面，有一个立方体，当鼠标点击选中立方体时，长按鼠标左键 可以拖动立方体 在平面上移动，点击鼠标右键取消选中</p><p>注意：</p><ul><li>想要让物体只在平面就和平面做射线检测</li><li>物体的中心点 和 平面的中心点 和 物体脚下</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">RaycastHit hit;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于记录当前选中的对象的 Transform 组件。 </span></span><br><span class="line"><span class="keyword">private</span> Transform nowSel;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个公共浮点型变量 offsetY，用于设定物体拖曳时的高度偏移量。 </span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">float</span> offsetY;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 射线检测获取要选中的物体, 然后让物体跟随鼠标移动</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (Input.GetMouseButtonDown(<span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (Physics.Raycast(Camera.main.ScreenPointToRay(Input.mousePosition), <span class="keyword">out</span> hit, </span><br><span class="line">        <span class="number">100</span>, <span class="number">1</span> &lt;&lt; LayerMask.NameToLayer(<span class="string">&quot;Player&quot;</span>)))</span><br><span class="line">    &#123; </span><br><span class="line">        <span class="comment">// 得到想要操作对象的transform</span></span><br><span class="line">        nowSel = hit.transform;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前有选中的对象 并且是长按</span></span><br><span class="line"><span class="keyword">if</span> (nowSel != <span class="literal">null</span> &amp;&amp; Input.GetMouseButton(<span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (Physics.Raycast(Camera.main.ScreenPointToRay(Input.mousePosition), <span class="keyword">out</span> hit, </span><br><span class="line">        <span class="number">1000</span>, <span class="number">1</span> &lt;&lt; LayerMask.NameToLayer(<span class="string">&quot;Floor&quot;</span>)))</span><br><span class="line">    &#123;</span><br><span class="line">        nowSel.position = hit.point + Vector3.up *offsetY;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (Input.GetMouseButtonDown(<span class="number">1</span>))</span><br><span class="line">&#123;</span><br><span class="line">    nowSel = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是射线检测&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#什么是射线检测&quot;&gt;&lt;/a&gt; 什么是射线检测&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;物理系统中&lt;/li&gt;
&lt;li&gt;目前我们学习的物体相交判断&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;碰撞检测&lt;</summary>
      
    
    
    
    <category term="游戏引擎" scheme="http://example.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/"/>
    
    <category term="unity" scheme="http://example.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/"/>
    
    <category term="unity基础" scheme="http://example.com/categories/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/unity/unity%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="游戏引擎" scheme="http://example.com/tags/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/"/>
    
    <category term="unity" scheme="http://example.com/tags/unity/"/>
    
    <category term="unity基础" scheme="http://example.com/tags/unity%E5%9F%BA%E7%A1%80/"/>
    
    <category term="物理系统" scheme="http://example.com/tags/%E7%89%A9%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="核心系统" scheme="http://example.com/tags/%E6%A0%B8%E5%BF%83%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
</feed>
